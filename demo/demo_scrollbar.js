(()=>{"use strict";var __webpack_modules__={589:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/index.mjs + 160 modules\nvar lib = __webpack_require__(450);\n// EXTERNAL MODULE: ./node_modules/@pixi/utils/lib/index.mjs + 23 modules\nvar utils_lib = __webpack_require__(295);\n;// CONCATENATED MODULE: ./esm/SliderEvent.js\n\n/**\n * スライダーが移動した際に発行されるイベントです。\n * 現状のスライダー位置を報告します。\n */\n\nclass SliderEventContext {\n  constructor(rate) {\n    this.rate = rate;\n  }\n\n}\nclass SliderEventEmitter extends utils_lib.EventEmitter {}\n// EXTERNAL MODULE: ./node_modules/@pixi/display/lib/index.mjs + 4 modules\nvar display_lib = __webpack_require__(820);\n// EXTERNAL MODULE: ./node_modules/@pixi/events/lib/index.mjs + 7 modules\nvar events_lib = __webpack_require__(232);\n// EXTERNAL MODULE: ./node_modules/@pixi/math/lib/index.mjs + 11 modules\nvar math_lib = __webpack_require__(363);\n;// CONCATENATED MODULE: ./esm/SliderViewOption.js\n/**\n * スライダーを初期化する際のオプション\n */\n\n\nclass SliderViewOption {\n  static init(option) {\n    var _a, _b, _c;\n\n    if (option.rate != null) {\n      option.rate = Math.max(0, option.rate);\n      option.rate = Math.min(SliderView.MAX_RATE, option.rate);\n    }\n\n    (_a = option.minPosition) !== null && _a !== void 0 ? _a : option.minPosition = 0.0;\n    (_b = option.rate) !== null && _b !== void 0 ? _b : option.rate = 0.0;\n    (_c = option.isHorizontal) !== null && _c !== void 0 ? _c : option.isHorizontal = true;\n    this.check(option);\n    return option;\n  }\n\n  static check(option) {\n    this.checkParts(option.base, "base");\n    this.checkParts(option.button, "button");\n    this.checkParts(option.mask, "mask");\n    this.checkParts(option.bar, "bar");\n  }\n\n  static checkParts(obj, targetName) {\n    if (obj == null) return;\n    const bounds = SliderViewUtil.getContentsBounds(obj);\n\n    if (bounds.width === 0 && bounds.height === 0 && bounds.type === lib/* SHAPES.RECT */.HSM.RECT) {\n      throw new Error(`SliderView : ${targetName} 初期化オプションで指定されたDisplayObjectにバウンディングボックスが存在しません。Containerを利用する場合はhitAreaを利用してバウンディングボックスを手動で設定してください。`);\n    }\n\n    if (obj.parent) {\n      console.warn(`初期化オプションで指定されたパーツがすでに別の親にaddChildされています。SliderViewおよびScrollBarViewの構成パーツは同一のコンテナにaddChildされることを前提としています。`);\n    }\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/SliderView.js\n\n\n\n\n\n/**\n * スライダー用クラスです\n *\n * 使用上の注意 :\n * オブジェクトのサイズの計測にgetLocalBounds関数を使用しています。\n * hitAreaでサイズをあらかじめ与えてください。\n */\n\nclass SliderView extends display_lib/* Container */.W2 {\n  get buttonRootContainer() {\n    return this._buttonRootContainer;\n  }\n\n  get isHorizontal() {\n    return this._isHorizontal;\n  }\n\n  get sliderEventEmitter() {\n    return this._sliderEventEmitter;\n  }\n  /**\n   * @param option\n   */\n\n\n  constructor(option) {\n    super();\n    this._isHorizontal = true;\n    this.dragStartPos = new math_lib/* Point */.E9();\n    this.isDragging = false; // 現在スライド中か否か\n\n    this._sliderEventEmitter = new SliderEventEmitter();\n    /**\n     * スライダーのドラッグを開始する\n     * @param {Object} e\n     */\n\n    this.startMove = e => {\n      this.onPressedSliderButton(e);\n    };\n    /**\n     * スライダーのドラッグ中の処理\n     * @param e\n     */\n\n\n    this.moveSlider = e => {\n      this.onMoveSlider(e);\n    };\n    /**\n     * スライダーのドラッグ終了時の処理\n     * @param\te\n     */\n\n\n    this.moveSliderFinish = e => {\n      this.isDragging = false;\n\n      this._buttonRootContainer.removeEventListener("pointermove", this.moveSlider);\n\n      this._slideButton.off("pointerup", this.moveSliderFinish);\n\n      this._slideButton.off("pointerupoutside", this.moveSliderFinish);\n\n      this._sliderEventEmitter.emit("slider_change_finished", new SliderEventContext(this.rate));\n    };\n    /**\n     * このインスタンスを破棄する。\n     * @param\te\n     */\n\n\n    this.dispose = e => {\n      this.onDisposeFunction(e);\n    };\n\n    this.init(option);\n  }\n  /**\n   * 初期化処理\n   * @param option\n   */\n\n\n  init(option) {\n    option = SliderViewOption.init(option);\n    this._canvas = option.canvas;\n    this.base = option.base;\n    this._bar = this.initBarAndMask(option.bar);\n    this._barMask = this.initBarAndMask(option.mask);\n    if (this._bar && this._barMask) this._bar.mask = this._barMask;\n    this.slideButton = option.button;\n    this._minPosition = option.minPosition;\n    this._maxPosition = option.maxPosition;\n    this._isHorizontal = option.isHorizontal;\n    this._rate = option.rate;\n    this.changeRate(this._rate);\n  }\n\n  addChildParts(obj) {\n    var _a;\n\n    if (!obj) return;\n    (_a = obj.parent) === null || _a === void 0 ? void 0 : _a.removeChild(obj);\n    this.addChild(obj);\n  }\n  /**\n   * スライダーの位置を変更する\n   * @param\trate\tスライダーの位置 MIN 0.0 ~ MAX 100.0\n   */\n\n\n  changeRate(rate) {\n    //ドラッグ中は外部からの操作を無視する。\n    if (this.isDragging) return;\n    this._rate = rate;\n    const pos = this.convertRateToPixel(this._rate);\n    this.updateParts(pos);\n\n    this._sliderEventEmitter.emit("slider_change", new SliderEventContext(this.rate));\n  }\n\n  onPressedSliderButton(e) {\n    this.isDragging = true;\n    const target = e.currentTarget;\n    const localPos = this.toLocal(e.global);\n    this.dragStartPos = new math_lib/* Point */.E9(localPos.x - target.x, localPos.y - target.y);\n    this._buttonRootContainer = SliderView.getRootContainer(this._canvas, this._slideButton);\n\n    this._buttonRootContainer.addEventListener("pointermove", this.moveSlider);\n\n    this._slideButton.on("pointerup", this.moveSliderFinish);\n\n    this._slideButton.on("pointerupoutside", this.moveSliderFinish);\n  }\n\n  static getRootContainer(canvas, button) {\n    if (canvas) {\n      return canvas;\n    }\n\n    let parent = button.parent;\n\n    while (parent.parent) {\n      parent = parent.parent;\n    }\n\n    return parent;\n  }\n\n  onMoveSlider(e) {\n    const mousePos = this.limitSliderButtonPosition(e);\n    this.updateParts(mousePos);\n    this._rate = this.convertPixelToRate(mousePos);\n\n    this._sliderEventEmitter.emit("slider_change", new SliderEventContext(this.rate));\n  }\n  /**\n   * スライダーボタンの位置を制限する関数\n   * @return 制限で切り落とされたスライダーボタンの座標値 座標の原点はSliderViewであり、ボタンやバーではない。\n   */\n\n\n  limitSliderButtonPosition(evt) {\n    const mousePos = this.getMousePosition(this, evt);\n    return SliderViewUtil.clamp(mousePos, this._maxPosition, this._minPosition);\n  }\n  /**\n   * 各MCの位置、サイズをマウスポインタの位置に合わせて更新する\n   * moveSliderの内部処理\n   * @param\tmousePos SliderViewを原点としたローカルのマウス座標、limitSliderButtonPosition関数で可動範囲に制限済み。\n   */\n\n\n  updateParts(mousePos) {\n    const stretch = target => {\n      SliderViewUtil.setSize(target, this._isHorizontal, mousePos - SliderViewUtil.getPosition(target, this._isHorizontal));\n    }; //バーマスクがなければ、バー自体を伸縮する\n\n\n    if (this._bar && !this._barMask) {\n      stretch(this._bar);\n    } //バーマスクがあれば、マスクを伸縮する。\n\n\n    if (this._barMask) {\n      stretch(this._barMask);\n    } //ボタンの位置を更新する。\n\n\n    SliderViewUtil.setPosition(this._slideButton, this._isHorizontal, mousePos);\n  }\n  /**\n   * スライダーの地をクリックした際の処理\n   * その位置までスライダーをジャンプする\n   * @param evt\n   */\n\n\n  onPressBase(evt) {\n    this.dragStartPos = new math_lib/* Point */.E9();\n    this.moveSlider(evt);\n\n    this._sliderEventEmitter.emit("slider_change_finished", new SliderEventContext(this.rate));\n  }\n  /**\n   * スライダーの割合から、スライダーの位置を取得する\n   * @param\trate\n   * @return\n   */\n\n\n  convertRateToPixel(rate) {\n    return SliderViewUtil.convertRateToPixel(rate, this._maxPosition, this._minPosition);\n  }\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   * @param\tpixel\n   * @return\n   */\n\n\n  convertPixelToRate(pixel) {\n    return SliderViewUtil.convertPixelToRate(pixel, this._maxPosition, this._minPosition);\n  }\n  /**\n   * ドラッグ中のマウス座標を取得する。\n   * limitSliderButtonPosition内の処理。\n   */\n\n\n  getMousePosition(displayObj, evt) {\n    let localPos;\n\n    if (evt instanceof events_lib/* FederatedPointerEvent */.nR) {\n      localPos = displayObj.toLocal(evt.global);\n    } else {\n      localPos = displayObj.toLocal(new math_lib/* Point */.E9(evt.offsetX, evt.offsetY));\n    }\n\n    if (this._isHorizontal) {\n      return localPos.x - this.dragStartPos.x;\n    } else {\n      return localPos.y - this.dragStartPos.y;\n    }\n  }\n\n  set base(value) {\n    this._base = value;\n    this._base.interactive = true;\n\n    this._base.on("pointertap", e => {\n      console.log("tap", e);\n      this.onPressBase(e);\n    });\n\n    this.addChildParts(value);\n  }\n\n  initBarAndMask(value) {\n    if (value == null) return;\n    value.interactive = false;\n    value.interactiveChildren = false;\n    this.addChildParts(value);\n    return value;\n  }\n\n  set slideButton(value) {\n    this._slideButton = value;\n\n    this._slideButton.on("pointerdown", this.startMove);\n\n    this._slideButton.interactive = true;\n    this._slideButton.interactiveChildren = false;\n    this.addChildParts(value);\n  }\n\n  get rate() {\n    return this._rate;\n  }\n  /**\n   * 全てのDisplayObjectとEventListenerを解除する。\n   * @param {Event} e\n   */\n\n\n  onDisposeFunction(e) {\n    this.removeAllListeners();\n\n    this._base.removeAllListeners();\n\n    this._slideButton.removeAllListeners();\n\n    this.removeChildren();\n  }\n\n}\nSliderView.MAX_RATE = 1.0;\nclass SliderViewUtil {\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   */\n  static convertPixelToRate(pixel, max, min) {\n    if (max <= min) {\n      return 0.0;\n    }\n\n    const rate = (pixel - min) / (max - min) * SliderView.MAX_RATE;\n    return SliderViewUtil.clamp(rate, SliderView.MAX_RATE, 0.0);\n  }\n\n  static convertRateToPixel(rate, max, min) {\n    const pix = (max - min) * rate / SliderView.MAX_RATE + min;\n    return SliderViewUtil.clamp(pix, max, min);\n  }\n  /**\n   * ディスプレイオブジェクトからスクロール方向の座標値を取り出す\n   * @return displayObjの座標値。単位ピクセル\n   */\n\n\n  static getPosition(displayObj, isHorizontal) {\n    if (isHorizontal) {\n      return displayObj.x;\n    }\n\n    return displayObj.y;\n  }\n  /**\n   * ディスプレイオブジェクトにスクロール方向の座標値を設定する\n   */\n\n\n  static setPosition(displayObj, isHorizontal, position) {\n    if (!displayObj) return;\n\n    if (isHorizontal) {\n      displayObj.x = position;\n    } else {\n      displayObj.y = position;\n    }\n  }\n  /**\n   * スクロール方向の高さ、もしくは幅を取得する。単位ピクセル\n   */\n\n\n  static getSize(displayObj, isHorizontal) {\n    const size = SliderViewUtil.getContentsBounds(displayObj);\n\n    if (isHorizontal) {\n      return size.width * displayObj.scale.x;\n    } else {\n      return size.height * displayObj.scale.y;\n    }\n  }\n  /**\n   * スクロール方向の高さ、もしくは幅を設定する。\n   * @param displayObj\n   * @param isHorizontal\n   * @param amount width or height, range : 0 ~ displayObj.size.width or height, unit : px\n   */\n\n\n  static setSize(displayObj, isHorizontal, amount) {\n    const size = SliderViewUtil.getContentsBounds(displayObj);\n\n    if (isHorizontal) {\n      displayObj.scale.x = amount / size.width;\n    } else {\n      displayObj.scale.y = amount / size.height;\n    }\n  }\n\n  static clamp(num, max, min) {\n    num = Math.max(num, min);\n    num = Math.min(num, max);\n    return num;\n  }\n\n  static getContentsBounds(displayObj) {\n    if (displayObj.hitArea) return displayObj.hitArea;\n    return displayObj.getLocalBounds();\n  }\n\n}\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(471);\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarViewUtil.js\n\nclass ScrollBarViewUtil {\n  /**\n   * ターゲットコンテンツが、マスク領域内に収まる座標値を取得する。\n   * @param target\n   * @param mask\n   * @param isHorizontal\n   */\n  static getClampedTargetPosition(target, mask, isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const targetSize = getSize(target, isHorizontal);\n    const maskSize = getSize(mask, isHorizontal);\n    const minPos = Math.min(-targetSize + maskSize, 0.0);\n    const pos = SliderViewUtil.getPosition(target, isHorizontal);\n    return SliderViewUtil.clamp(pos, 0, minPos);\n  }\n  /**\n   * ターゲットコンテンツの位置を、マスク領域内に丸め込む。\n   * @param target\n   * @param mask\n   * @param position\n   * @param isHorizontal\n   */\n\n\n  static clampTargetPosition(target, mask, position, isHorizontal) {\n    SliderViewUtil.setPosition(target, isHorizontal, position);\n    const clampedPos = this.getClampedTargetPosition(target, mask, isHorizontal);\n    SliderViewUtil.setPosition(target, isHorizontal, clampedPos);\n  }\n\n  static getRatioOfOrigin(displayObj, isHorizontal) {\n    const bounds = SliderViewUtil.getContentsBounds(displayObj);\n    const size = isHorizontal ? bounds.width : bounds.height;\n    const position = isHorizontal ? bounds.x : bounds.y;\n    const ratio = position / size;\n\n    if (ratio > 0) {\n      console.warn(`${displayObj.name} : ボタンサイズが不適切です。ボタンの矩形内に原点が収まっていません。スクロールバーボタンは原点を囲む矩形としてください。`);\n    }\n\n    return ratio;\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/InertialScrollManager.js\n\n\n\n\n/**\n * スクロールバーエリアの慣性スクロールを処理するクラス。\n */\n\nclass InertialScrollManager extends lib/* utils.EventEmitter */.P6Y.EventEmitter {\n  get speed() {\n    return this._speed;\n  }\n\n  constructor(scrollBarView) {\n    super();\n    this.decelerationRate = 0.975;\n    this.overflowScrollRange = 180;\n    this._speed = 0.0;\n    this.isDragging = false;\n\n    this.onMouseDown = e => {\n      this.updateDragPos(e);\n      this.isDragging = true;\n      this._speed = 0.0;\n      if (this.tween) this.disposeTween();\n      this.addDragListener();\n    };\n\n    this.onMouseMove = e => {\n      const delta = this.getDragPos(e) - this.dragPos;\n      this._speed = delta;\n      this.addTargetPosition(delta * this.getOverflowDeceleration());\n      this.updateDragPos(e);\n    };\n\n    this.onMouseUp = e => {\n      this.removeDragListener();\n      this.isDragging = false;\n      this.onTick();\n    };\n\n    this.onTick = () => {\n      var _a;\n\n      if (this.isDragging) return;\n      if (this._speed === 0.0 && this.getLeaveRangeFromMask() === 0.0) return;\n      if ((_a = this.tween) === null || _a === void 0 ? void 0 : _a.isPlaying()) return; //位置による減速率増加。マスクエリアから離れているなら減速率が大きくなる。\n\n      const overflowDeceleration = this.getOverflowDeceleration();\n      this._speed *= this.decelerationRate * overflowDeceleration;\n      this.addTargetPosition(this._speed);\n      if (Math.abs(this._speed) > 0.1) return; //back ease\n\n      this._speed = 0.0;\n      const toObj = {\n        y: this.getClampedPos()\n      };\n      this.disposeTween();\n      this.tween = new tween_esm/* Tween */.kX(this.scrollBarView.contents.target).to(toObj, 666).onUpdate(() => {\n        this.emit("update_target_position");\n      }).easing(tween_esm/* Easing.Cubic.Out */.oY.Cubic.Out).start();\n    };\n\n    this.stopInertial = () => {\n      this._speed = 0.0;\n      this.disposeTween();\n    };\n\n    this.disposeTween = () => {\n      if (this.tween) {\n        this.tween.stop();\n        this.tween = null;\n      }\n    };\n\n    this.scrollBarView = scrollBarView;\n    scrollBarView.scrollBarEventEmitter.on("stop_inertial_tween", this.stopInertial);\n    const target = this.scrollBarView.contents.target;\n    target.interactive = true;\n    this.start();\n  }\n\n  start() {\n    if (this._isStart) return;\n    this._isStart = true;\n    const target = this.scrollBarView.contents.target;\n    target.on("pointerdown", this.onMouseDown);\n    lib/* Ticker.shared.add */.vB5.shared.add(this.onTick);\n  }\n\n  stop() {\n    if (!this._isStart) return;\n    this._isStart = false;\n    const target = this.scrollBarView.contents.target;\n    target.off("pointerdown", this.onMouseDown);\n    this.removeDragListener();\n    this.stopInertial();\n    lib/* Ticker.shared.remove */.vB5.shared.remove(this.onTick);\n  }\n\n  addDragListener() {\n    this.switchDragListener(true);\n  }\n\n  removeDragListener() {\n    this.switchDragListener(false);\n  }\n\n  switchDragListener(isOn) {\n    const target = this.scrollBarView.contents.target;\n\n    const switchListener = (isOn, event, listener) => {\n      if (isOn) {\n        target.on(event, listener);\n      } else {\n        target.off(event, listener);\n      }\n    };\n\n    switchListener(isOn, "pointermove", this.onMouseMove);\n    switchListener(isOn, "pointerup", this.onMouseUp);\n    switchListener(isOn, "pointerupoutside", this.onMouseUp);\n  }\n\n  getDragPos(e) {\n    return SliderViewUtil.getPosition(e.global, this.scrollBarView.isHorizontal);\n  }\n\n  updateDragPos(e) {\n    this.dragPos = this.getDragPos(e);\n  }\n\n  addTargetPosition(delta) {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const currentPos = SliderViewUtil.getPosition(target, isHorizontal);\n    SliderViewUtil.setPosition(target, isHorizontal, currentPos + delta);\n    this.emit("update_target_position");\n  }\n  /**\n   * スクロールのオーバーフロー量から、減退率を割り出す。\n   * overflowScrollRange以上に離れている場合は0.0\n   * スクロールエリア内にコンテンツがある場合は1.0を返す。\n   */\n\n\n  getOverflowDeceleration() {\n    const difPos = this.getLeaveRangeFromMask();\n    let overflowDeceleration = (this.overflowScrollRange - difPos) / this.overflowScrollRange;\n    if (overflowDeceleration < 0.0) overflowDeceleration = 0.0;\n    return overflowDeceleration;\n  }\n  /**\n   * ターゲットコンテンツがマスク領域からどれだけ離れているか。\n   */\n\n\n  getLeaveRangeFromMask() {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const currentPos = SliderViewUtil.getPosition(target, isHorizontal);\n    const clampedPos = this.getClampedPos();\n    return Math.abs(currentPos - clampedPos);\n  }\n\n  getClampedPos() {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    return ScrollBarViewUtil.getClampedTargetPosition(target, this.scrollBarView.contents.mask, isHorizontal);\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/MouseWheelScrollManager.js\n\n\n\n/**\n * ScrollBarViewを受け取り、マウスホイールによる操作を行うクラス\n */\n\nclass MouseWheelScrollManager extends lib/* utils.EventEmitter */.P6Y.EventEmitter {\n  constructor(scrollBarView) {\n    super();\n    this.delta = 16; //TODO add support deltaX / deltaY\n\n    this.wheelHandler = e => {\n      const shift = e.deltaY > 0 ? -this.delta : this.delta;\n      this.scroll(shift);\n    };\n\n    this.scrollBarView = scrollBarView;\n    const target = this.scrollBarView.contents.target;\n    target.interactive = true;\n    this.start();\n  }\n\n  start() {\n    if (this._isStart) return;\n    const target = this.scrollBarView.contents.target;\n    target.on("wheel", this.wheelHandler);\n    this._isStart = true;\n  }\n\n  stop() {\n    const target = this.scrollBarView.contents.target;\n    target.off("wheel", this.wheelHandler);\n    this._isStart = false;\n  }\n\n  scroll(delta) {\n    const target = this.scrollBarView.contents.target;\n    const mask = this.scrollBarView.contents.mask;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const pos = SliderViewUtil.getPosition(target, isHorizontal) + delta;\n    ScrollBarViewUtil.clampTargetPosition(target, mask, pos, isHorizontal);\n    this.emit("update_target_position");\n    this.scrollBarView.scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarContentsEventType.js\nvar ScrollBarContentsEventType;\n\n(function (ScrollBarContentsEventType) {\n  ScrollBarContentsEventType["CHANGED_CONTENTS_SIZE"] = "ScrollBarContentsEventType_CHANGED_CONTENTS_SIZE";\n})(ScrollBarContentsEventType || (ScrollBarContentsEventType = {}));\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarContents.js\n\n\n\n/**\n * スクロールバーで操作するコンテンツ\n */\n\nclass ScrollBarContents extends utils_lib.EventEmitter {\n  get target() {\n    return this._target;\n  }\n\n  set target(value) {\n    this._target = value;\n    this.emit(ScrollBarContentsEventType.CHANGED_CONTENTS_SIZE);\n  }\n\n  get mask() {\n    return this._mask;\n  }\n\n  set mask(value) {\n    this._mask = value;\n    this.emit(ScrollBarContentsEventType.CHANGED_CONTENTS_SIZE);\n  }\n  /**\n   * コンストラクタ\n   *\n   * @param target スクロール操作を受けるコンテンツ\n   * @param mask targetを切り抜くマスク\n   * @param container targetおよびmaskを格納する親コンテナ\n   */\n\n\n  constructor(target, mask, container) {\n    super();\n    this.container = container;\n    this._target = target;\n    this._mask = mask;\n    ScrollBarContents.init(this);\n  }\n\n  static init(scrollBarContents) {\n    if (scrollBarContents._target.mask !== scrollBarContents._mask) {\n      scrollBarContents._target.mask = scrollBarContents._mask;\n    }\n\n    const addToContainer = displayObject => {\n      var _a;\n\n      if (displayObject.parent === scrollBarContents.container) return;\n      (_a = displayObject.parent) === null || _a === void 0 ? void 0 : _a.removeChild(displayObject);\n      scrollBarContents.container.addChild(displayObject);\n    };\n\n    addToContainer(scrollBarContents._target);\n    addToContainer(scrollBarContents._mask);\n  }\n  /**\n   * 現状のスクロール位置を取得する。単位rate\n   * 0.0でコンテンツはTOP, 1.0でBOTTOMに位置している。\n   *\n   * @param isHorizontal\n   */\n\n\n  getScrollPositionAsRate(isHorizontal) {\n    const getPos = SliderViewUtil.getPosition;\n    const zeroPos = getPos(this.mask, isHorizontal);\n    const contentsPos = getPos(this.target, isHorizontal);\n    const contentsPositionDif = zeroPos - contentsPos;\n    const movableRange = this.getMovableRange(isHorizontal);\n    return contentsPositionDif / movableRange * SliderView.MAX_RATE;\n  }\n  /**\n   * スクロールの最大可動領域を取得する。単位px\n   * もし可動域がゼロpx以下の場合、極小の正の値を返す。\n   *\n   * @param isHorizontal\n   * @private\n   */\n\n\n  getMovableRange(isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const targetSize = getSize(this._target, isHorizontal);\n    const maskSize = getSize(this._mask, isHorizontal);\n    const dif = targetSize - maskSize;\n\n    if (dif <= 0.0) {\n      return 1e-128;\n    }\n\n    return dif;\n  }\n  /**\n   * コンテンツを、指定されたrateの位置までスクロールする\n   *\n   * @param rate\n   * @param isHorizontal\n   */\n\n\n  scroll(rate, isHorizontal) {\n    const getPos = SliderViewUtil.getPosition;\n    const zeroPos = getPos(this._mask, isHorizontal);\n    const movableRange = this.getMovableRange(isHorizontal);\n    const contentsPos = zeroPos - movableRange * (rate / SliderView.MAX_RATE);\n    SliderViewUtil.setPosition(this._target, isHorizontal, contentsPos);\n  }\n  /**\n   * コンテンツが表示領域にどれだけ表示されているかの比率を取得する。\n   * この比率は、スクロールバーボタンのスケールとなる。\n   *\n   * 例 : コンテンツサイズが200、表示領域が100なら0.5\n   * コンテンツがすべて表示されているなら1.0\n   *\n   * @param isHorizontal\n   * @return 0.0 ~ 1.0\n   */\n\n\n  getDisplayRate(isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const contentsSize = getSize(this.target, isHorizontal);\n    const maskSize = getSize(this.mask, isHorizontal);\n    return SliderViewUtil.clamp(maskSize / contentsSize, SliderView.MAX_RATE, 0.0);\n  }\n\n  dispose() {\n    this.removeAllListeners();\n    this.container = null;\n    this._mask = null;\n    this._target = null;\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarEvent.js\n\nclass ScrollBarEventEmitter extends lib/* utils.EventEmitter */.P6Y.EventEmitter {}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarView.js\n\n\n\n\n\n\n/**\n * スクロールバーを表すクラスです。\n *\n * このクラスは、スライダーに以下の機能を追加したものです。\n *\n * \t\t1.コンテンツサイズに合わせた、スクロールバーの伸縮\n * \t\t2.スクロールバーの伸縮にあわせた、移動範囲の制限\n * \t\t3.スクロールバーの伸縮にあわせた、移動値の取得\n */\n\nclass ScrollBarView extends SliderView {\n  get contents() {\n    return this._contents;\n  }\n\n  get autoHide() {\n    return this._autoHide;\n  }\n\n  set autoHide(value) {\n    this._autoHide = value;\n    this.updateSliderVisible();\n  }\n\n  get scrollBarEventEmitter() {\n    return this._scrollBarEventEmitter;\n  }\n\n  constructor(option, scrollContents) {\n    super(option);\n    this._autoHide = false;\n    this._scrollBarEventEmitter = new ScrollBarEventEmitter();\n    /**\n     * スライダーイベントに応じてコンテンツをスクロールする\n     * @param {Object} e\n     */\n\n    this.updateContentsPosition = e => {\n      const evt = e;\n      this.updateContentsPositionWithRate(evt.rate);\n    };\n\n    this._contents = scrollContents;\n\n    this._contents.on(ScrollBarContentsEventType.CHANGED_CONTENTS_SIZE, this.updateSlider);\n\n    this._sliderEventEmitter.on("slider_change", this.updateContentsPosition);\n\n    this.changeRate(option.rate);\n    this.wheelManager = new MouseWheelScrollManager(this);\n    this.wheelManager.on("update_target_position", () => {\n      this.updateSliderPosition();\n    });\n    this.inertialManager = new InertialScrollManager(this);\n    this.inertialManager.on("update_target_position", () => {\n      this.updateSliderPosition();\n    });\n  }\n  /**\n   * スライダーボタンの位置を制限する関数\n   * @return 制限で切り落とされたスライダーボタンの座標値\n   */\n\n\n  limitSliderButtonPosition(evt) {\n    const mousePos = this.getMousePosition(this, evt);\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.clamp(mousePos, range.max, range.min);\n  }\n  /**\n   * スライダーの割合から、スライダーの位置を取得する\n   * @param\trate\n   * @return\n   */\n\n\n  convertRateToPixel(rate) {\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.convertRateToPixel(rate, range.max, range.min);\n  }\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   * @param\tpixel\n   * @return\n   */\n\n\n  convertPixelToRate(pixel) {\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.convertPixelToRate(pixel, range.max, range.min);\n  }\n  /**\n   * スライダーボタンの可動範囲を取得する。単位ピクセル\n   */\n\n\n  getRangeOfSliderButtonPosition() {\n    const buttonSize = this.slideButtonSize;\n    const ratio = ScrollBarViewUtil.getRatioOfOrigin(this._slideButton, this.isHorizontal);\n    const max = this._maxPosition - (1.0 + ratio) * buttonSize;\n    const min = this._minPosition - ratio * buttonSize;\n    return {\n      max,\n      min\n    };\n  }\n  /**\n   * スライダーボタンのサイズ。\n   * @returns {number}\n   */\n\n\n  get slideButtonSize() {\n    this.updateSliderSize();\n    return SliderViewUtil.getSize(this._slideButton, this.isHorizontal);\n  }\n  /**\n   * スクロールバーのボタンサイズ及び位置を更新する。\n   * コンテンツサイズが変更された場合の更新にも利用する。\n   */\n\n\n  updateSlider() {\n    if (!this.isUpdatableSliderSize()) return;\n    this.updateSliderSize();\n    this.updateSliderPosition();\n  }\n  /**\n   * 現状のコンテンツおよびマスク位置から、スライダーの割合を算出する。\n   * その割合でスライダーの位置を更新する。\n   */\n\n\n  updateSliderPosition() {\n    const rate = this.contents.getScrollPositionAsRate(this.isHorizontal);\n    this.changeRate(rate);\n  }\n\n  isUpdatableSliderSize() {\n    var _a, _b;\n\n    return ((_a = this._contents) === null || _a === void 0 ? void 0 : _a.target) != null && ((_b = this._contents) === null || _b === void 0 ? void 0 : _b.mask) != null && this._slideButton != null;\n  }\n  /**\n   * スライダーボタンのサイズの伸縮を行う。\n   */\n\n\n  updateSliderSize() {\n    if (!this.isUpdatableSliderSize()) return;\n    const fullSize = this._maxPosition - this._minPosition;\n\n    const displayRate = this._contents.getDisplayRate(this.isHorizontal);\n\n    const sliderSize = fullSize * displayRate;\n    SliderViewUtil.setSize(this._slideButton, this.isHorizontal, sliderSize);\n    this.updateSliderVisible();\n  }\n  /**\n   * autoHideの条件に一致するかを判定し、表示を切り替える。\n   * @private\n   */\n\n\n  updateSliderVisible() {\n    this._slideButton.visible = this._slideButton.interactive = !this.isHidden;\n  }\n  /**\n   * autoHideの条件に一致するかを判定する\n   */\n\n\n  get isHidden() {\n    //autoHideが設定されていない場合は常に表示\n    if (!this.autoHide) return false;\n    return this._contents.getDisplayRate(this.isHorizontal) === 1.0;\n  }\n  /**\n   * rate値を元にコンテンツをスクロールする。\n   * @param {number} rate\n   */\n\n\n  updateContentsPositionWithRate(rate) {\n    this._contents.scroll(rate, this.isHorizontal);\n  }\n\n  onPressedSliderButton(e) {\n    super.onPressedSliderButton(e);\n\n    this._scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n\n  onMoveSlider(e) {\n    super.onMoveSlider(e);\n\n    this._scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n\n  onPressBase(evt) {\n    if (this.isHidden) return;\n    super.onPressBase(evt);\n\n    this._scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n\n  onDisposeFunction(e) {\n    this._contents.dispose();\n\n    this._contents = null;\n    super.onDisposeFunction(e);\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/index.js\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo_scrollbar.js\n\n\n\n\nconst onDomContentsLoaded = () => {\n  const app = new lib/* Application */.MxU({\n    width: 800,\n    height: 800\n  });\n  document.body.appendChild(app.view);\n  lib/* Ticker.shared.add */.vB5.shared.add(e => {\n    tween_esm/* default.update */.ZP.update(performance.now());\n  });\n  const scrollbar = initScrollBar(app.stage, app.view);\n\n  const addButton = label => {\n    const btnPlus = document.createElement("button");\n    btnPlus.innerText = label;\n    document.body.appendChild(btnPlus);\n    return btnPlus;\n  };\n\n  const btnPlus = addButton("Contents Size +");\n  const btnMinus = addButton("Contents Size -");\n\n  const changeSize = dif => {\n    const scrollPosition = scrollbar.rate;\n    overrideContents(scrollbar.contents.target, dif);\n    scrollbar.updateSlider();\n    scrollbar.changeRate(scrollPosition);\n  };\n\n  const onPlus = () => {\n    changeSize(64);\n  };\n\n  const onMinus = () => {\n    changeSize(-64);\n  };\n\n  btnPlus.addEventListener("click", onPlus);\n  btnMinus.addEventListener("click", onMinus);\n};\n/**\n * スクロールバーの実装サンプル\n * @param stage\n */\n\n\nconst initScrollBar = (stage, view) => {\n  const SCROLLBAR_W = 16;\n  const SCROLLBAR_H = 360;\n  const SCROLLBAR_Y = 120;\n  const CONTENTS_W = 240;\n  const container = new lib/* Container */.W20();\n  stage.addChild(container);\n  container.x = 32;\n  container.y = SCROLLBAR_Y;\n  const contents = getScrollBarOption(CONTENTS_W, SCROLLBAR_H, container);\n  const scrollbar = new ScrollBarView({\n    base: getScrollBarBase(SCROLLBAR_W, SCROLLBAR_H, 0x0000ff),\n    button: getScrollBarButton(SCROLLBAR_W, 0xffff00),\n    minPosition: 0,\n    maxPosition: SCROLLBAR_H,\n    rate: 35.0,\n    isHorizontal: false,\n    canvas: view\n  }, contents);\n  stage.addChild(scrollbar);\n  scrollbar.x = container.x + CONTENTS_W;\n  scrollbar.y = SCROLLBAR_Y;\n  scrollbar.sliderEventEmitter.on("slider_change", e => {// console.log(e);\n  });\n  /**\n   * スクロール動作を確認するために、故意にマスクを外しています。\n   */\n\n  contents.target.mask = null;\n  return scrollbar;\n};\n\nconst getScrollBarBase = (w, h, color) => {\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(color);\n  g.drawRect(0, 0, w, h);\n  g.hitArea = new lib/* Rectangle */.AeJ(0, 0, w, h);\n  return g;\n};\n\nconst getScrollBarButton = (width, color) => {\n  const ratio = 0.5;\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(color);\n  g.drawRect(-width / 2, -width * ratio, width, width);\n  g.hitArea = new lib/* Rectangle */.AeJ(-width / 2, -width * ratio, width, width);\n  g.x = width / 2;\n  return g;\n};\n\nconst getScrollBarContents = (color, w, h, container, alpha = 1.0) => {\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(color, alpha);\n  g.drawRect(0, 0, w, h);\n  g.hitArea = new lib/* Rectangle */.AeJ(0, 0, w, h);\n  container.addChild(g);\n  return g;\n};\n\nconst overrideContents = (g, difHeight) => {\n  const fill = g.fill.clone();\n  console.log(fill);\n  const hitArea = g.hitArea.clone();\n  hitArea.height += difHeight;\n  g.clear();\n  g.beginFill(fill.color, fill.alpha);\n  g.drawRect(hitArea.x, hitArea.y, hitArea.width, hitArea.height);\n  g.hitArea = new lib/* Rectangle */.AeJ(hitArea.x, hitArea.y, hitArea.width, hitArea.height);\n};\n\nconst getScrollBarOption = (contentsW, scrollBarH, container) => {\n  const targetContents = getScrollBarContents(0xff00ff, contentsW, scrollBarH * 2, container);\n  const contentsMask = getScrollBarContents(0x0000ff, contentsW, scrollBarH, container, 0.3);\n  return new ScrollBarContents(targetContents, contentsMask, container);\n};\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\n\n\nif (document.readyState !== "loading") {\n  onDomContentsLoaded();\n} else {\n  document.addEventListener("DOMContentLoaded", onDomContentsLoaded);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFULENBQTBCLGtCQUExQixFQUE4Q21KLG1CQUE5QztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL1NsaWRlckV2ZW50LmpzPzY0M2YiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL1NsaWRlclZpZXdPcHRpb24uanM/YmU4NCIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vU2xpZGVyVmlldy5qcz80ZmMyIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9zY3JvbGxCYXIvU2Nyb2xsQmFyVmlld1V0aWwuanM/ZjJjMyIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vc2Nyb2xsQmFyL0luZXJ0aWFsU2Nyb2xsTWFuYWdlci5qcz8zNmJmIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9zY3JvbGxCYXIvTW91c2VXaGVlbFNjcm9sbE1hbmFnZXIuanM/YjcwYyIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vc2Nyb2xsQmFyL1Njcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlLmpzP2Y0MjMiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL3Njcm9sbEJhci9TY3JvbGxCYXJDb250ZW50cy5qcz81YWQ1Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9zY3JvbGxCYXIvU2Nyb2xsQmFyRXZlbnQuanM/NTYzYyIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vc2Nyb2xsQmFyL1Njcm9sbEJhclZpZXcuanM/YTBmZiIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vc2Nyb2xsQmFyL2luZGV4LmpzP2Y1MjEiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL2luZGV4LmpzP2IyMzkiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZGVtb1NyYy9kZW1vX3Njcm9sbGJhci5qcz80Njk1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJAcGl4aS91dGlsc1wiO1xuLyoqXG4gKiDjgrnjg6njgqTjg4Djg7zjgYznp7vli5XjgZfjgZ/pmpvjgavnmbrooYzjgZXjgozjgovjgqTjg5njg7Pjg4jjgafjgZnjgIJcbiAqIOePvueKtuOBruOCueODqeOCpOODgOODvOS9jee9ruOCkuWgseWRiuOBl+OBvuOBmeOAglxuICovXG5leHBvcnQgY2xhc3MgU2xpZGVyRXZlbnRDb250ZXh0IHtcbiAgICBjb25zdHJ1Y3RvcihyYXRlKSB7XG4gICAgICAgIHRoaXMucmF0ZSA9IHJhdGU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFNsaWRlckV2ZW50RW1pdHRlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG59XG4iLCIvKipcbiAqIOOCueODqeOCpOODgOODvOOCkuWIneacn+WMluOBmeOCi+mam+OBruOCquODl+OCt+ODp+ODs1xuICovXG5pbXBvcnQgeyBTSEFQRVMgfSBmcm9tIFwicGl4aS5qc1wiO1xuaW1wb3J0IHsgU2xpZGVyVmlldywgU2xpZGVyVmlld1V0aWwgfSBmcm9tIFwiLi9TbGlkZXJWaWV3XCI7XG5leHBvcnQgY2xhc3MgU2xpZGVyVmlld09wdGlvbiB7XG4gICAgc3RhdGljIGluaXQob3B0aW9uKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBpZiAob3B0aW9uLnJhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9uLnJhdGUgPSBNYXRoLm1heCgwLCBvcHRpb24ucmF0ZSk7XG4gICAgICAgICAgICBvcHRpb24ucmF0ZSA9IE1hdGgubWluKFNsaWRlclZpZXcuTUFYX1JBVEUsIG9wdGlvbi5yYXRlKTtcbiAgICAgICAgfVxuICAgICAgICAoX2EgPSBvcHRpb24ubWluUG9zaXRpb24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChvcHRpb24ubWluUG9zaXRpb24gPSAwLjApO1xuICAgICAgICAoX2IgPSBvcHRpb24ucmF0ZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogKG9wdGlvbi5yYXRlID0gMC4wKTtcbiAgICAgICAgKF9jID0gb3B0aW9uLmlzSG9yaXpvbnRhbCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogKG9wdGlvbi5pc0hvcml6b250YWwgPSB0cnVlKTtcbiAgICAgICAgdGhpcy5jaGVjayhvcHRpb24pO1xuICAgICAgICByZXR1cm4gb3B0aW9uO1xuICAgIH1cbiAgICBzdGF0aWMgY2hlY2sob3B0aW9uKSB7XG4gICAgICAgIHRoaXMuY2hlY2tQYXJ0cyhvcHRpb24uYmFzZSwgXCJiYXNlXCIpO1xuICAgICAgICB0aGlzLmNoZWNrUGFydHMob3B0aW9uLmJ1dHRvbiwgXCJidXR0b25cIik7XG4gICAgICAgIHRoaXMuY2hlY2tQYXJ0cyhvcHRpb24ubWFzaywgXCJtYXNrXCIpO1xuICAgICAgICB0aGlzLmNoZWNrUGFydHMob3B0aW9uLmJhciwgXCJiYXJcIik7XG4gICAgfVxuICAgIHN0YXRpYyBjaGVja1BhcnRzKG9iaiwgdGFyZ2V0TmFtZSkge1xuICAgICAgICBpZiAob2JqID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IFNsaWRlclZpZXdVdGlsLmdldENvbnRlbnRzQm91bmRzKG9iaik7XG4gICAgICAgIGlmIChib3VuZHMud2lkdGggPT09IDAgJiZcbiAgICAgICAgICAgIGJvdW5kcy5oZWlnaHQgPT09IDAgJiZcbiAgICAgICAgICAgIGJvdW5kcy50eXBlID09PSBTSEFQRVMuUkVDVCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTbGlkZXJWaWV3IDogJHt0YXJnZXROYW1lfSDliJ3mnJ/ljJbjgqrjg5fjgrfjg6fjg7PjgafmjIflrprjgZXjgozjgZ9EaXNwbGF5T2JqZWN044Gr44OQ44Km44Oz44OH44Kj44Oz44Kw44Oc44OD44Kv44K544GM5a2Y5Zyo44GX44G+44Gb44KT44CCQ29udGFpbmVy44KS5Yip55So44GZ44KL5aC05ZCI44GvaGl0QXJlYeOCkuWIqeeUqOOBl+OBpuODkOOCpuODs+ODh+OCo+ODs+OCsOODnOODg+OCr+OCueOCkuaJi+WLleOBp+ioreWumuOBl+OBpuOBj+OBoOOBleOBhOOAgmApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmoucGFyZW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYOWIneacn+WMluOCquODl+OCt+ODp+ODs+OBp+aMh+WumuOBleOCjOOBn+ODkeODvOODhOOBjOOBmeOBp+OBq+WIpeOBruimquOBq2FkZENoaWxk44GV44KM44Gm44GE44G+44GZ44CCU2xpZGVyVmlld+OBiuOCiOOBs1Njcm9sbEJhclZpZXfjga7mp4vmiJDjg5Hjg7zjg4Tjga/lkIzkuIDjga7jgrPjg7Pjg4bjg4rjgathZGRDaGlsZOOBleOCjOOCi+OBk+OBqOOCkuWJjeaPkOOBqOOBl+OBpuOBhOOBvuOBmeOAgmApO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSBcIkBwaXhpL2Rpc3BsYXlcIjtcbmltcG9ydCB7IEZlZGVyYXRlZFBvaW50ZXJFdmVudCB9IGZyb20gXCJAcGl4aS9ldmVudHNcIjtcbmltcG9ydCB7IFBvaW50IH0gZnJvbSBcIkBwaXhpL21hdGhcIjtcbmltcG9ydCB7IFNsaWRlckV2ZW50Q29udGV4dCwgU2xpZGVyRXZlbnRFbWl0dGVyIH0gZnJvbSBcIi4vU2xpZGVyRXZlbnRcIjtcbmltcG9ydCB7IFNsaWRlclZpZXdPcHRpb24gfSBmcm9tIFwiLi9TbGlkZXJWaWV3T3B0aW9uXCI7XG4vKipcbiAqIOOCueODqeOCpOODgOODvOeUqOOCr+ODqeOCueOBp+OBmVxuICpcbiAqIOS9v+eUqOS4iuOBruazqOaEjyA6XG4gKiDjgqrjg5bjgrjjgqfjgq/jg4jjga7jgrXjgqTjgrrjga7oqIjmuKzjgatnZXRMb2NhbEJvdW5kc+mWouaVsOOCkuS9v+eUqOOBl+OBpuOBhOOBvuOBmeOAglxuICogaGl0QXJlYeOBp+OCteOCpOOCuuOCkuOBguOCieOBi+OBmOOCgeS4juOBiOOBpuOBj+OBoOOBleOBhOOAglxuICovXG5leHBvcnQgY2xhc3MgU2xpZGVyVmlldyBleHRlbmRzIENvbnRhaW5lciB7XG4gICAgZ2V0IGJ1dHRvblJvb3RDb250YWluZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idXR0b25Sb290Q29udGFpbmVyO1xuICAgIH1cbiAgICBnZXQgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNIb3Jpem9udGFsO1xuICAgIH1cbiAgICBnZXQgc2xpZGVyRXZlbnRFbWl0dGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2xpZGVyRXZlbnRFbWl0dGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb3B0aW9uXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0aW9uKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2lzSG9yaXpvbnRhbCA9IHRydWU7XG4gICAgICAgIHRoaXMuZHJhZ1N0YXJ0UG9zID0gbmV3IFBvaW50KCk7XG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlOyAvLyDnj77lnKjjgrnjg6njgqTjg4nkuK3jgYvlkKbjgYtcbiAgICAgICAgdGhpcy5fc2xpZGVyRXZlbnRFbWl0dGVyID0gbmV3IFNsaWRlckV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICog44K544Op44Kk44OA44O844Gu44OJ44Op44OD44Kw44KS6ZaL5aeL44GZ44KLXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YXJ0TW92ZSA9IChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uUHJlc3NlZFNsaWRlckJ1dHRvbihlKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOOCueODqeOCpOODgOODvOOBruODieODqeODg+OCsOS4reOBruWHpueQhlxuICAgICAgICAgKiBAcGFyYW0gZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tb3ZlU2xpZGVyID0gKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25Nb3ZlU2xpZGVyKGUpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICog44K544Op44Kk44OA44O844Gu44OJ44Op44OD44Kw57WC5LqG5pmC44Gu5Yem55CGXG4gICAgICAgICAqIEBwYXJhbVx0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tb3ZlU2xpZGVyRmluaXNoID0gKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9uUm9vdENvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5tb3ZlU2xpZGVyKTtcbiAgICAgICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uLm9mZihcInBvaW50ZXJ1cFwiLCB0aGlzLm1vdmVTbGlkZXJGaW5pc2gpO1xuICAgICAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24ub2ZmKFwicG9pbnRlcnVwb3V0c2lkZVwiLCB0aGlzLm1vdmVTbGlkZXJGaW5pc2gpO1xuICAgICAgICAgICAgdGhpcy5fc2xpZGVyRXZlbnRFbWl0dGVyLmVtaXQoXCJzbGlkZXJfY2hhbmdlX2ZpbmlzaGVkXCIsIG5ldyBTbGlkZXJFdmVudENvbnRleHQodGhpcy5yYXRlKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjgZPjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLnoLTmo4TjgZnjgovjgIJcbiAgICAgICAgICogQHBhcmFtXHRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpc3Bvc2UgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkRpc3Bvc2VGdW5jdGlvbihlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pbml0KG9wdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOWIneacn+WMluWHpueQhlxuICAgICAqIEBwYXJhbSBvcHRpb25cbiAgICAgKi9cbiAgICBpbml0KG9wdGlvbikge1xuICAgICAgICBvcHRpb24gPSBTbGlkZXJWaWV3T3B0aW9uLmluaXQob3B0aW9uKTtcbiAgICAgICAgdGhpcy5fY2FudmFzID0gb3B0aW9uLmNhbnZhcztcbiAgICAgICAgdGhpcy5iYXNlID0gb3B0aW9uLmJhc2U7XG4gICAgICAgIHRoaXMuX2JhciA9IHRoaXMuaW5pdEJhckFuZE1hc2sob3B0aW9uLmJhcik7XG4gICAgICAgIHRoaXMuX2Jhck1hc2sgPSB0aGlzLmluaXRCYXJBbmRNYXNrKG9wdGlvbi5tYXNrKTtcbiAgICAgICAgaWYgKHRoaXMuX2JhciAmJiB0aGlzLl9iYXJNYXNrKVxuICAgICAgICAgICAgdGhpcy5fYmFyLm1hc2sgPSB0aGlzLl9iYXJNYXNrO1xuICAgICAgICB0aGlzLnNsaWRlQnV0dG9uID0gb3B0aW9uLmJ1dHRvbjtcbiAgICAgICAgdGhpcy5fbWluUG9zaXRpb24gPSBvcHRpb24ubWluUG9zaXRpb247XG4gICAgICAgIHRoaXMuX21heFBvc2l0aW9uID0gb3B0aW9uLm1heFBvc2l0aW9uO1xuICAgICAgICB0aGlzLl9pc0hvcml6b250YWwgPSBvcHRpb24uaXNIb3Jpem9udGFsO1xuICAgICAgICB0aGlzLl9yYXRlID0gb3B0aW9uLnJhdGU7XG4gICAgICAgIHRoaXMuY2hhbmdlUmF0ZSh0aGlzLl9yYXRlKTtcbiAgICB9XG4gICAgYWRkQ2hpbGRQYXJ0cyhvYmopIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIW9iailcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgKF9hID0gb2JqLnBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlbW92ZUNoaWxkKG9iaik7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQob2JqKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Gu5L2N572u44KS5aSJ5pu044GZ44KLXG4gICAgICogQHBhcmFtXHRyYXRlXHTjgrnjg6njgqTjg4Djg7zjga7kvY3nva4gTUlOIDAuMCB+IE1BWCAxMDAuMFxuICAgICAqL1xuICAgIGNoYW5nZVJhdGUocmF0ZSkge1xuICAgICAgICAvL+ODieODqeODg+OCsOS4reOBr+WklumDqOOBi+OCieOBruaTjeS9nOOCkueEoeimluOBmeOCi+OAglxuICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9yYXRlID0gcmF0ZTtcbiAgICAgICAgY29uc3QgcG9zID0gdGhpcy5jb252ZXJ0UmF0ZVRvUGl4ZWwodGhpcy5fcmF0ZSk7XG4gICAgICAgIHRoaXMudXBkYXRlUGFydHMocG9zKTtcbiAgICAgICAgdGhpcy5fc2xpZGVyRXZlbnRFbWl0dGVyLmVtaXQoXCJzbGlkZXJfY2hhbmdlXCIsIG5ldyBTbGlkZXJFdmVudENvbnRleHQodGhpcy5yYXRlKSk7XG4gICAgfVxuICAgIG9uUHJlc3NlZFNsaWRlckJ1dHRvbihlKSB7XG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGUuY3VycmVudFRhcmdldDtcbiAgICAgICAgY29uc3QgbG9jYWxQb3MgPSB0aGlzLnRvTG9jYWwoZS5nbG9iYWwpO1xuICAgICAgICB0aGlzLmRyYWdTdGFydFBvcyA9IG5ldyBQb2ludChsb2NhbFBvcy54IC0gdGFyZ2V0LngsIGxvY2FsUG9zLnkgLSB0YXJnZXQueSk7XG4gICAgICAgIHRoaXMuX2J1dHRvblJvb3RDb250YWluZXIgPSBTbGlkZXJWaWV3LmdldFJvb3RDb250YWluZXIodGhpcy5fY2FudmFzLCB0aGlzLl9zbGlkZUJ1dHRvbik7XG4gICAgICAgIHRoaXMuX2J1dHRvblJvb3RDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIHRoaXMubW92ZVNsaWRlcik7XG4gICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uLm9uKFwicG9pbnRlcnVwXCIsIHRoaXMubW92ZVNsaWRlckZpbmlzaCk7XG4gICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uLm9uKFwicG9pbnRlcnVwb3V0c2lkZVwiLCB0aGlzLm1vdmVTbGlkZXJGaW5pc2gpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Um9vdENvbnRhaW5lcihjYW52YXMsIGJ1dHRvbikge1xuICAgICAgICBpZiAoY2FudmFzKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJlbnQgPSBidXR0b24ucGFyZW50O1xuICAgICAgICB3aGlsZSAocGFyZW50LnBhcmVudCkge1xuICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgIH1cbiAgICBvbk1vdmVTbGlkZXIoZSkge1xuICAgICAgICBjb25zdCBtb3VzZVBvcyA9IHRoaXMubGltaXRTbGlkZXJCdXR0b25Qb3NpdGlvbihlKTtcbiAgICAgICAgdGhpcy51cGRhdGVQYXJ0cyhtb3VzZVBvcyk7XG4gICAgICAgIHRoaXMuX3JhdGUgPSB0aGlzLmNvbnZlcnRQaXhlbFRvUmF0ZShtb3VzZVBvcyk7XG4gICAgICAgIHRoaXMuX3NsaWRlckV2ZW50RW1pdHRlci5lbWl0KFwic2xpZGVyX2NoYW5nZVwiLCBuZXcgU2xpZGVyRXZlbnRDb250ZXh0KHRoaXMucmF0ZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjg5zjgr/jg7Pjga7kvY3nva7jgpLliLbpmZDjgZnjgovplqLmlbBcbiAgICAgKiBAcmV0dXJuIOWItumZkOOBp+WIh+OCiuiQveOBqOOBleOCjOOBn+OCueODqeOCpOODgOODvOODnOOCv+ODs+OBruW6p+aomeWApCDluqfmqJnjga7ljp/ngrnjga9TbGlkZXJWaWV344Gn44GC44KK44CB44Oc44K/44Oz44KE44OQ44O844Gn44Gv44Gq44GE44CCXG4gICAgICovXG4gICAgbGltaXRTbGlkZXJCdXR0b25Qb3NpdGlvbihldnQpIHtcbiAgICAgICAgY29uc3QgbW91c2VQb3MgPSB0aGlzLmdldE1vdXNlUG9zaXRpb24odGhpcywgZXZ0KTtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmNsYW1wKG1vdXNlUG9zLCB0aGlzLl9tYXhQb3NpdGlvbiwgdGhpcy5fbWluUG9zaXRpb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDlkIRNQ+OBruS9jee9ruOAgeOCteOCpOOCuuOCkuODnuOCpuOCueODneOCpOODs+OCv+OBruS9jee9ruOBq+WQiOOCj+OBm+OBpuabtOaWsOOBmeOCi1xuICAgICAqIG1vdmVTbGlkZXLjga7lhoXpg6jlh6bnkIZcbiAgICAgKiBAcGFyYW1cdG1vdXNlUG9zIFNsaWRlclZpZXfjgpLljp/ngrnjgajjgZfjgZ/jg63jg7zjgqvjg6vjga7jg57jgqbjgrnluqfmqJnjgIFsaW1pdFNsaWRlckJ1dHRvblBvc2l0aW9u6Zai5pWw44Gn5Y+v5YuV56+E5Zuy44Gr5Yi26ZmQ5riI44G/44CCXG4gICAgICovXG4gICAgdXBkYXRlUGFydHMobW91c2VQb3MpIHtcbiAgICAgICAgY29uc3Qgc3RyZXRjaCA9ICh0YXJnZXQpID0+IHtcbiAgICAgICAgICAgIFNsaWRlclZpZXdVdGlsLnNldFNpemUodGFyZ2V0LCB0aGlzLl9pc0hvcml6b250YWwsIG1vdXNlUG9zIC0gU2xpZGVyVmlld1V0aWwuZ2V0UG9zaXRpb24odGFyZ2V0LCB0aGlzLl9pc0hvcml6b250YWwpKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy/jg5Djg7zjg57jgrnjgq/jgYzjgarjgZHjgozjgbDjgIHjg5Djg7zoh6rkvZPjgpLkvLjnuK7jgZnjgotcbiAgICAgICAgaWYgKHRoaXMuX2JhciAmJiAhdGhpcy5fYmFyTWFzaykge1xuICAgICAgICAgICAgc3RyZXRjaCh0aGlzLl9iYXIpO1xuICAgICAgICB9XG4gICAgICAgIC8v44OQ44O844Oe44K544Kv44GM44GC44KM44Gw44CB44Oe44K544Kv44KS5Ly457iu44GZ44KL44CCXG4gICAgICAgIGlmICh0aGlzLl9iYXJNYXNrKSB7XG4gICAgICAgICAgICBzdHJldGNoKHRoaXMuX2Jhck1hc2spO1xuICAgICAgICB9XG4gICAgICAgIC8v44Oc44K/44Oz44Gu5L2N572u44KS5pu05paw44GZ44KL44CCXG4gICAgICAgIFNsaWRlclZpZXdVdGlsLnNldFBvc2l0aW9uKHRoaXMuX3NsaWRlQnV0dG9uLCB0aGlzLl9pc0hvcml6b250YWwsIG1vdXNlUG9zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Gu5Zyw44KS44Kv44Oq44OD44Kv44GX44Gf6Zqb44Gu5Yem55CGXG4gICAgICog44Gd44Gu5L2N572u44G+44Gn44K544Op44Kk44OA44O844KS44K444Oj44Oz44OX44GZ44KLXG4gICAgICogQHBhcmFtIGV2dFxuICAgICAqL1xuICAgIG9uUHJlc3NCYXNlKGV2dCkge1xuICAgICAgICB0aGlzLmRyYWdTdGFydFBvcyA9IG5ldyBQb2ludCgpO1xuICAgICAgICB0aGlzLm1vdmVTbGlkZXIoZXZ0KTtcbiAgICAgICAgdGhpcy5fc2xpZGVyRXZlbnRFbWl0dGVyLmVtaXQoXCJzbGlkZXJfY2hhbmdlX2ZpbmlzaGVkXCIsIG5ldyBTbGlkZXJFdmVudENvbnRleHQodGhpcy5yYXRlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOOBruWJsuWQiOOBi+OCieOAgeOCueODqeOCpOODgOODvOOBruS9jee9ruOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbVx0cmF0ZVxuICAgICAqIEByZXR1cm5cbiAgICAgKi9cbiAgICBjb252ZXJ0UmF0ZVRvUGl4ZWwocmF0ZSkge1xuICAgICAgICByZXR1cm4gU2xpZGVyVmlld1V0aWwuY29udmVydFJhdGVUb1BpeGVsKHJhdGUsIHRoaXMuX21heFBvc2l0aW9uLCB0aGlzLl9taW5Qb3NpdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOOBruW6p+aomeOBi+OCieOAgeOCueODqeOCpOODgOODvOOBruWJsuWQiOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbVx0cGl4ZWxcbiAgICAgKiBAcmV0dXJuXG4gICAgICovXG4gICAgY29udmVydFBpeGVsVG9SYXRlKHBpeGVsKSB7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jb252ZXJ0UGl4ZWxUb1JhdGUocGl4ZWwsIHRoaXMuX21heFBvc2l0aW9uLCB0aGlzLl9taW5Qb3NpdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODieODqeODg+OCsOS4reOBruODnuOCpuOCueW6p+aomeOCkuWPluW+l+OBmeOCi+OAglxuICAgICAqIGxpbWl0U2xpZGVyQnV0dG9uUG9zaXRpb27lhoXjga7lh6bnkIbjgIJcbiAgICAgKi9cbiAgICBnZXRNb3VzZVBvc2l0aW9uKGRpc3BsYXlPYmosIGV2dCkge1xuICAgICAgICBsZXQgbG9jYWxQb3M7XG4gICAgICAgIGlmIChldnQgaW5zdGFuY2VvZiBGZWRlcmF0ZWRQb2ludGVyRXZlbnQpIHtcbiAgICAgICAgICAgIGxvY2FsUG9zID0gZGlzcGxheU9iai50b0xvY2FsKGV2dC5nbG9iYWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9jYWxQb3MgPSBkaXNwbGF5T2JqLnRvTG9jYWwobmV3IFBvaW50KGV2dC5vZmZzZXRYLCBldnQub2Zmc2V0WSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFBvcy54IC0gdGhpcy5kcmFnU3RhcnRQb3MueDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFBvcy55IC0gdGhpcy5kcmFnU3RhcnRQb3MueTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQgYmFzZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9iYXNlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX2Jhc2UuaW50ZXJhY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9iYXNlLm9uKFwicG9pbnRlcnRhcFwiLCAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0YXBcIiwgZSk7XG4gICAgICAgICAgICB0aGlzLm9uUHJlc3NCYXNlKGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZFBhcnRzKHZhbHVlKTtcbiAgICB9XG4gICAgaW5pdEJhckFuZE1hc2sodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhbHVlLmludGVyYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHZhbHVlLmludGVyYWN0aXZlQ2hpbGRyZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZFBhcnRzKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzZXQgc2xpZGVCdXR0b24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24ub24oXCJwb2ludGVyZG93blwiLCB0aGlzLnN0YXJ0TW92ZSk7XG4gICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uLmludGVyYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24uaW50ZXJhY3RpdmVDaGlsZHJlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFkZENoaWxkUGFydHModmFsdWUpO1xuICAgIH1cbiAgICBnZXQgcmF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JhdGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOWFqOOBpuOBrkRpc3BsYXlPYmplY3TjgahFdmVudExpc3RlbmVy44KS6Kej6Zmk44GZ44KL44CCXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIG9uRGlzcG9zZUZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5fYmFzZS5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24ucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMucmVtb3ZlQ2hpbGRyZW4oKTtcbiAgICB9XG59XG5TbGlkZXJWaWV3Lk1BWF9SQVRFID0gMS4wO1xuZXhwb3J0IGNsYXNzIFNsaWRlclZpZXdVdGlsIHtcbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjga7luqfmqJnjgYvjgonjgIHjgrnjg6njgqTjg4Djg7zjga7libLlkIjjgpLlj5blvpfjgZnjgotcbiAgICAgKi9cbiAgICBzdGF0aWMgY29udmVydFBpeGVsVG9SYXRlKHBpeGVsLCBtYXgsIG1pbikge1xuICAgICAgICBpZiAobWF4IDw9IG1pbikge1xuICAgICAgICAgICAgcmV0dXJuIDAuMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByYXRlID0gKChwaXhlbCAtIG1pbikgLyAobWF4IC0gbWluKSkgKiBTbGlkZXJWaWV3Lk1BWF9SQVRFO1xuICAgICAgICByZXR1cm4gU2xpZGVyVmlld1V0aWwuY2xhbXAocmF0ZSwgU2xpZGVyVmlldy5NQVhfUkFURSwgMC4wKTtcbiAgICB9XG4gICAgc3RhdGljIGNvbnZlcnRSYXRlVG9QaXhlbChyYXRlLCBtYXgsIG1pbikge1xuICAgICAgICBjb25zdCBwaXggPSAoKG1heCAtIG1pbikgKiByYXRlKSAvIFNsaWRlclZpZXcuTUFYX1JBVEUgKyBtaW47XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jbGFtcChwaXgsIG1heCwgbWluKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44OH44Kj44K544OX44Os44Kk44Kq44OW44K444Kn44Kv44OI44GL44KJ44K544Kv44Ot44O844Or5pa55ZCR44Gu5bqn5qiZ5YCk44KS5Y+W44KK5Ye644GZXG4gICAgICogQHJldHVybiBkaXNwbGF5T2Jq44Gu5bqn5qiZ5YCk44CC5Y2Y5L2N44OU44Kv44K744OrXG4gICAgICovXG4gICAgc3RhdGljIGdldFBvc2l0aW9uKGRpc3BsYXlPYmosIGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlzcGxheU9iai54O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaXNwbGF5T2JqLnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODh+OCo+OCueODl+ODrOOCpOOCquODluOCuOOCp+OCr+ODiOOBq+OCueOCr+ODreODvOODq+aWueWQkeOBruW6p+aomeWApOOCkuioreWumuOBmeOCi1xuICAgICAqL1xuICAgIHN0YXRpYyBzZXRQb3NpdGlvbihkaXNwbGF5T2JqLCBpc0hvcml6b250YWwsIHBvc2l0aW9uKSB7XG4gICAgICAgIGlmICghZGlzcGxheU9iailcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgZGlzcGxheU9iai54ID0gcG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkaXNwbGF5T2JqLnkgPSBwb3NpdGlvbjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjgq/jg63jg7zjg6vmlrnlkJHjga7pq5jjgZXjgIHjgoLjgZfjgY/jga/luYXjgpLlj5blvpfjgZnjgovjgILljZjkvY3jg5Tjgq/jgrvjg6tcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0U2l6ZShkaXNwbGF5T2JqLCBpc0hvcml6b250YWwpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IFNsaWRlclZpZXdVdGlsLmdldENvbnRlbnRzQm91bmRzKGRpc3BsYXlPYmopO1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICByZXR1cm4gc2l6ZS53aWR0aCAqIGRpc3BsYXlPYmouc2NhbGUueDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzaXplLmhlaWdodCAqIGRpc3BsYXlPYmouc2NhbGUueTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjgq/jg63jg7zjg6vmlrnlkJHjga7pq5jjgZXjgIHjgoLjgZfjgY/jga/luYXjgpLoqK3lrprjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gZGlzcGxheU9ialxuICAgICAqIEBwYXJhbSBpc0hvcml6b250YWxcbiAgICAgKiBAcGFyYW0gYW1vdW50IHdpZHRoIG9yIGhlaWdodCwgcmFuZ2UgOiAwIH4gZGlzcGxheU9iai5zaXplLndpZHRoIG9yIGhlaWdodCwgdW5pdCA6IHB4XG4gICAgICovXG4gICAgc3RhdGljIHNldFNpemUoZGlzcGxheU9iaiwgaXNIb3Jpem9udGFsLCBhbW91bnQpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IFNsaWRlclZpZXdVdGlsLmdldENvbnRlbnRzQm91bmRzKGRpc3BsYXlPYmopO1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICBkaXNwbGF5T2JqLnNjYWxlLnggPSBhbW91bnQgLyBzaXplLndpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGlzcGxheU9iai5zY2FsZS55ID0gYW1vdW50IC8gc2l6ZS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGNsYW1wKG51bSwgbWF4LCBtaW4pIHtcbiAgICAgICAgbnVtID0gTWF0aC5tYXgobnVtLCBtaW4pO1xuICAgICAgICBudW0gPSBNYXRoLm1pbihudW0sIG1heCk7XG4gICAgICAgIHJldHVybiBudW07XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDb250ZW50c0JvdW5kcyhkaXNwbGF5T2JqKSB7XG4gICAgICAgIGlmIChkaXNwbGF5T2JqLmhpdEFyZWEpXG4gICAgICAgICAgICByZXR1cm4gZGlzcGxheU9iai5oaXRBcmVhO1xuICAgICAgICByZXR1cm4gZGlzcGxheU9iai5nZXRMb2NhbEJvdW5kcygpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNsaWRlclZpZXdVdGlsIH0gZnJvbSBcIi4uL1NsaWRlclZpZXdcIjtcbmV4cG9ydCBjbGFzcyBTY3JvbGxCYXJWaWV3VXRpbCB7XG4gICAgLyoqXG4gICAgICog44K/44O844Ky44OD44OI44Kz44Oz44OG44Oz44OE44GM44CB44Oe44K544Kv6aCY5Z+f5YaF44Gr5Y+O44G+44KL5bqn5qiZ5YCk44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICogQHBhcmFtIHRhcmdldFxuICAgICAqIEBwYXJhbSBtYXNrXG4gICAgICogQHBhcmFtIGlzSG9yaXpvbnRhbFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRDbGFtcGVkVGFyZ2V0UG9zaXRpb24odGFyZ2V0LCBtYXNrLCBpc0hvcml6b250YWwpIHtcbiAgICAgICAgY29uc3QgZ2V0U2l6ZSA9IFNsaWRlclZpZXdVdGlsLmdldFNpemU7XG4gICAgICAgIGNvbnN0IHRhcmdldFNpemUgPSBnZXRTaXplKHRhcmdldCwgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgbWFza1NpemUgPSBnZXRTaXplKG1hc2ssIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IG1pblBvcyA9IE1hdGgubWluKC10YXJnZXRTaXplICsgbWFza1NpemUsIDAuMCk7XG4gICAgICAgIGNvbnN0IHBvcyA9IFNsaWRlclZpZXdVdGlsLmdldFBvc2l0aW9uKHRhcmdldCwgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmNsYW1wKHBvcywgMCwgbWluUG9zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K/44O844Ky44OD44OI44Kz44Oz44OG44Oz44OE44Gu5L2N572u44KS44CB44Oe44K544Kv6aCY5Z+f5YaF44Gr5Li444KB6L6844KA44CCXG4gICAgICogQHBhcmFtIHRhcmdldFxuICAgICAqIEBwYXJhbSBtYXNrXG4gICAgICogQHBhcmFtIHBvc2l0aW9uXG4gICAgICogQHBhcmFtIGlzSG9yaXpvbnRhbFxuICAgICAqL1xuICAgIHN0YXRpYyBjbGFtcFRhcmdldFBvc2l0aW9uKHRhcmdldCwgbWFzaywgcG9zaXRpb24sIGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBTbGlkZXJWaWV3VXRpbC5zZXRQb3NpdGlvbih0YXJnZXQsIGlzSG9yaXpvbnRhbCwgcG9zaXRpb24pO1xuICAgICAgICBjb25zdCBjbGFtcGVkUG9zID0gdGhpcy5nZXRDbGFtcGVkVGFyZ2V0UG9zaXRpb24odGFyZ2V0LCBtYXNrLCBpc0hvcml6b250YWwpO1xuICAgICAgICBTbGlkZXJWaWV3VXRpbC5zZXRQb3NpdGlvbih0YXJnZXQsIGlzSG9yaXpvbnRhbCwgY2xhbXBlZFBvcyk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRSYXRpb09mT3JpZ2luKGRpc3BsYXlPYmosIGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBjb25zdCBib3VuZHMgPSBTbGlkZXJWaWV3VXRpbC5nZXRDb250ZW50c0JvdW5kcyhkaXNwbGF5T2JqKTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGlzSG9yaXpvbnRhbCA/IGJvdW5kcy53aWR0aCA6IGJvdW5kcy5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gaXNIb3Jpem9udGFsID8gYm91bmRzLnggOiBib3VuZHMueTtcbiAgICAgICAgY29uc3QgcmF0aW8gPSBwb3NpdGlvbiAvIHNpemU7XG4gICAgICAgIGlmIChyYXRpbyA+IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHtkaXNwbGF5T2JqLm5hbWV9IDog44Oc44K/44Oz44K144Kk44K644GM5LiN6YGp5YiH44Gn44GZ44CC44Oc44K/44Oz44Gu55+p5b2i5YaF44Gr5Y6f54K544GM5Y+O44G+44Gj44Gm44GE44G+44Gb44KT44CC44K544Kv44Ot44O844Or44OQ44O844Oc44K/44Oz44Gv5Y6f54K544KS5Zuy44KA55+p5b2i44Go44GX44Gm44GP44Gg44GV44GE44CCYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhdGlvO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEVhc2luZywgVHdlZW4gfSBmcm9tIFwiQHR3ZWVuanMvdHdlZW4uanNcIjtcbmltcG9ydCB7IFRpY2tlciwgdXRpbHMsIH0gZnJvbSBcInBpeGkuanNcIjtcbmltcG9ydCB7IFNsaWRlclZpZXdVdGlsIH0gZnJvbSBcIi4uL1NsaWRlclZpZXdcIjtcbmltcG9ydCB7IFNjcm9sbEJhclZpZXdVdGlsIH0gZnJvbSBcIi4vU2Nyb2xsQmFyVmlld1V0aWxcIjtcbi8qKlxuICog44K544Kv44Ot44O844Or44OQ44O844Ko44Oq44Ki44Gu5oWj5oCn44K544Kv44Ot44O844Or44KS5Yem55CG44GZ44KL44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBJbmVydGlhbFNjcm9sbE1hbmFnZXIgZXh0ZW5kcyB1dGlscy5FdmVudEVtaXR0ZXIge1xuICAgIGdldCBzcGVlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NwZWVkO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzY3JvbGxCYXJWaWV3KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZGVjZWxlcmF0aW9uUmF0ZSA9IDAuOTc1O1xuICAgICAgICB0aGlzLm92ZXJmbG93U2Nyb2xsUmFuZ2UgPSAxODA7XG4gICAgICAgIHRoaXMuX3NwZWVkID0gMC4wO1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbk1vdXNlRG93biA9IChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURyYWdQb3MoZSk7XG4gICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fc3BlZWQgPSAwLjA7XG4gICAgICAgICAgICBpZiAodGhpcy50d2VlbilcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2VUd2VlbigpO1xuICAgICAgICAgICAgdGhpcy5hZGREcmFnTGlzdGVuZXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbk1vdXNlTW92ZSA9IChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IHRoaXMuZ2V0RHJhZ1BvcyhlKSAtIHRoaXMuZHJhZ1BvcztcbiAgICAgICAgICAgIHRoaXMuX3NwZWVkID0gZGVsdGE7XG4gICAgICAgICAgICB0aGlzLmFkZFRhcmdldFBvc2l0aW9uKGRlbHRhICogdGhpcy5nZXRPdmVyZmxvd0RlY2VsZXJhdGlvbigpKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRHJhZ1BvcyhlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbk1vdXNlVXAgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVEcmFnTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5vblRpY2soKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vblRpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zcGVlZCA9PT0gMC4wICYmIHRoaXMuZ2V0TGVhdmVSYW5nZUZyb21NYXNrKCkgPT09IDAuMClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAoKF9hID0gdGhpcy50d2VlbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlzUGxheWluZygpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8v5L2N572u44Gr44KI44KL5rib6YCf546H5aKX5Yqg44CC44Oe44K544Kv44Ko44Oq44Ki44GL44KJ6Zui44KM44Gm44GE44KL44Gq44KJ5rib6YCf546H44GM5aSn44GN44GP44Gq44KL44CCXG4gICAgICAgICAgICBjb25zdCBvdmVyZmxvd0RlY2VsZXJhdGlvbiA9IHRoaXMuZ2V0T3ZlcmZsb3dEZWNlbGVyYXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMuX3NwZWVkICo9IHRoaXMuZGVjZWxlcmF0aW9uUmF0ZSAqIG92ZXJmbG93RGVjZWxlcmF0aW9uO1xuICAgICAgICAgICAgdGhpcy5hZGRUYXJnZXRQb3NpdGlvbih0aGlzLl9zcGVlZCk7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnModGhpcy5fc3BlZWQpID4gMC4xKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vYmFjayBlYXNlXG4gICAgICAgICAgICB0aGlzLl9zcGVlZCA9IDAuMDtcbiAgICAgICAgICAgIGNvbnN0IHRvT2JqID0geyB5OiB0aGlzLmdldENsYW1wZWRQb3MoKSB9O1xuICAgICAgICAgICAgdGhpcy5kaXNwb3NlVHdlZW4oKTtcbiAgICAgICAgICAgIHRoaXMudHdlZW4gPSBuZXcgVHdlZW4odGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldClcbiAgICAgICAgICAgICAgICAudG8odG9PYmosIDY2NilcbiAgICAgICAgICAgICAgICAub25VcGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInVwZGF0ZV90YXJnZXRfcG9zaXRpb25cIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5lYXNpbmcoRWFzaW5nLkN1YmljLk91dClcbiAgICAgICAgICAgICAgICAuc3RhcnQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdG9wSW5lcnRpYWwgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zcGVlZCA9IDAuMDtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZVR3ZWVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGlzcG9zZVR3ZWVuID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMudHdlZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnR3ZWVuLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnR3ZWVuID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zY3JvbGxCYXJWaWV3ID0gc2Nyb2xsQmFyVmlldztcbiAgICAgICAgc2Nyb2xsQmFyVmlldy5zY3JvbGxCYXJFdmVudEVtaXR0ZXIub24oXCJzdG9wX2luZXJ0aWFsX3R3ZWVuXCIsIHRoaXMuc3RvcEluZXJ0aWFsKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgdGFyZ2V0LmludGVyYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzU3RhcnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX2lzU3RhcnQgPSB0cnVlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnNjcm9sbEJhclZpZXcuY29udGVudHMudGFyZ2V0O1xuICAgICAgICB0YXJnZXQub24oXCJwb2ludGVyZG93blwiLCB0aGlzLm9uTW91c2VEb3duKTtcbiAgICAgICAgVGlja2VyLnNoYXJlZC5hZGQodGhpcy5vblRpY2spO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzU3RhcnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX2lzU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgdGFyZ2V0Lm9mZihcInBvaW50ZXJkb3duXCIsIHRoaXMub25Nb3VzZURvd24pO1xuICAgICAgICB0aGlzLnJlbW92ZURyYWdMaXN0ZW5lcigpO1xuICAgICAgICB0aGlzLnN0b3BJbmVydGlhbCgpO1xuICAgICAgICBUaWNrZXIuc2hhcmVkLnJlbW92ZSh0aGlzLm9uVGljayk7XG4gICAgfVxuICAgIGFkZERyYWdMaXN0ZW5lcigpIHtcbiAgICAgICAgdGhpcy5zd2l0Y2hEcmFnTGlzdGVuZXIodHJ1ZSk7XG4gICAgfVxuICAgIHJlbW92ZURyYWdMaXN0ZW5lcigpIHtcbiAgICAgICAgdGhpcy5zd2l0Y2hEcmFnTGlzdGVuZXIoZmFsc2UpO1xuICAgIH1cbiAgICBzd2l0Y2hEcmFnTGlzdGVuZXIoaXNPbikge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnNjcm9sbEJhclZpZXcuY29udGVudHMudGFyZ2V0O1xuICAgICAgICBjb25zdCBzd2l0Y2hMaXN0ZW5lciA9IChpc09uLCBldmVudCwgbGlzdGVuZXIpID0+IHtcbiAgICAgICAgICAgIGlmIChpc09uKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Lm9uKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQub2ZmKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHN3aXRjaExpc3RlbmVyKGlzT24sIFwicG9pbnRlcm1vdmVcIiwgdGhpcy5vbk1vdXNlTW92ZSk7XG4gICAgICAgIHN3aXRjaExpc3RlbmVyKGlzT24sIFwicG9pbnRlcnVwXCIsIHRoaXMub25Nb3VzZVVwKTtcbiAgICAgICAgc3dpdGNoTGlzdGVuZXIoaXNPbiwgXCJwb2ludGVydXBvdXRzaWRlXCIsIHRoaXMub25Nb3VzZVVwKTtcbiAgICB9XG4gICAgZ2V0RHJhZ1BvcyhlKSB7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5nZXRQb3NpdGlvbihlLmdsb2JhbCwgdGhpcy5zY3JvbGxCYXJWaWV3LmlzSG9yaXpvbnRhbCk7XG4gICAgfVxuICAgIHVwZGF0ZURyYWdQb3MoZSkge1xuICAgICAgICB0aGlzLmRyYWdQb3MgPSB0aGlzLmdldERyYWdQb3MoZSk7XG4gICAgfVxuICAgIGFkZFRhcmdldFBvc2l0aW9uKGRlbHRhKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQ7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5pc0hvcml6b250YWw7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQb3MgPSBTbGlkZXJWaWV3VXRpbC5nZXRQb3NpdGlvbih0YXJnZXQsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIFNsaWRlclZpZXdVdGlsLnNldFBvc2l0aW9uKHRhcmdldCwgaXNIb3Jpem9udGFsLCBjdXJyZW50UG9zICsgZGVsdGEpO1xuICAgICAgICB0aGlzLmVtaXQoXCJ1cGRhdGVfdGFyZ2V0X3Bvc2l0aW9uXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjgq/jg63jg7zjg6vjga7jgqrjg7zjg5Djg7zjg5Xjg63jg7zph4/jgYvjgonjgIHmuJvpgIDnjofjgpLlibLjgorlh7rjgZnjgIJcbiAgICAgKiBvdmVyZmxvd1Njcm9sbFJhbmdl5Lul5LiK44Gr6Zui44KM44Gm44GE44KL5aC05ZCI44GvMC4wXG4gICAgICog44K544Kv44Ot44O844Or44Ko44Oq44Ki5YaF44Gr44Kz44Oz44OG44Oz44OE44GM44GC44KL5aC05ZCI44GvMS4w44KS6L+U44GZ44CCXG4gICAgICovXG4gICAgZ2V0T3ZlcmZsb3dEZWNlbGVyYXRpb24oKSB7XG4gICAgICAgIGNvbnN0IGRpZlBvcyA9IHRoaXMuZ2V0TGVhdmVSYW5nZUZyb21NYXNrKCk7XG4gICAgICAgIGxldCBvdmVyZmxvd0RlY2VsZXJhdGlvbiA9ICh0aGlzLm92ZXJmbG93U2Nyb2xsUmFuZ2UgLSBkaWZQb3MpIC8gdGhpcy5vdmVyZmxvd1Njcm9sbFJhbmdlO1xuICAgICAgICBpZiAob3ZlcmZsb3dEZWNlbGVyYXRpb24gPCAwLjApXG4gICAgICAgICAgICBvdmVyZmxvd0RlY2VsZXJhdGlvbiA9IDAuMDtcbiAgICAgICAgcmV0dXJuIG92ZXJmbG93RGVjZWxlcmF0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgr/jg7zjgrLjg4Pjg4jjgrPjg7Pjg4bjg7Pjg4TjgYzjg57jgrnjgq/poJjln5/jgYvjgonjganjgozjgaDjgZHpm6LjgozjgabjgYTjgovjgYvjgIJcbiAgICAgKi9cbiAgICBnZXRMZWF2ZVJhbmdlRnJvbU1hc2soKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQ7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5pc0hvcml6b250YWw7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQb3MgPSBTbGlkZXJWaWV3VXRpbC5nZXRQb3NpdGlvbih0YXJnZXQsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IGNsYW1wZWRQb3MgPSB0aGlzLmdldENsYW1wZWRQb3MoKTtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGN1cnJlbnRQb3MgLSBjbGFtcGVkUG9zKTtcbiAgICB9XG4gICAgZ2V0Q2xhbXBlZFBvcygpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5zY3JvbGxCYXJWaWV3LmlzSG9yaXpvbnRhbDtcbiAgICAgICAgcmV0dXJuIFNjcm9sbEJhclZpZXdVdGlsLmdldENsYW1wZWRUYXJnZXRQb3NpdGlvbih0YXJnZXQsIHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy5tYXNrLCBpc0hvcml6b250YWwpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHV0aWxzIH0gZnJvbSBcInBpeGkuanNcIjtcbmltcG9ydCB7IFNsaWRlclZpZXdVdGlsIH0gZnJvbSBcIi4uL1NsaWRlclZpZXdcIjtcbmltcG9ydCB7IFNjcm9sbEJhclZpZXdVdGlsIH0gZnJvbSBcIi4vU2Nyb2xsQmFyVmlld1V0aWxcIjtcbi8qKlxuICogU2Nyb2xsQmFyVmlld+OCkuWPl+OBkeWPluOCiuOAgeODnuOCpuOCueODm+OCpOODvOODq+OBq+OCiOOCi+aTjeS9nOOCkuihjOOBhuOCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgTW91c2VXaGVlbFNjcm9sbE1hbmFnZXIgZXh0ZW5kcyB1dGlscy5FdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHNjcm9sbEJhclZpZXcpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5kZWx0YSA9IDE2O1xuICAgICAgICAvL1RPRE8gYWRkIHN1cHBvcnQgZGVsdGFYIC8gZGVsdGFZXG4gICAgICAgIHRoaXMud2hlZWxIYW5kbGVyID0gKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNoaWZ0ID0gZS5kZWx0YVkgPiAwID8gLXRoaXMuZGVsdGEgOiB0aGlzLmRlbHRhO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGwoc2hpZnQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNjcm9sbEJhclZpZXcgPSBzY3JvbGxCYXJWaWV3O1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnNjcm9sbEJhclZpZXcuY29udGVudHMudGFyZ2V0O1xuICAgICAgICB0YXJnZXQuaW50ZXJhY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICBpZiAodGhpcy5faXNTdGFydClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgdGFyZ2V0Lm9uKFwid2hlZWxcIiwgdGhpcy53aGVlbEhhbmRsZXIpO1xuICAgICAgICB0aGlzLl9pc1N0YXJ0ID0gdHJ1ZTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgdGFyZ2V0Lm9mZihcIndoZWVsXCIsIHRoaXMud2hlZWxIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5faXNTdGFydCA9IGZhbHNlO1xuICAgIH1cbiAgICBzY3JvbGwoZGVsdGEpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgY29uc3QgbWFzayA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy5tYXNrO1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLnNjcm9sbEJhclZpZXcuaXNIb3Jpem9udGFsO1xuICAgICAgICBjb25zdCBwb3MgPSBTbGlkZXJWaWV3VXRpbC5nZXRQb3NpdGlvbih0YXJnZXQsIGlzSG9yaXpvbnRhbCkgKyBkZWx0YTtcbiAgICAgICAgU2Nyb2xsQmFyVmlld1V0aWwuY2xhbXBUYXJnZXRQb3NpdGlvbih0YXJnZXQsIG1hc2ssIHBvcywgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgdGhpcy5lbWl0KFwidXBkYXRlX3RhcmdldF9wb3NpdGlvblwiKTtcbiAgICAgICAgdGhpcy5zY3JvbGxCYXJWaWV3LnNjcm9sbEJhckV2ZW50RW1pdHRlci5lbWl0KFwic3RvcF9pbmVydGlhbF90d2VlblwiKTtcbiAgICB9XG59XG4iLCJleHBvcnQgdmFyIFNjcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlO1xuKGZ1bmN0aW9uIChTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZSkge1xuICAgIFNjcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlW1wiQ0hBTkdFRF9DT05URU5UU19TSVpFXCJdID0gXCJTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZV9DSEFOR0VEX0NPTlRFTlRTX1NJWkVcIjtcbn0pKFNjcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlIHx8IChTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZSA9IHt9KSk7XG4iLCJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiQHBpeGkvdXRpbHNcIjtcbmltcG9ydCB7IFNsaWRlclZpZXcsIFNsaWRlclZpZXdVdGlsIH0gZnJvbSBcIi4uL1NsaWRlclZpZXdcIjtcbmltcG9ydCB7IFNjcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlIH0gZnJvbSBcIi4vU2Nyb2xsQmFyQ29udGVudHNFdmVudFR5cGVcIjtcbi8qKlxuICog44K544Kv44Ot44O844Or44OQ44O844Gn5pON5L2c44GZ44KL44Kz44Oz44OG44Oz44OEXG4gKi9cbmV4cG9ydCBjbGFzcyBTY3JvbGxCYXJDb250ZW50cyBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgZ2V0IHRhcmdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldDtcbiAgICB9XG4gICAgc2V0IHRhcmdldCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl90YXJnZXQgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lbWl0KFNjcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlLkNIQU5HRURfQ09OVEVOVFNfU0laRSk7XG4gICAgfVxuICAgIGdldCBtYXNrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFzaztcbiAgICB9XG4gICAgc2V0IG1hc2sodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbWFzayA9IHZhbHVlO1xuICAgICAgICB0aGlzLmVtaXQoU2Nyb2xsQmFyQ29udGVudHNFdmVudFR5cGUuQ0hBTkdFRF9DT05URU5UU19TSVpFKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IOOCueOCr+ODreODvOODq+aTjeS9nOOCkuWPl+OBkeOCi+OCs+ODs+ODhuODs+ODhFxuICAgICAqIEBwYXJhbSBtYXNrIHRhcmdldOOCkuWIh+OCiuaKnOOBj+ODnuOCueOCr1xuICAgICAqIEBwYXJhbSBjb250YWluZXIgdGFyZ2V044GK44KI44GzbWFza+OCkuagvOe0jeOBmeOCi+imquOCs+ODs+ODhuODilxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgbWFzaywgY29udGFpbmVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMuX21hc2sgPSBtYXNrO1xuICAgICAgICBTY3JvbGxCYXJDb250ZW50cy5pbml0KHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgaW5pdChzY3JvbGxCYXJDb250ZW50cykge1xuICAgICAgICBpZiAoc2Nyb2xsQmFyQ29udGVudHMuX3RhcmdldC5tYXNrICE9PSBzY3JvbGxCYXJDb250ZW50cy5fbWFzaykge1xuICAgICAgICAgICAgc2Nyb2xsQmFyQ29udGVudHMuX3RhcmdldC5tYXNrID0gc2Nyb2xsQmFyQ29udGVudHMuX21hc2s7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWRkVG9Db250YWluZXIgPSAoZGlzcGxheU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKGRpc3BsYXlPYmplY3QucGFyZW50ID09PSBzY3JvbGxCYXJDb250ZW50cy5jb250YWluZXIpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgKF9hID0gZGlzcGxheU9iamVjdC5wYXJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdmVDaGlsZChkaXNwbGF5T2JqZWN0KTtcbiAgICAgICAgICAgIHNjcm9sbEJhckNvbnRlbnRzLmNvbnRhaW5lci5hZGRDaGlsZChkaXNwbGF5T2JqZWN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgYWRkVG9Db250YWluZXIoc2Nyb2xsQmFyQ29udGVudHMuX3RhcmdldCk7XG4gICAgICAgIGFkZFRvQ29udGFpbmVyKHNjcm9sbEJhckNvbnRlbnRzLl9tYXNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog54++54q244Gu44K544Kv44Ot44O844Or5L2N572u44KS5Y+W5b6X44GZ44KL44CC5Y2Y5L2NcmF0ZVxuICAgICAqIDAuMOOBp+OCs+ODs+ODhuODs+ODhOOBr1RPUCwgMS4w44GnQk9UVE9N44Gr5L2N572u44GX44Gm44GE44KL44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaXNIb3Jpem9udGFsXG4gICAgICovXG4gICAgZ2V0U2Nyb2xsUG9zaXRpb25Bc1JhdGUoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGNvbnN0IGdldFBvcyA9IFNsaWRlclZpZXdVdGlsLmdldFBvc2l0aW9uO1xuICAgICAgICBjb25zdCB6ZXJvUG9zID0gZ2V0UG9zKHRoaXMubWFzaywgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgY29udGVudHNQb3MgPSBnZXRQb3ModGhpcy50YXJnZXQsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRzUG9zaXRpb25EaWYgPSB6ZXJvUG9zIC0gY29udGVudHNQb3M7XG4gICAgICAgIGNvbnN0IG1vdmFibGVSYW5nZSA9IHRoaXMuZ2V0TW92YWJsZVJhbmdlKGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIHJldHVybiAoY29udGVudHNQb3NpdGlvbkRpZiAvIG1vdmFibGVSYW5nZSkgKiBTbGlkZXJWaWV3Lk1BWF9SQVRFO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjgq/jg63jg7zjg6vjga7mnIDlpKflj6/li5XpoJjln5/jgpLlj5blvpfjgZnjgovjgILljZjkvY1weFxuICAgICAqIOOCguOBl+WPr+WLleWfn+OBjOOCvOODrXB45Lul5LiL44Gu5aC05ZCI44CB5qW15bCP44Gu5q2j44Gu5YCk44KS6L+U44GZ44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaXNIb3Jpem9udGFsXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXRNb3ZhYmxlUmFuZ2UoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGNvbnN0IGdldFNpemUgPSBTbGlkZXJWaWV3VXRpbC5nZXRTaXplO1xuICAgICAgICBjb25zdCB0YXJnZXRTaXplID0gZ2V0U2l6ZSh0aGlzLl90YXJnZXQsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IG1hc2tTaXplID0gZ2V0U2l6ZSh0aGlzLl9tYXNrLCBpc0hvcml6b250YWwpO1xuICAgICAgICBjb25zdCBkaWYgPSB0YXJnZXRTaXplIC0gbWFza1NpemU7XG4gICAgICAgIGlmIChkaWYgPD0gMC4wKSB7XG4gICAgICAgICAgICByZXR1cm4gMWUtMTI4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWY7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCs+ODs+ODhuODs+ODhOOCkuOAgeaMh+WumuOBleOCjOOBn3JhdGXjga7kvY3nva7jgb7jgafjgrnjgq/jg63jg7zjg6vjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSByYXRlXG4gICAgICogQHBhcmFtIGlzSG9yaXpvbnRhbFxuICAgICAqL1xuICAgIHNjcm9sbChyYXRlLCBpc0hvcml6b250YWwpIHtcbiAgICAgICAgY29uc3QgZ2V0UG9zID0gU2xpZGVyVmlld1V0aWwuZ2V0UG9zaXRpb247XG4gICAgICAgIGNvbnN0IHplcm9Qb3MgPSBnZXRQb3ModGhpcy5fbWFzaywgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgbW92YWJsZVJhbmdlID0gdGhpcy5nZXRNb3ZhYmxlUmFuZ2UoaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgY29udGVudHNQb3MgPSB6ZXJvUG9zIC0gbW92YWJsZVJhbmdlICogKHJhdGUgLyBTbGlkZXJWaWV3Lk1BWF9SQVRFKTtcbiAgICAgICAgU2xpZGVyVmlld1V0aWwuc2V0UG9zaXRpb24odGhpcy5fdGFyZ2V0LCBpc0hvcml6b250YWwsIGNvbnRlbnRzUG9zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Kz44Oz44OG44Oz44OE44GM6KGo56S66aCY5Z+f44Gr44Gp44KM44Gg44GR6KGo56S644GV44KM44Gm44GE44KL44GL44Gu5q+U546H44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICog44GT44Gu5q+U546H44Gv44CB44K544Kv44Ot44O844Or44OQ44O844Oc44K/44Oz44Gu44K544Kx44O844Or44Go44Gq44KL44CCXG4gICAgICpcbiAgICAgKiDkvosgOiDjgrPjg7Pjg4bjg7Pjg4TjgrXjgqTjgrrjgYwyMDDjgIHooajnpLrpoJjln5/jgYwxMDDjgarjgokwLjVcbiAgICAgKiDjgrPjg7Pjg4bjg7Pjg4TjgYzjgZnjgbnjgabooajnpLrjgZXjgozjgabjgYTjgovjgarjgokxLjBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpc0hvcml6b250YWxcbiAgICAgKiBAcmV0dXJuIDAuMCB+IDEuMFxuICAgICAqL1xuICAgIGdldERpc3BsYXlSYXRlKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBjb25zdCBnZXRTaXplID0gU2xpZGVyVmlld1V0aWwuZ2V0U2l6ZTtcbiAgICAgICAgY29uc3QgY29udGVudHNTaXplID0gZ2V0U2l6ZSh0aGlzLnRhcmdldCwgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgbWFza1NpemUgPSBnZXRTaXplKHRoaXMubWFzaywgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmNsYW1wKG1hc2tTaXplIC8gY29udGVudHNTaXplLCBTbGlkZXJWaWV3Lk1BWF9SQVRFLCAwLjApO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG51bGw7XG4gICAgICAgIHRoaXMuX21hc2sgPSBudWxsO1xuICAgICAgICB0aGlzLl90YXJnZXQgPSBudWxsO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHV0aWxzIH0gZnJvbSBcInBpeGkuanNcIjtcbmV4cG9ydCBjbGFzcyBTY3JvbGxCYXJFdmVudEVtaXR0ZXIgZXh0ZW5kcyB1dGlscy5FdmVudEVtaXR0ZXIge1xufVxuIiwiaW1wb3J0IHsgU2xpZGVyVmlldywgU2xpZGVyVmlld1V0aWwgfSBmcm9tIFwiLi4vU2xpZGVyVmlld1wiO1xuaW1wb3J0IHsgSW5lcnRpYWxTY3JvbGxNYW5hZ2VyIH0gZnJvbSBcIi4vSW5lcnRpYWxTY3JvbGxNYW5hZ2VyXCI7XG5pbXBvcnQgeyBNb3VzZVdoZWVsU2Nyb2xsTWFuYWdlciB9IGZyb20gXCIuL01vdXNlV2hlZWxTY3JvbGxNYW5hZ2VyXCI7XG5pbXBvcnQgeyBTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZSB9IGZyb20gXCIuL1Njcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlXCI7XG5pbXBvcnQgeyBTY3JvbGxCYXJFdmVudEVtaXR0ZXIgfSBmcm9tIFwiLi9TY3JvbGxCYXJFdmVudFwiO1xuaW1wb3J0IHsgU2Nyb2xsQmFyVmlld1V0aWwgfSBmcm9tIFwiLi9TY3JvbGxCYXJWaWV3VXRpbFwiO1xuLyoqXG4gKiDjgrnjgq/jg63jg7zjg6vjg5Djg7zjgpLooajjgZnjgq/jg6njgrnjgafjgZnjgIJcbiAqXG4gKiDjgZPjga7jgq/jg6njgrnjga/jgIHjgrnjg6njgqTjg4Djg7zjgavku6XkuIvjga7mqZ/og73jgpLov73liqDjgZfjgZ/jgoLjga7jgafjgZnjgIJcbiAqXG4gKiBcdFx0MS7jgrPjg7Pjg4bjg7Pjg4TjgrXjgqTjgrrjgavlkIjjgo/jgZvjgZ/jgIHjgrnjgq/jg63jg7zjg6vjg5Djg7zjga7kvLjnuK5cbiAqIFx0XHQyLuOCueOCr+ODreODvOODq+ODkOODvOOBruS8uOe4ruOBq+OBguOCj+OBm+OBn+OAgeenu+WLleevhOWbsuOBruWItumZkFxuICogXHRcdDMu44K544Kv44Ot44O844Or44OQ44O844Gu5Ly457iu44Gr44GC44KP44Gb44Gf44CB56e75YuV5YCk44Gu5Y+W5b6XXG4gKi9cbmV4cG9ydCBjbGFzcyBTY3JvbGxCYXJWaWV3IGV4dGVuZHMgU2xpZGVyVmlldyB7XG4gICAgZ2V0IGNvbnRlbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudHM7XG4gICAgfVxuICAgIGdldCBhdXRvSGlkZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9IaWRlO1xuICAgIH1cbiAgICBzZXQgYXV0b0hpZGUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYXV0b0hpZGUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJWaXNpYmxlKCk7XG4gICAgfVxuICAgIGdldCBzY3JvbGxCYXJFdmVudEVtaXR0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxCYXJFdmVudEVtaXR0ZXI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbiwgc2Nyb2xsQ29udGVudHMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9uKTtcbiAgICAgICAgdGhpcy5fYXV0b0hpZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc2Nyb2xsQmFyRXZlbnRFbWl0dGVyID0gbmV3IFNjcm9sbEJhckV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICog44K544Op44Kk44OA44O844Kk44OZ44Oz44OI44Gr5b+c44GY44Gm44Kz44Oz44OG44Oz44OE44KS44K544Kv44Ot44O844Or44GZ44KLXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnRzUG9zaXRpb24gPSAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXZ0ID0gZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29udGVudHNQb3NpdGlvbldpdGhSYXRlKGV2dC5yYXRlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fY29udGVudHMgPSBzY3JvbGxDb250ZW50cztcbiAgICAgICAgdGhpcy5fY29udGVudHMub24oU2Nyb2xsQmFyQ29udGVudHNFdmVudFR5cGUuQ0hBTkdFRF9DT05URU5UU19TSVpFLCB0aGlzLnVwZGF0ZVNsaWRlcik7XG4gICAgICAgIHRoaXMuX3NsaWRlckV2ZW50RW1pdHRlci5vbihcInNsaWRlcl9jaGFuZ2VcIiwgdGhpcy51cGRhdGVDb250ZW50c1Bvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VSYXRlKG9wdGlvbi5yYXRlKTtcbiAgICAgICAgdGhpcy53aGVlbE1hbmFnZXIgPSBuZXcgTW91c2VXaGVlbFNjcm9sbE1hbmFnZXIodGhpcyk7XG4gICAgICAgIHRoaXMud2hlZWxNYW5hZ2VyLm9uKFwidXBkYXRlX3RhcmdldF9wb3NpdGlvblwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclBvc2l0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmluZXJ0aWFsTWFuYWdlciA9IG5ldyBJbmVydGlhbFNjcm9sbE1hbmFnZXIodGhpcyk7XG4gICAgICAgIHRoaXMuaW5lcnRpYWxNYW5hZ2VyLm9uKFwidXBkYXRlX3RhcmdldF9wb3NpdGlvblwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclBvc2l0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjg5zjgr/jg7Pjga7kvY3nva7jgpLliLbpmZDjgZnjgovplqLmlbBcbiAgICAgKiBAcmV0dXJuIOWItumZkOOBp+WIh+OCiuiQveOBqOOBleOCjOOBn+OCueODqeOCpOODgOODvOODnOOCv+ODs+OBruW6p+aomeWApFxuICAgICAqL1xuICAgIGxpbWl0U2xpZGVyQnV0dG9uUG9zaXRpb24oZXZ0KSB7XG4gICAgICAgIGNvbnN0IG1vdXNlUG9zID0gdGhpcy5nZXRNb3VzZVBvc2l0aW9uKHRoaXMsIGV2dCk7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRSYW5nZU9mU2xpZGVyQnV0dG9uUG9zaXRpb24oKTtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmNsYW1wKG1vdXNlUG9zLCByYW5nZS5tYXgsIHJhbmdlLm1pbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOOBruWJsuWQiOOBi+OCieOAgeOCueODqeOCpOODgOODvOOBruS9jee9ruOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbVx0cmF0ZVxuICAgICAqIEByZXR1cm5cbiAgICAgKi9cbiAgICBjb252ZXJ0UmF0ZVRvUGl4ZWwocmF0ZSkge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPZlNsaWRlckJ1dHRvblBvc2l0aW9uKCk7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jb252ZXJ0UmF0ZVRvUGl4ZWwocmF0ZSwgcmFuZ2UubWF4LCByYW5nZS5taW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjga7luqfmqJnjgYvjgonjgIHjgrnjg6njgqTjg4Djg7zjga7libLlkIjjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW1cdHBpeGVsXG4gICAgICogQHJldHVyblxuICAgICAqL1xuICAgIGNvbnZlcnRQaXhlbFRvUmF0ZShwaXhlbCkge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPZlNsaWRlckJ1dHRvblBvc2l0aW9uKCk7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jb252ZXJ0UGl4ZWxUb1JhdGUocGl4ZWwsIHJhbmdlLm1heCwgcmFuZ2UubWluKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Oc44K/44Oz44Gu5Y+v5YuV56+E5Zuy44KS5Y+W5b6X44GZ44KL44CC5Y2Y5L2N44OU44Kv44K744OrXG4gICAgICovXG4gICAgZ2V0UmFuZ2VPZlNsaWRlckJ1dHRvblBvc2l0aW9uKCkge1xuICAgICAgICBjb25zdCBidXR0b25TaXplID0gdGhpcy5zbGlkZUJ1dHRvblNpemU7XG4gICAgICAgIGNvbnN0IHJhdGlvID0gU2Nyb2xsQmFyVmlld1V0aWwuZ2V0UmF0aW9PZk9yaWdpbih0aGlzLl9zbGlkZUJ1dHRvbiwgdGhpcy5pc0hvcml6b250YWwpO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLl9tYXhQb3NpdGlvbiAtICgxLjAgKyByYXRpbykgKiBidXR0b25TaXplO1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLl9taW5Qb3NpdGlvbiAtIHJhdGlvICogYnV0dG9uU2l6ZTtcbiAgICAgICAgcmV0dXJuIHsgbWF4LCBtaW4gfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Oc44K/44Oz44Gu44K144Kk44K644CCXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgc2xpZGVCdXR0b25TaXplKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclNpemUoKTtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmdldFNpemUodGhpcy5fc2xpZGVCdXR0b24sIHRoaXMuaXNIb3Jpem9udGFsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Kv44Ot44O844Or44OQ44O844Gu44Oc44K/44Oz44K144Kk44K65Y+K44Gz5L2N572u44KS5pu05paw44GZ44KL44CCXG4gICAgICog44Kz44Oz44OG44Oz44OE44K144Kk44K644GM5aSJ5pu044GV44KM44Gf5aC05ZCI44Gu5pu05paw44Gr44KC5Yip55So44GZ44KL44CCXG4gICAgICovXG4gICAgdXBkYXRlU2xpZGVyKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNVcGRhdGFibGVTbGlkZXJTaXplKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMudXBkYXRlU2xpZGVyU2l6ZSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclBvc2l0aW9uKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOePvueKtuOBruOCs+ODs+ODhuODs+ODhOOBiuOCiOOBs+ODnuOCueOCr+S9jee9ruOBi+OCieOAgeOCueODqeOCpOODgOODvOOBruWJsuWQiOOCkueul+WHuuOBmeOCi+OAglxuICAgICAqIOOBneOBruWJsuWQiOOBp+OCueODqeOCpOODgOODvOOBruS9jee9ruOCkuabtOaWsOOBmeOCi+OAglxuICAgICAqL1xuICAgIHVwZGF0ZVNsaWRlclBvc2l0aW9uKCkge1xuICAgICAgICBjb25zdCByYXRlID0gdGhpcy5jb250ZW50cy5nZXRTY3JvbGxQb3NpdGlvbkFzUmF0ZSh0aGlzLmlzSG9yaXpvbnRhbCk7XG4gICAgICAgIHRoaXMuY2hhbmdlUmF0ZShyYXRlKTtcbiAgICB9XG4gICAgaXNVcGRhdGFibGVTbGlkZXJTaXplKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gKCgoX2EgPSB0aGlzLl9jb250ZW50cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRhcmdldCkgIT0gbnVsbCAmJlxuICAgICAgICAgICAgKChfYiA9IHRoaXMuX2NvbnRlbnRzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubWFzaykgIT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24gIT0gbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOODnOOCv+ODs+OBruOCteOCpOOCuuOBruS8uOe4ruOCkuihjOOBhuOAglxuICAgICAqL1xuICAgIHVwZGF0ZVNsaWRlclNpemUoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1VwZGF0YWJsZVNsaWRlclNpemUoKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgZnVsbFNpemUgPSB0aGlzLl9tYXhQb3NpdGlvbiAtIHRoaXMuX21pblBvc2l0aW9uO1xuICAgICAgICBjb25zdCBkaXNwbGF5UmF0ZSA9IHRoaXMuX2NvbnRlbnRzLmdldERpc3BsYXlSYXRlKHRoaXMuaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3Qgc2xpZGVyU2l6ZSA9IGZ1bGxTaXplICogZGlzcGxheVJhdGU7XG4gICAgICAgIFNsaWRlclZpZXdVdGlsLnNldFNpemUodGhpcy5fc2xpZGVCdXR0b24sIHRoaXMuaXNIb3Jpem9udGFsLCBzbGlkZXJTaXplKTtcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJWaXNpYmxlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGF1dG9IaWRl44Gu5p2h5Lu244Gr5LiA6Ie044GZ44KL44GL44KS5Yik5a6a44GX44CB6KGo56S644KS5YiH44KK5pu/44GI44KL44CCXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB1cGRhdGVTbGlkZXJWaXNpYmxlKCkge1xuICAgICAgICB0aGlzLl9zbGlkZUJ1dHRvbi52aXNpYmxlID0gdGhpcy5fc2xpZGVCdXR0b24uaW50ZXJhY3RpdmUgPSAhdGhpcy5pc0hpZGRlbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogYXV0b0hpZGXjga7mnaHku7bjgavkuIDoh7TjgZnjgovjgYvjgpLliKTlrprjgZnjgotcbiAgICAgKi9cbiAgICBnZXQgaXNIaWRkZW4oKSB7XG4gICAgICAgIC8vYXV0b0hpZGXjgYzoqK3lrprjgZXjgozjgabjgYTjgarjgYTloLTlkIjjga/luLjjgavooajnpLpcbiAgICAgICAgaWYgKCF0aGlzLmF1dG9IaWRlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudHMuZ2V0RGlzcGxheVJhdGUodGhpcy5pc0hvcml6b250YWwpID09PSAxLjA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHJhdGXlgKTjgpLlhYPjgavjgrPjg7Pjg4bjg7Pjg4TjgpLjgrnjgq/jg63jg7zjg6vjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmF0ZVxuICAgICAqL1xuICAgIHVwZGF0ZUNvbnRlbnRzUG9zaXRpb25XaXRoUmF0ZShyYXRlKSB7XG4gICAgICAgIHRoaXMuX2NvbnRlbnRzLnNjcm9sbChyYXRlLCB0aGlzLmlzSG9yaXpvbnRhbCk7XG4gICAgfVxuICAgIG9uUHJlc3NlZFNsaWRlckJ1dHRvbihlKSB7XG4gICAgICAgIHN1cGVyLm9uUHJlc3NlZFNsaWRlckJ1dHRvbihlKTtcbiAgICAgICAgdGhpcy5fc2Nyb2xsQmFyRXZlbnRFbWl0dGVyLmVtaXQoXCJzdG9wX2luZXJ0aWFsX3R3ZWVuXCIpO1xuICAgIH1cbiAgICBvbk1vdmVTbGlkZXIoZSkge1xuICAgICAgICBzdXBlci5vbk1vdmVTbGlkZXIoZSk7XG4gICAgICAgIHRoaXMuX3Njcm9sbEJhckV2ZW50RW1pdHRlci5lbWl0KFwic3RvcF9pbmVydGlhbF90d2VlblwiKTtcbiAgICB9XG4gICAgb25QcmVzc0Jhc2UoZXZ0KSB7XG4gICAgICAgIGlmICh0aGlzLmlzSGlkZGVuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzdXBlci5vblByZXNzQmFzZShldnQpO1xuICAgICAgICB0aGlzLl9zY3JvbGxCYXJFdmVudEVtaXR0ZXIuZW1pdChcInN0b3BfaW5lcnRpYWxfdHdlZW5cIik7XG4gICAgfVxuICAgIG9uRGlzcG9zZUZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdGhpcy5fY29udGVudHMuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9jb250ZW50cyA9IG51bGw7XG4gICAgICAgIHN1cGVyLm9uRGlzcG9zZUZ1bmN0aW9uKGUpO1xuICAgIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL0luZXJ0aWFsU2Nyb2xsTWFuYWdlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vTW91c2VXaGVlbFNjcm9sbE1hbmFnZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1Njcm9sbEJhckNvbnRlbnRzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2Nyb2xsQmFyRXZlbnRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1Njcm9sbEJhclZpZXdcIjtcbiIsImV4cG9ydCAqIGZyb20gXCIuL1NsaWRlckV2ZW50XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TbGlkZXJWaWV3XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TbGlkZXJWaWV3T3B0aW9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zY3JvbGxCYXJcIjtcbiIsImltcG9ydCB7IEFwcGxpY2F0aW9uLCBDb250YWluZXIsIEdyYXBoaWNzLCBSZWN0YW5nbGUsIFRpY2tlciB9IGZyb20gXCJwaXhpLmpzXCI7XG5pbXBvcnQgeyBTY3JvbGxCYXJWaWV3LCBTY3JvbGxCYXJDb250ZW50cyB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IFRXRUVOIGZyb20gXCJAdHdlZW5qcy90d2Vlbi5qc1wiO1xuXG5jb25zdCBvbkRvbUNvbnRlbnRzTG9hZGVkID0gKCkgPT4ge1xuICBjb25zdCBhcHAgPSBuZXcgQXBwbGljYXRpb24oeyB3aWR0aDogODAwLCBoZWlnaHQ6IDgwMCB9KTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhcHAudmlldyk7XG5cbiAgVGlja2VyLnNoYXJlZC5hZGQoKGUpID0+IHtcbiAgICBUV0VFTi51cGRhdGUocGVyZm9ybWFuY2Uubm93KCkpO1xuICB9KTtcblxuICBjb25zdCBzY3JvbGxiYXIgPSBpbml0U2Nyb2xsQmFyKGFwcC5zdGFnZSwgYXBwLnZpZXcpO1xuXG4gIGNvbnN0IGFkZEJ1dHRvbiA9IChsYWJlbCkgPT4ge1xuICAgIGNvbnN0IGJ0blBsdXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGJ0blBsdXMuaW5uZXJUZXh0ID0gbGFiZWw7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChidG5QbHVzKTtcbiAgICByZXR1cm4gYnRuUGx1cztcbiAgfTtcbiAgY29uc3QgYnRuUGx1cyA9IGFkZEJ1dHRvbihcIkNvbnRlbnRzIFNpemUgK1wiKTtcbiAgY29uc3QgYnRuTWludXMgPSBhZGRCdXR0b24oXCJDb250ZW50cyBTaXplIC1cIik7XG4gIGNvbnN0IGNoYW5nZVNpemUgPSAoZGlmKSA9PiB7XG4gICAgY29uc3Qgc2Nyb2xsUG9zaXRpb24gPSBzY3JvbGxiYXIucmF0ZTtcbiAgICBvdmVycmlkZUNvbnRlbnRzKHNjcm9sbGJhci5jb250ZW50cy50YXJnZXQsIGRpZik7XG4gICAgc2Nyb2xsYmFyLnVwZGF0ZVNsaWRlcigpO1xuICAgIHNjcm9sbGJhci5jaGFuZ2VSYXRlKHNjcm9sbFBvc2l0aW9uKTtcbiAgfTtcbiAgY29uc3Qgb25QbHVzID0gKCkgPT4ge1xuICAgIGNoYW5nZVNpemUoNjQpO1xuICB9O1xuICBjb25zdCBvbk1pbnVzID0gKCkgPT4ge1xuICAgIGNoYW5nZVNpemUoLTY0KTtcbiAgfTtcbiAgYnRuUGx1cy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgb25QbHVzKTtcbiAgYnRuTWludXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG9uTWludXMpO1xufTtcblxuLyoqXG4gKiDjgrnjgq/jg63jg7zjg6vjg5Djg7zjga7lrp/oo4XjgrXjg7Pjg5fjg6tcbiAqIEBwYXJhbSBzdGFnZVxuICovXG5jb25zdCBpbml0U2Nyb2xsQmFyID0gKHN0YWdlLCB2aWV3KSA9PiB7XG4gIGNvbnN0IFNDUk9MTEJBUl9XID0gMTY7XG4gIGNvbnN0IFNDUk9MTEJBUl9IID0gMzYwO1xuICBjb25zdCBTQ1JPTExCQVJfWSA9IDEyMDtcbiAgY29uc3QgQ09OVEVOVFNfVyA9IDI0MDtcblxuICBjb25zdCBjb250YWluZXIgPSBuZXcgQ29udGFpbmVyKCk7XG4gIHN0YWdlLmFkZENoaWxkKGNvbnRhaW5lcik7XG4gIGNvbnRhaW5lci54ID0gMzI7XG4gIGNvbnRhaW5lci55ID0gU0NST0xMQkFSX1k7XG5cbiAgY29uc3QgY29udGVudHMgPSBnZXRTY3JvbGxCYXJPcHRpb24oQ09OVEVOVFNfVywgU0NST0xMQkFSX0gsIGNvbnRhaW5lcik7XG4gIGNvbnN0IHNjcm9sbGJhciA9IG5ldyBTY3JvbGxCYXJWaWV3KFxuICAgIHtcbiAgICAgIGJhc2U6IGdldFNjcm9sbEJhckJhc2UoU0NST0xMQkFSX1csIFNDUk9MTEJBUl9ILCAweDAwMDBmZiksXG4gICAgICBidXR0b246IGdldFNjcm9sbEJhckJ1dHRvbihTQ1JPTExCQVJfVywgMHhmZmZmMDApLFxuICAgICAgbWluUG9zaXRpb246IDAsXG4gICAgICBtYXhQb3NpdGlvbjogU0NST0xMQkFSX0gsXG4gICAgICByYXRlOiAzNS4wLFxuICAgICAgaXNIb3Jpem9udGFsOiBmYWxzZSxcbiAgICAgIGNhbnZhczogdmlldyxcbiAgICB9LFxuICAgIGNvbnRlbnRzXG4gICk7XG5cbiAgc3RhZ2UuYWRkQ2hpbGQoc2Nyb2xsYmFyKTtcbiAgc2Nyb2xsYmFyLnggPSBjb250YWluZXIueCArIENPTlRFTlRTX1c7XG4gIHNjcm9sbGJhci55ID0gU0NST0xMQkFSX1k7XG5cbiAgc2Nyb2xsYmFyLnNsaWRlckV2ZW50RW1pdHRlci5vbihcInNsaWRlcl9jaGFuZ2VcIiwgKGUpID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZyhlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIOOCueOCr+ODreODvOODq+WLleS9nOOCkueiuuiqjeOBmeOCi+OBn+OCgeOBq+OAgeaVheaEj+OBq+ODnuOCueOCr+OCkuWkluOBl+OBpuOBhOOBvuOBmeOAglxuICAgKi9cbiAgY29udGVudHMudGFyZ2V0Lm1hc2sgPSBudWxsO1xuICByZXR1cm4gc2Nyb2xsYmFyO1xufTtcblxuY29uc3QgZ2V0U2Nyb2xsQmFyQmFzZSA9ICh3LCBoLCBjb2xvcikgPT4ge1xuICBjb25zdCBnID0gbmV3IEdyYXBoaWNzKCk7XG4gIGcuYmVnaW5GaWxsKGNvbG9yKTtcbiAgZy5kcmF3UmVjdCgwLCAwLCB3LCBoKTtcbiAgZy5oaXRBcmVhID0gbmV3IFJlY3RhbmdsZSgwLCAwLCB3LCBoKTtcbiAgcmV0dXJuIGc7XG59O1xuXG5jb25zdCBnZXRTY3JvbGxCYXJCdXR0b24gPSAod2lkdGgsIGNvbG9yKSA9PiB7XG4gIGNvbnN0IHJhdGlvID0gMC41O1xuICBjb25zdCBnID0gbmV3IEdyYXBoaWNzKCk7XG4gIGcuYmVnaW5GaWxsKGNvbG9yKTtcbiAgZy5kcmF3UmVjdCgtd2lkdGggLyAyLCAtd2lkdGggKiByYXRpbywgd2lkdGgsIHdpZHRoKTtcbiAgZy5oaXRBcmVhID0gbmV3IFJlY3RhbmdsZSgtd2lkdGggLyAyLCAtd2lkdGggKiByYXRpbywgd2lkdGgsIHdpZHRoKTtcbiAgZy54ID0gd2lkdGggLyAyO1xuICByZXR1cm4gZztcbn07XG5cbmNvbnN0IGdldFNjcm9sbEJhckNvbnRlbnRzID0gKGNvbG9yLCB3LCBoLCBjb250YWluZXIsIGFscGhhID0gMS4wKSA9PiB7XG4gIGNvbnN0IGcgPSBuZXcgR3JhcGhpY3MoKTtcbiAgZy5iZWdpbkZpbGwoY29sb3IsIGFscGhhKTtcbiAgZy5kcmF3UmVjdCgwLCAwLCB3LCBoKTtcbiAgZy5oaXRBcmVhID0gbmV3IFJlY3RhbmdsZSgwLCAwLCB3LCBoKTtcbiAgY29udGFpbmVyLmFkZENoaWxkKGcpO1xuICByZXR1cm4gZztcbn07XG5cbmNvbnN0IG92ZXJyaWRlQ29udGVudHMgPSAoZywgZGlmSGVpZ2h0KSA9PiB7XG4gIGNvbnN0IGZpbGwgPSBnLmZpbGwuY2xvbmUoKTtcbiAgY29uc29sZS5sb2coZmlsbCk7XG4gIGNvbnN0IGhpdEFyZWEgPSBnLmhpdEFyZWEuY2xvbmUoKTtcbiAgaGl0QXJlYS5oZWlnaHQgKz0gZGlmSGVpZ2h0O1xuICBnLmNsZWFyKCk7XG4gIGcuYmVnaW5GaWxsKGZpbGwuY29sb3IsIGZpbGwuYWxwaGEpO1xuICBnLmRyYXdSZWN0KGhpdEFyZWEueCwgaGl0QXJlYS55LCBoaXRBcmVhLndpZHRoLCBoaXRBcmVhLmhlaWdodCk7XG4gIGcuaGl0QXJlYSA9IG5ldyBSZWN0YW5nbGUoXG4gICAgaGl0QXJlYS54LFxuICAgIGhpdEFyZWEueSxcbiAgICBoaXRBcmVhLndpZHRoLFxuICAgIGhpdEFyZWEuaGVpZ2h0XG4gICk7XG59O1xuXG5jb25zdCBnZXRTY3JvbGxCYXJPcHRpb24gPSAoY29udGVudHNXLCBzY3JvbGxCYXJILCBjb250YWluZXIpID0+IHtcbiAgY29uc3QgdGFyZ2V0Q29udGVudHMgPSBnZXRTY3JvbGxCYXJDb250ZW50cyhcbiAgICAweGZmMDBmZixcbiAgICBjb250ZW50c1csXG4gICAgc2Nyb2xsQmFySCAqIDIsXG4gICAgY29udGFpbmVyXG4gICk7XG4gIGNvbnN0IGNvbnRlbnRzTWFzayA9IGdldFNjcm9sbEJhckNvbnRlbnRzKFxuICAgIDB4MDAwMGZmLFxuICAgIGNvbnRlbnRzVyxcbiAgICBzY3JvbGxCYXJILFxuICAgIGNvbnRhaW5lcixcbiAgICAwLjNcbiAgKTtcbiAgcmV0dXJuIG5ldyBTY3JvbGxCYXJDb250ZW50cyh0YXJnZXRDb250ZW50cywgY29udGVudHNNYXNrLCBjb250YWluZXIpO1xufTtcblxuLyoqXG4gKiBET01Db250ZW50TG9hZGVk5Lul6ZmN44Gr5Yid5pyf5YyW5Yem55CG44KS5a6f6KGM44GZ44KLXG4gKi9cbmlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIikge1xuICBvbkRvbUNvbnRlbnRzTG9hZGVkKCk7XG59IGVsc2Uge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBvbkRvbUNvbnRlbnRzTG9hZGVkKTtcbn1cbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJTbGlkZXJFdmVudENvbnRleHQiLCJjb25zdHJ1Y3RvciIsInJhdGUiLCJTbGlkZXJFdmVudEVtaXR0ZXIiLCJTSEFQRVMiLCJTbGlkZXJWaWV3IiwiU2xpZGVyVmlld1V0aWwiLCJTbGlkZXJWaWV3T3B0aW9uIiwiaW5pdCIsIm9wdGlvbiIsIl9hIiwiX2IiLCJfYyIsIk1hdGgiLCJtYXgiLCJtaW4iLCJNQVhfUkFURSIsIm1pblBvc2l0aW9uIiwiaXNIb3Jpem9udGFsIiwiY2hlY2siLCJjaGVja1BhcnRzIiwiYmFzZSIsImJ1dHRvbiIsIm1hc2siLCJiYXIiLCJvYmoiLCJ0YXJnZXROYW1lIiwiYm91bmRzIiwiZ2V0Q29udGVudHNCb3VuZHMiLCJ3aWR0aCIsImhlaWdodCIsInR5cGUiLCJSRUNUIiwiRXJyb3IiLCJwYXJlbnQiLCJjb25zb2xlIiwid2FybiIsIkNvbnRhaW5lciIsIkZlZGVyYXRlZFBvaW50ZXJFdmVudCIsIlBvaW50IiwiYnV0dG9uUm9vdENvbnRhaW5lciIsIl9idXR0b25Sb290Q29udGFpbmVyIiwiX2lzSG9yaXpvbnRhbCIsInNsaWRlckV2ZW50RW1pdHRlciIsIl9zbGlkZXJFdmVudEVtaXR0ZXIiLCJkcmFnU3RhcnRQb3MiLCJpc0RyYWdnaW5nIiwic3RhcnRNb3ZlIiwiZSIsIm9uUHJlc3NlZFNsaWRlckJ1dHRvbiIsIm1vdmVTbGlkZXIiLCJvbk1vdmVTbGlkZXIiLCJtb3ZlU2xpZGVyRmluaXNoIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9zbGlkZUJ1dHRvbiIsIm9mZiIsImVtaXQiLCJkaXNwb3NlIiwib25EaXNwb3NlRnVuY3Rpb24iLCJfY2FudmFzIiwiY2FudmFzIiwiX2JhciIsImluaXRCYXJBbmRNYXNrIiwiX2Jhck1hc2siLCJzbGlkZUJ1dHRvbiIsIl9taW5Qb3NpdGlvbiIsIl9tYXhQb3NpdGlvbiIsIm1heFBvc2l0aW9uIiwiX3JhdGUiLCJjaGFuZ2VSYXRlIiwiYWRkQ2hpbGRQYXJ0cyIsInJlbW92ZUNoaWxkIiwiYWRkQ2hpbGQiLCJwb3MiLCJjb252ZXJ0UmF0ZVRvUGl4ZWwiLCJ1cGRhdGVQYXJ0cyIsInRhcmdldCIsImN1cnJlbnRUYXJnZXQiLCJsb2NhbFBvcyIsInRvTG9jYWwiLCJnbG9iYWwiLCJ4IiwieSIsImdldFJvb3RDb250YWluZXIiLCJhZGRFdmVudExpc3RlbmVyIiwib24iLCJtb3VzZVBvcyIsImxpbWl0U2xpZGVyQnV0dG9uUG9zaXRpb24iLCJjb252ZXJ0UGl4ZWxUb1JhdGUiLCJldnQiLCJnZXRNb3VzZVBvc2l0aW9uIiwiY2xhbXAiLCJzdHJldGNoIiwic2V0U2l6ZSIsImdldFBvc2l0aW9uIiwic2V0UG9zaXRpb24iLCJvblByZXNzQmFzZSIsInBpeGVsIiwiZGlzcGxheU9iaiIsIm9mZnNldFgiLCJvZmZzZXRZIiwidmFsdWUiLCJfYmFzZSIsImludGVyYWN0aXZlIiwibG9nIiwiaW50ZXJhY3RpdmVDaGlsZHJlbiIsInJlbW92ZUFsbExpc3RlbmVycyIsInJlbW92ZUNoaWxkcmVuIiwicGl4IiwicG9zaXRpb24iLCJnZXRTaXplIiwic2l6ZSIsInNjYWxlIiwiYW1vdW50IiwibnVtIiwiaGl0QXJlYSIsImdldExvY2FsQm91bmRzIiwiU2Nyb2xsQmFyVmlld1V0aWwiLCJnZXRDbGFtcGVkVGFyZ2V0UG9zaXRpb24iLCJ0YXJnZXRTaXplIiwibWFza1NpemUiLCJtaW5Qb3MiLCJjbGFtcFRhcmdldFBvc2l0aW9uIiwiY2xhbXBlZFBvcyIsImdldFJhdGlvT2ZPcmlnaW4iLCJyYXRpbyIsIm5hbWUiLCJFYXNpbmciLCJUd2VlbiIsIlRpY2tlciIsInV0aWxzIiwiSW5lcnRpYWxTY3JvbGxNYW5hZ2VyIiwic3BlZWQiLCJfc3BlZWQiLCJzY3JvbGxCYXJWaWV3IiwiZGVjZWxlcmF0aW9uUmF0ZSIsIm92ZXJmbG93U2Nyb2xsUmFuZ2UiLCJvbk1vdXNlRG93biIsInVwZGF0ZURyYWdQb3MiLCJ0d2VlbiIsImRpc3Bvc2VUd2VlbiIsImFkZERyYWdMaXN0ZW5lciIsIm9uTW91c2VNb3ZlIiwiZGVsdGEiLCJnZXREcmFnUG9zIiwiZHJhZ1BvcyIsImFkZFRhcmdldFBvc2l0aW9uIiwiZ2V0T3ZlcmZsb3dEZWNlbGVyYXRpb24iLCJvbk1vdXNlVXAiLCJyZW1vdmVEcmFnTGlzdGVuZXIiLCJvblRpY2siLCJnZXRMZWF2ZVJhbmdlRnJvbU1hc2siLCJpc1BsYXlpbmciLCJvdmVyZmxvd0RlY2VsZXJhdGlvbiIsImFicyIsInRvT2JqIiwiZ2V0Q2xhbXBlZFBvcyIsImNvbnRlbnRzIiwidG8iLCJvblVwZGF0ZSIsImVhc2luZyIsIkN1YmljIiwiT3V0Iiwic3RhcnQiLCJzdG9wSW5lcnRpYWwiLCJzdG9wIiwic2Nyb2xsQmFyRXZlbnRFbWl0dGVyIiwiX2lzU3RhcnQiLCJzaGFyZWQiLCJhZGQiLCJyZW1vdmUiLCJzd2l0Y2hEcmFnTGlzdGVuZXIiLCJpc09uIiwic3dpdGNoTGlzdGVuZXIiLCJldmVudCIsImxpc3RlbmVyIiwiY3VycmVudFBvcyIsImRpZlBvcyIsIk1vdXNlV2hlZWxTY3JvbGxNYW5hZ2VyIiwid2hlZWxIYW5kbGVyIiwic2hpZnQiLCJkZWx0YVkiLCJzY3JvbGwiLCJTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZSIsIlNjcm9sbEJhckNvbnRlbnRzIiwiX3RhcmdldCIsIkNIQU5HRURfQ09OVEVOVFNfU0laRSIsIl9tYXNrIiwiY29udGFpbmVyIiwic2Nyb2xsQmFyQ29udGVudHMiLCJhZGRUb0NvbnRhaW5lciIsImRpc3BsYXlPYmplY3QiLCJnZXRTY3JvbGxQb3NpdGlvbkFzUmF0ZSIsImdldFBvcyIsInplcm9Qb3MiLCJjb250ZW50c1BvcyIsImNvbnRlbnRzUG9zaXRpb25EaWYiLCJtb3ZhYmxlUmFuZ2UiLCJnZXRNb3ZhYmxlUmFuZ2UiLCJkaWYiLCJnZXREaXNwbGF5UmF0ZSIsImNvbnRlbnRzU2l6ZSIsIlNjcm9sbEJhckV2ZW50RW1pdHRlciIsIlNjcm9sbEJhclZpZXciLCJfY29udGVudHMiLCJhdXRvSGlkZSIsIl9hdXRvSGlkZSIsInVwZGF0ZVNsaWRlclZpc2libGUiLCJfc2Nyb2xsQmFyRXZlbnRFbWl0dGVyIiwic2Nyb2xsQ29udGVudHMiLCJ1cGRhdGVDb250ZW50c1Bvc2l0aW9uIiwidXBkYXRlQ29udGVudHNQb3NpdGlvbldpdGhSYXRlIiwidXBkYXRlU2xpZGVyIiwid2hlZWxNYW5hZ2VyIiwidXBkYXRlU2xpZGVyUG9zaXRpb24iLCJpbmVydGlhbE1hbmFnZXIiLCJyYW5nZSIsImdldFJhbmdlT2ZTbGlkZXJCdXR0b25Qb3NpdGlvbiIsImJ1dHRvblNpemUiLCJzbGlkZUJ1dHRvblNpemUiLCJ1cGRhdGVTbGlkZXJTaXplIiwiaXNVcGRhdGFibGVTbGlkZXJTaXplIiwiZnVsbFNpemUiLCJkaXNwbGF5UmF0ZSIsInNsaWRlclNpemUiLCJ2aXNpYmxlIiwiaXNIaWRkZW4iLCJBcHBsaWNhdGlvbiIsIkdyYXBoaWNzIiwiUmVjdGFuZ2xlIiwiVFdFRU4iLCJvbkRvbUNvbnRlbnRzTG9hZGVkIiwiYXBwIiwiZG9jdW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJ2aWV3IiwidXBkYXRlIiwicGVyZm9ybWFuY2UiLCJub3ciLCJzY3JvbGxiYXIiLCJpbml0U2Nyb2xsQmFyIiwic3RhZ2UiLCJhZGRCdXR0b24iLCJsYWJlbCIsImJ0blBsdXMiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJUZXh0IiwiYnRuTWludXMiLCJjaGFuZ2VTaXplIiwic2Nyb2xsUG9zaXRpb24iLCJvdmVycmlkZUNvbnRlbnRzIiwib25QbHVzIiwib25NaW51cyIsIlNDUk9MTEJBUl9XIiwiU0NST0xMQkFSX0giLCJTQ1JPTExCQVJfWSIsIkNPTlRFTlRTX1ciLCJnZXRTY3JvbGxCYXJPcHRpb24iLCJnZXRTY3JvbGxCYXJCYXNlIiwiZ2V0U2Nyb2xsQmFyQnV0dG9uIiwidyIsImgiLCJjb2xvciIsImciLCJiZWdpbkZpbGwiLCJkcmF3UmVjdCIsImdldFNjcm9sbEJhckNvbnRlbnRzIiwiYWxwaGEiLCJkaWZIZWlnaHQiLCJmaWxsIiwiY2xvbmUiLCJjbGVhciIsImNvbnRlbnRzVyIsInNjcm9sbEJhckgiLCJ0YXJnZXRDb250ZW50cyIsImNvbnRlbnRzTWFzayIsInJlYWR5U3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///589\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var B=__webpack_module_cache__[Q];if(void 0!==B)return B.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,B,F,U)=>{if(!B){var g=1/0;for(n=0;n<deferred.length;n++){for(var[B,F,U]=deferred[n],C=!0,I=0;I<B.length;I++)(!1&U||g>=U)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](B[I])))?B.splice(I--,1):(C=!1,U<g&&(g=U));if(C){deferred.splice(n--,1);var s=F();void 0!==s&&(Q=s)}}return Q}U=U||0;for(var n=deferred.length;n>0&&deferred[n-1][2]>U;n--)deferred[n]=deferred[n-1];deferred[n]=[B,F,U]},__webpack_require__.d=(Q,B)=>{for(var F in B)__webpack_require__.o(B,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:B[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,B)=>Object.prototype.hasOwnProperty.call(Q,B),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),__webpack_require__.j=545,(()=>{var Q={545:0};__webpack_require__.O.j=B=>0===Q[B];var B=(B,F)=>{var U,g,[C,I,s]=F,n=0;if(C.some((B=>0!==Q[B]))){for(U in I)__webpack_require__.o(I,U)&&(__webpack_require__.m[U]=I[U]);if(s)var i=s(__webpack_require__)}for(B&&B(F);n<C.length;n++)g=C[n],__webpack_require__.o(Q,g)&&Q[g]&&Q[g][0](),Q[g]=0;return __webpack_require__.O(i)},F=self.webpackChunk_masatomakino_pixijs_basic_scrollbar=self.webpackChunk_masatomakino_pixijs_basic_scrollbar||[];F.forEach(B.bind(null,0)),F.push=B.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(589)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();