(()=>{"use strict";var __webpack_modules__={536:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/index.mjs + 176 modules\nvar lib = __webpack_require__(453);\n;// CONCATENATED MODULE: ./esm/SliderEvent.js\n/**\n * スライダーが移動した際に発行されるイベントです。\n * 現状のスライダー位置を報告します。\n */\nclass SliderEventContext {\n  constructor(rate) {\n    this.rate = rate;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@pixi/display/lib/index.mjs + 4 modules\nvar display_lib = __webpack_require__(820);\n// EXTERNAL MODULE: ./node_modules/@pixi/math/lib/index.mjs + 11 modules\nvar math_lib = __webpack_require__(363);\n// EXTERNAL MODULE: ./node_modules/@pixi/utils/lib/index.mjs + 24 modules\nvar utils_lib = __webpack_require__(441);\n;// CONCATENATED MODULE: ./esm/SliderView.js\n\n\n\n\n/**\n * スライダー用クラスです\n *\n * 使用上の注意 :\n * オブジェクトのサイズの計測にgetLocalBounds関数を使用しています。\n * hitAreaでサイズをあらかじめ与えてください。\n */\nclass SliderView extends display_lib/* Container */.W2 {\n  get rate() {\n    return this._rate;\n  }\n  /**\n   * @param option\n   */\n  constructor(option) {\n    super();\n    this.isHorizontal = true;\n    this.dragStartPos = new math_lib/* Point */.E9();\n    this.isDragging = false; // 現在スライド中か否か\n    this.sliderEventEmitter = new utils_lib.EventEmitter();\n    /**\n     * スライダーのドラッグを開始する\n     * @param {Object} e\n     */\n    this.startMove = e => {\n      this.onPressedSliderButton(e);\n    };\n    /**\n     * スライダーのドラッグ中の処理\n     * @param e\n     */\n    this.moveSlider = e => {\n      this.onMoveSlider(e);\n    };\n    /**\n     * スライダーのドラッグ終了時の処理\n     */\n    this.moveSliderFinish = () => {\n      this.isDragging = false;\n      this.buttonRootContainer.removeEventListener("pointermove", this.moveSlider);\n      this._slideButton.off("pointerup", this.moveSliderFinish);\n      this._slideButton.off("pointerupoutside", this.moveSliderFinish);\n      this.sliderEventEmitter.emit("slider_change_finished", new SliderEventContext(this.rate));\n    };\n    /**\n     * このインスタンスを破棄する。\n     * @param\te\n     */\n    this.dispose = e => {\n      this.onDisposeFunction(e);\n    };\n    const initOption = SliderViewOptionUtil.init(option);\n    this.canvas = initOption.canvas;\n    this._base = this.initBase(initOption.base);\n    this._bar = this.initBarAndMask(initOption === null || initOption === void 0 ? void 0 : initOption.bar);\n    this._barMask = this.initBarAndMask(initOption === null || initOption === void 0 ? void 0 : initOption.mask);\n    if (this._bar && this._barMask) this._bar.mask = this._barMask;\n    this._slideButton = this.initSliderButton(initOption.button);\n    this.buttonRootContainer = SliderViewUtil.getRootContainer(this.canvas, this._slideButton);\n    this._minPosition = initOption.minPosition;\n    this._maxPosition = initOption.maxPosition;\n    this.isHorizontal = initOption.isHorizontal;\n    this._rate = initOption.rate;\n    this.changeRate(this._rate);\n  }\n  /**\n   * スライダーの位置を変更する\n   * @param\trate\tスライダーの位置 MIN 0.0 ~ MAX [SliderView.MAX_RATE]\n   */\n  changeRate(rate) {\n    //ドラッグ中は外部からの操作を無視する。\n    if (this.isDragging) return;\n    this._rate = rate;\n    const pos = this.convertRateToPixel(this._rate);\n    this.updateParts(pos);\n    this.sliderEventEmitter.emit("slider_change", new SliderEventContext(this.rate));\n  }\n  onPressedSliderButton(e) {\n    this.isDragging = true;\n    const target = e.currentTarget;\n    const localPos = this.toLocal(e.global);\n    this.dragStartPos.set(localPos.x - target.x, localPos.y - target.y);\n    this.buttonRootContainer.addEventListener("pointermove", this.moveSlider);\n    this._slideButton.on("pointerup", this.moveSliderFinish);\n    this._slideButton.on("pointerupoutside", this.moveSliderFinish);\n  }\n  onMoveSlider(e) {\n    const mousePos = this.limitSliderButtonPosition(e);\n    this.updateParts(mousePos);\n    this._rate = this.convertPixelToRate(mousePos);\n    this.sliderEventEmitter.emit("slider_change", new SliderEventContext(this.rate));\n  }\n  /**\n   * スライダーボタンの位置を制限する関数\n   * @return 制限で切り落とされたスライダーボタンの座標値 座標の原点はSliderViewであり、ボタンやバーではない。\n   */\n  limitSliderButtonPosition(evt) {\n    const mousePos = SliderViewUtil.getPointerLocalPosition(this, this.isHorizontal, this.dragStartPos, evt);\n    return SliderViewUtil.clamp(mousePos, this._maxPosition, this._minPosition);\n  }\n  /**\n   * 各MCの位置、サイズをマウスポインタの位置に合わせて更新する\n   * moveSliderの内部処理\n   * @param\tmousePos SliderViewを原点としたローカルのマウス座標、limitSliderButtonPosition関数で可動範囲に制限済み。\n   */\n  updateParts(mousePos) {\n    const stretch = target => {\n      SliderViewUtil.setSize(target, this.isHorizontal, mousePos - SliderViewUtil.getPosition(target, this.isHorizontal));\n    };\n    //バーマスクがなければ、バー自体を伸縮する\n    if (this._bar && !this._barMask) {\n      stretch(this._bar);\n    }\n    //バーマスクがあれば、マスクを伸縮する。\n    if (this._barMask) {\n      stretch(this._barMask);\n    }\n    //ボタンの位置を更新する。\n    SliderViewUtil.setPosition(this._slideButton, this.isHorizontal, mousePos);\n  }\n  /**\n   * スライダーの地をクリックした際の処理\n   * その位置までスライダーをジャンプする\n   * @param evt\n   */\n  onPressBase(evt) {\n    this.dragStartPos.set(0, 0);\n    this.moveSlider(evt);\n    this.sliderEventEmitter.emit("slider_change_finished", new SliderEventContext(this.rate));\n  }\n  /**\n   * スライダーの割合から、スライダーの位置を取得する\n   * @param\trate\n   * @return\n   */\n  convertRateToPixel(rate) {\n    return SliderViewUtil.convertRateToPixel(rate, this._maxPosition, this._minPosition);\n  }\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   * @param\tpixel\n   * @return\n   */\n  convertPixelToRate(pixel) {\n    return SliderViewUtil.convertPixelToRate(pixel, this._maxPosition, this._minPosition);\n  }\n  /**\n   * ドラッグ中のマウス座標を取得する。\n   * limitSliderButtonPosition内の処理。\n   */\n  initBase(value) {\n    value.eventMode = "static";\n    value.on("pointertap", e => {\n      this.onPressBase(e);\n    });\n    SliderViewUtil.addChildParts(this, value);\n    return value;\n  }\n  initBarAndMask(value) {\n    if (value == null) return;\n    value.eventMode = "none";\n    SliderViewUtil.addChildParts(this, value);\n    return value;\n  }\n  initSliderButton(value) {\n    value.on("pointerdown", this.startMove);\n    value.eventMode = "static";\n    SliderViewUtil.addChildParts(this, value);\n    return value;\n  }\n  /**\n   * 全てのDisplayObjectとEventListenerを解除する。\n   */\n  onDisposeFunction(e) {\n    this.removeAllListeners();\n    this._base.removeAllListeners();\n    this._slideButton.removeAllListeners();\n    this.removeChildren();\n  }\n}\nSliderView.MAX_RATE = 1.0;\n;// CONCATENATED MODULE: ./esm/SliderViewOption.js\n/**\n * スライダーを初期化する際のオプション\n */\n\n\nclass SliderViewOptionUtil {\n  static init(option) {\n    var _a, _b, _c;\n    this.check(option);\n    if (option.rate != null) {\n      option.rate = Math.max(0, option.rate);\n      option.rate = Math.min(SliderView.MAX_RATE, option.rate);\n    }\n    (_a = option.rate) !== null && _a !== void 0 ? _a : option.rate = 0.0;\n    (_b = option.minPosition) !== null && _b !== void 0 ? _b : option.minPosition = 0.0;\n    (_c = option.isHorizontal) !== null && _c !== void 0 ? _c : option.isHorizontal = true;\n    return option;\n  }\n  static check(option) {\n    this.checkParts(option.base, "base");\n    this.checkParts(option.button, "button");\n    this.checkParts(option.mask, "mask");\n    this.checkParts(option.bar, "bar");\n  }\n  static checkParts(obj, targetName) {\n    if (obj == null) return;\n    const bounds = SliderViewUtil.getContentsBounds(obj);\n    if (bounds.width === 0 && bounds.height === 0 && bounds.type === lib/* SHAPES.RECT */.HSM.RECT) {\n      throw new Error(`SliderView : ${targetName} 初期化オプションで指定されたDisplayObjectにバウンディングボックスが存在しません。Containerを利用する場合はhitAreaを利用してバウンディングボックスを手動で設定してください。`);\n    }\n    if (obj.parent) {\n      console.warn(`初期化オプションで指定されたパーツがすでに別の親にaddChildされています。SliderViewおよびScrollBarViewの構成パーツは同一のコンテナにaddChildされることを前提としています。`);\n    }\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(984);\n;// CONCATENATED MODULE: ./esm/scrollBar/InertialScrollManager.js\n\n\n\n\n\n/**\n * スクロールバーエリアの慣性スクロールを処理するクラス。\n */\nclass InertialScrollManager extends utils_lib.EventEmitter {\n  get speed() {\n    return this._speed;\n  }\n  constructor(scrollBarView) {\n    super();\n    this.decelerationRate = 0.975;\n    this.overflowScrollRange = 180;\n    this._speed = 0.0;\n    this.isDragging = false;\n    this._isStart = false;\n    this.onMouseDown = e => {\n      this.updateDragPos(e);\n      this.isDragging = true;\n      this._speed = 0.0;\n      if (this.tween) this.disposeTween();\n      this.addDragListener();\n    };\n    this.onMouseMove = e => {\n      if (this.dragPos == null) return;\n      const delta = this.getDragPos(e) - this.dragPos;\n      this._speed = delta;\n      this.addTargetPosition(delta * this.getOverflowDeceleration());\n      this.updateDragPos(e);\n    };\n    this.onMouseUp = () => {\n      this.removeDragListener();\n      this.isDragging = false;\n      this.onTick();\n    };\n    this.onTick = () => {\n      var _a;\n      if (this.isDragging) return;\n      if (this._speed === 0.0 && this.getLeaveRangeFromMask() === 0.0) return;\n      if ((_a = this.tween) === null || _a === void 0 ? void 0 : _a.isPlaying()) return;\n      //位置による減速率増加。マスクエリアから離れているなら減速率が大きくなる。\n      const overflowDeceleration = this.getOverflowDeceleration();\n      this._speed *= this.decelerationRate * overflowDeceleration;\n      this.addTargetPosition(this._speed);\n      if (Math.abs(this._speed) > 0.1) return;\n      //back ease\n      this._speed = 0.0;\n      const toObj = {\n        y: this.getClampedPos()\n      };\n      this.disposeTween();\n      this.tween = new tween_esm/* Tween */.kX(this.scrollBarView.contents.target).to(toObj, 666).onUpdate(() => {\n        this.emit("update_target_position");\n      }).easing(tween_esm/* Easing.Cubic.Out */.oY.Cubic.Out).start();\n    };\n    this.stopInertial = () => {\n      this._speed = 0.0;\n      this.disposeTween();\n    };\n    this.disposeTween = () => {\n      if (this.tween) {\n        this.tween.stop();\n        this.tween = undefined;\n      }\n    };\n    this.scrollBarView = scrollBarView;\n    scrollBarView.scrollBarEventEmitter.on("stop_inertial_tween", this.stopInertial);\n    const target = this.scrollBarView.contents.target;\n    target.eventMode = "static";\n    this.start();\n  }\n  start() {\n    if (this._isStart) return;\n    this._isStart = true;\n    const target = this.scrollBarView.contents.target;\n    target.on("pointerdown", this.onMouseDown);\n    lib/* Ticker.shared.add */.vB5.shared.add(this.onTick);\n  }\n  stop() {\n    if (!this._isStart) return;\n    this._isStart = false;\n    const target = this.scrollBarView.contents.target;\n    target.off("pointerdown", this.onMouseDown);\n    this.removeDragListener();\n    this.stopInertial();\n    lib/* Ticker.shared.remove */.vB5.shared.remove(this.onTick);\n  }\n  addDragListener() {\n    this.switchDragListener(true);\n  }\n  removeDragListener() {\n    this.switchDragListener(false);\n  }\n  switchDragListener(isOn) {\n    var _a;\n    const target = this.scrollBarView.contents.target;\n    const dragTarget = (_a = this.scrollBarView.canvas) !== null && _a !== void 0 ? _a : target;\n    const switchListener = (isOn, dragTarget, event, listener) => {\n      if (isOn) {\n        dragTarget.addEventListener(event, listener);\n      } else {\n        dragTarget.removeEventListener(event, listener);\n      }\n    };\n    switchListener(isOn, dragTarget, "pointermove", this.onMouseMove);\n    switchListener(isOn, target, "pointerup", this.onMouseUp);\n    switchListener(isOn, target, "pointerupoutside", this.onMouseUp);\n  }\n  getDragPos(e) {\n    return SliderViewUtil.getPointerEventPosition(e, this.scrollBarView.isHorizontal);\n  }\n  updateDragPos(e) {\n    this.dragPos = this.getDragPos(e);\n  }\n  addTargetPosition(delta) {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const currentPos = SliderViewUtil.getPosition(target, isHorizontal);\n    SliderViewUtil.setPosition(target, isHorizontal, currentPos + delta);\n    this.emit("update_target_position");\n  }\n  /**\n   * スクロールのオーバーフロー量から、減退率を割り出す。\n   * overflowScrollRange以上に離れている場合は0.0\n   * スクロールエリア内にコンテンツがある場合は1.0を返す。\n   */\n  getOverflowDeceleration() {\n    const difPos = this.getLeaveRangeFromMask();\n    let overflowDeceleration = (this.overflowScrollRange - difPos) / this.overflowScrollRange;\n    if (overflowDeceleration < 0.0) overflowDeceleration = 0.0;\n    return overflowDeceleration;\n  }\n  /**\n   * ターゲットコンテンツがマスク領域からどれだけ離れているか。\n   */\n  getLeaveRangeFromMask() {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const currentPos = SliderViewUtil.getPosition(target, isHorizontal);\n    const clampedPos = this.getClampedPos();\n    return Math.abs(currentPos - clampedPos);\n  }\n  getClampedPos() {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    return ScrollBarViewUtil.getClampedTargetPosition(target, this.scrollBarView.contents.mask, isHorizontal);\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/MouseWheelScrollManager.js\n\n\n\n/**\n * ScrollBarViewを受け取り、マウスホイールによる操作を行うクラス\n */\nclass MouseWheelScrollManager extends utils_lib.EventEmitter {\n  constructor(scrollBarView) {\n    super();\n    this.delta = 16;\n    this._isStart = false;\n    //TODO add support deltaX / deltaY\n    this.wheelHandler = e => {\n      const shift = e.deltaY > 0 ? -this.delta : this.delta;\n      this.scroll(shift);\n    };\n    this.scrollBarView = scrollBarView;\n    const target = this.scrollBarView.contents.target;\n    target.eventMode = "static";\n    this.start();\n  }\n  start() {\n    if (this._isStart) return;\n    const target = this.scrollBarView.contents.target;\n    target.on("wheel", this.wheelHandler);\n    this._isStart = true;\n  }\n  stop() {\n    const target = this.scrollBarView.contents.target;\n    target.off("wheel", this.wheelHandler);\n    this._isStart = false;\n  }\n  scroll(delta) {\n    const target = this.scrollBarView.contents.target;\n    const mask = this.scrollBarView.contents.mask;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const pos = SliderViewUtil.getPosition(target, isHorizontal) + delta;\n    ScrollBarViewUtil.clampTargetPosition(target, mask, pos, isHorizontal);\n    this.emit("update_target_position");\n    this.scrollBarView.scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarContents.js\n\n\n/**\n * スクロールバーで操作するコンテンツ\n */\nclass ScrollBarContents extends utils_lib.EventEmitter {\n  get target() {\n    return this._target;\n  }\n  set target(value) {\n    this._target = value;\n    this.emit("changed_contents_size");\n  }\n  get mask() {\n    return this._mask;\n  }\n  set mask(value) {\n    this._mask = value;\n    this.emit("changed_contents_size");\n  }\n  /**\n   * コンストラクタ\n   *\n   * @param target スクロール操作を受けるコンテンツ\n   * @param mask targetを切り抜くマスク\n   * @param container targetおよびmaskを格納する親コンテナ\n   */\n  constructor(target, mask, container) {\n    super();\n    this.container = container;\n    this._target = target;\n    this._mask = mask;\n    ScrollBarContents.init(this);\n  }\n  static init(scrollBarContents) {\n    if (scrollBarContents._target.mask !== scrollBarContents._mask) {\n      scrollBarContents._target.mask = scrollBarContents._mask;\n    }\n    const addToContainer = displayObject => {\n      var _a;\n      if (displayObject.parent === scrollBarContents.container) return;\n      (_a = displayObject.parent) === null || _a === void 0 ? void 0 : _a.removeChild(displayObject);\n      scrollBarContents.container.addChild(displayObject);\n    };\n    addToContainer(scrollBarContents._target);\n    addToContainer(scrollBarContents._mask);\n  }\n  /**\n   * 現状のスクロール位置を取得する。単位rate\n   * 0.0でコンテンツはTOP, 1.0でBOTTOMに位置している。\n   *\n   * @param isHorizontal\n   */\n  getScrollPositionAsRate(isHorizontal) {\n    const getPos = SliderViewUtil.getPosition;\n    const zeroPos = getPos(this.mask, isHorizontal);\n    const contentsPos = getPos(this.target, isHorizontal);\n    const contentsPositionDif = zeroPos - contentsPos;\n    const movableRange = this.getMovableRange(isHorizontal);\n    return contentsPositionDif / movableRange * SliderView.MAX_RATE;\n  }\n  /**\n   * スクロールの最大可動領域を取得する。単位px\n   * もし可動域がゼロpx以下の場合、極小の正の値を返す。\n   *\n   * @param isHorizontal\n   * @private\n   */\n  getMovableRange(isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const targetSize = getSize(this._target, isHorizontal);\n    const maskSize = getSize(this._mask, isHorizontal);\n    const dif = targetSize - maskSize;\n    if (dif <= 0.0) {\n      return 1e-128;\n    }\n    return dif;\n  }\n  /**\n   * コンテンツを、指定されたrateの位置までスクロールする\n   *\n   * @param rate\n   * @param isHorizontal\n   */\n  scroll(rate, isHorizontal) {\n    const getPos = SliderViewUtil.getPosition;\n    const zeroPos = getPos(this._mask, isHorizontal);\n    const movableRange = this.getMovableRange(isHorizontal);\n    const contentsPos = zeroPos - movableRange * (rate / SliderView.MAX_RATE);\n    SliderViewUtil.setPosition(this._target, isHorizontal, contentsPos);\n  }\n  /**\n   * コンテンツが表示領域にどれだけ表示されているかの比率を取得する。\n   * この比率は、スクロールバーボタンのスケールとなる。\n   *\n   * 例 : コンテンツサイズが200、表示領域が100なら0.5\n   * コンテンツがすべて表示されているなら1.0\n   *\n   * @param isHorizontal\n   * @return 0.0 ~ 1.0\n   */\n  getDisplayRate(isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const contentsSize = getSize(this.target, isHorizontal);\n    const maskSize = getSize(this.mask, isHorizontal);\n    return SliderViewUtil.clamp(maskSize / contentsSize, SliderView.MAX_RATE, 0.0);\n  }\n  dispose() {\n    this.removeAllListeners();\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarView.js\n\n\n\n/**\n * スクロールバーを表すクラスです。\n *\n * このクラスは、スライダーに以下の機能を追加したものです。\n *\n * \t\t1.コンテンツサイズに合わせた、スクロールバーの伸縮\n * \t\t2.スクロールバーの伸縮にあわせた、移動範囲の制限\n * \t\t3.スクロールバーの伸縮にあわせた、移動値の取得\n */\nclass ScrollBarView extends SliderView {\n  get autoHide() {\n    return this._autoHide;\n  }\n  set autoHide(value) {\n    this._autoHide = value;\n    this.updateSliderVisible();\n  }\n  constructor(option, scrollContents) {\n    super(option);\n    this._autoHide = false;\n    this.scrollBarEventEmitter = new utils_lib.EventEmitter();\n    /**\n     * スライダーイベントに応じてコンテンツをスクロールする\n     * @param {Object} e\n     */\n    this.updateContentsPosition = e => {\n      this.updateContentsPositionWithRate(e.rate);\n    };\n    const initOption = SliderViewOptionUtil.init(option);\n    this.contents = scrollContents;\n    this.contents.on("changed_contents_size", this.updateSlider);\n    this.sliderEventEmitter.on("slider_change", this.updateContentsPosition);\n    this.changeRate(initOption.rate);\n    this.wheelManager = new MouseWheelScrollManager(this);\n    this.wheelManager.on("update_target_position", () => {\n      this.updateSliderPosition();\n    });\n    this.inertialManager = new InertialScrollManager(this);\n    this.inertialManager.on("update_target_position", () => {\n      this.updateSliderPosition();\n    });\n  }\n  /**\n   * スライダーボタンの位置を制限する関数\n   * @return 制限で切り落とされたスライダーボタンの座標値\n   */\n  limitSliderButtonPosition(evt) {\n    const mousePos = SliderViewUtil.getPointerLocalPosition(this, this.isHorizontal, this.dragStartPos, evt);\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.clamp(mousePos, range.max, range.min);\n  }\n  /**\n   * スライダーの割合から、スライダーの位置を取得する\n   * @param\trate\n   * @return\n   */\n  convertRateToPixel(rate) {\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.convertRateToPixel(rate, range.max, range.min);\n  }\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   * @param\tpixel\n   * @return\n   */\n  convertPixelToRate(pixel) {\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.convertPixelToRate(pixel, range.max, range.min);\n  }\n  /**\n   * スライダーボタンの可動範囲を取得する。単位ピクセル\n   */\n  getRangeOfSliderButtonPosition() {\n    const buttonSize = this.slideButtonSize;\n    const ratio = ScrollBarViewUtil.getRatioOfOrigin(this._slideButton, this.isHorizontal);\n    const max = this._maxPosition - (1.0 + ratio) * buttonSize;\n    const min = this._minPosition - ratio * buttonSize;\n    return {\n      max,\n      min\n    };\n  }\n  /**\n   * スライダーボタンのサイズ。\n   * @returns {number}\n   */\n  get slideButtonSize() {\n    this.updateSliderSize();\n    return SliderViewUtil.getSize(this._slideButton, this.isHorizontal);\n  }\n  /**\n   * スクロールバーのボタンサイズ及び位置を更新する。\n   * コンテンツサイズが変更された場合の更新にも利用する。\n   */\n  updateSlider() {\n    if (!this.isUpdatableSliderSize()) return;\n    this.updateSliderSize();\n    this.updateSliderPosition();\n  }\n  /**\n   * 現状のコンテンツおよびマスク位置から、スライダーの割合を算出する。\n   * その割合でスライダーの位置を更新する。\n   */\n  updateSliderPosition() {\n    const rate = this.contents.getScrollPositionAsRate(this.isHorizontal);\n    this.changeRate(rate);\n  }\n  isUpdatableSliderSize() {\n    var _a, _b;\n    return ((_a = this.contents) === null || _a === void 0 ? void 0 : _a.target) != null && ((_b = this.contents) === null || _b === void 0 ? void 0 : _b.mask) != null && this._slideButton != null;\n  }\n  /**\n   * スライダーボタンのサイズの伸縮を行う。\n   */\n  updateSliderSize() {\n    if (!this.isUpdatableSliderSize()) return;\n    const fullSize = this._maxPosition - this._minPosition;\n    const displayRate = this.contents.getDisplayRate(this.isHorizontal);\n    const sliderSize = fullSize * displayRate;\n    SliderViewUtil.setSize(this._slideButton, this.isHorizontal, sliderSize);\n    this.updateSliderVisible();\n  }\n  /**\n   * autoHideの条件に一致するかを判定し、表示を切り替える。\n   * @private\n   */\n  updateSliderVisible() {\n    this._slideButton.visible = !this.isHidden;\n    this._slideButton.eventMode = this.isHidden ? "none" : "static";\n  }\n  /**\n   * autoHideの条件に一致するかを判定する\n   */\n  get isHidden() {\n    //autoHideが設定されていない場合は常に表示\n    if (!this.autoHide) return false;\n    return this.contents.getDisplayRate(this.isHorizontal) === 1.0;\n  }\n  /**\n   * rate値を元にコンテンツをスクロールする。\n   * @param {number} rate\n   */\n  updateContentsPositionWithRate(rate) {\n    this.contents.scroll(rate, this.isHorizontal);\n  }\n  onPressedSliderButton(e) {\n    super.onPressedSliderButton(e);\n    this.scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n  onMoveSlider(e) {\n    super.onMoveSlider(e);\n    this.scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n  onPressBase(evt) {\n    if (this.isHidden) return;\n    super.onPressBase(evt);\n    this.scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n  onDisposeFunction(e) {\n    this.contents.dispose();\n    super.onDisposeFunction(e);\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarViewUtil.js\n\nclass ScrollBarViewUtil {\n  /**\n   * ターゲットコンテンツが、マスク領域内に収まる座標値を取得する。\n   * @param target\n   * @param mask\n   * @param isHorizontal\n   */\n  static getClampedTargetPosition(target, mask, isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const targetSize = getSize(target, isHorizontal);\n    const maskSize = getSize(mask, isHorizontal);\n    const minPos = Math.min(-targetSize + maskSize, 0.0);\n    const pos = SliderViewUtil.getPosition(target, isHorizontal);\n    return SliderViewUtil.clamp(pos, 0, minPos);\n  }\n  /**\n   * ターゲットコンテンツの位置を、マスク領域内に丸め込む。\n   * @param target\n   * @param mask\n   * @param position\n   * @param isHorizontal\n   */\n  static clampTargetPosition(target, mask, position, isHorizontal) {\n    SliderViewUtil.setPosition(target, isHorizontal, position);\n    const clampedPos = this.getClampedTargetPosition(target, mask, isHorizontal);\n    SliderViewUtil.setPosition(target, isHorizontal, clampedPos);\n  }\n  static getRatioOfOrigin(displayObj, isHorizontal) {\n    const bounds = SliderViewUtil.getContentsBounds(displayObj);\n    const size = isHorizontal ? bounds.width : bounds.height;\n    const position = isHorizontal ? bounds.x : bounds.y;\n    const ratio = position / size;\n    if (ratio > 0) {\n      console.warn(`${displayObj.name} : ボタンサイズが不適切です。ボタンの矩形内に原点が収まっていません。スクロールバーボタンは原点を囲む矩形としてください。`);\n    }\n    return ratio;\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/index.js\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./esm/SliderViewUtil.js\n\n\nclass SliderViewUtil {\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   */\n  static convertPixelToRate(pixel, max, min) {\n    if (max <= min) {\n      return 0.0;\n    }\n    const rate = (pixel - min) / (max - min) * SliderView.MAX_RATE;\n    return SliderViewUtil.clamp(rate, SliderView.MAX_RATE, 0.0);\n  }\n  static convertRateToPixel(rate, max, min) {\n    const pix = (max - min) * rate / SliderView.MAX_RATE + min;\n    return SliderViewUtil.clamp(pix, max, min);\n  }\n  /**\n   * ディスプレイオブジェクトからスクロール方向の座標値を取り出す\n   * @return displayObjの座標値。単位ピクセル\n   */\n  static getPosition(displayObj, isHorizontal) {\n    if (isHorizontal) {\n      return displayObj.x;\n    }\n    return displayObj.y;\n  }\n  static getPointerEventPosition(e, isHorizontal) {\n    if (e instanceof lib/* FederatedPointerEvent */.nRP) {\n      return SliderViewUtil.getPosition(e.global, isHorizontal);\n    } else {\n      return SliderViewUtil.getPosition(new lib/* Point */.E9j(e.offsetX, e.offsetY), isHorizontal);\n    }\n  }\n  /**\n   * ディスプレイオブジェクトにスクロール方向の座標値を設定する\n   */\n  static setPosition(displayObj, isHorizontal, position) {\n    if (!displayObj) return;\n    if (isHorizontal) {\n      displayObj.x = position;\n    } else {\n      displayObj.y = position;\n    }\n  }\n  /**\n   * スクロール方向の高さ、もしくは幅を取得する。単位ピクセル\n   */\n  static getSize(displayObj, isHorizontal) {\n    const size = SliderViewUtil.getContentsBounds(displayObj);\n    if (isHorizontal) {\n      return size.width * displayObj.scale.x;\n    } else {\n      return size.height * displayObj.scale.y;\n    }\n  }\n  /**\n   * スクロール方向の高さ、もしくは幅を設定する。\n   * @param displayObj\n   * @param isHorizontal\n   * @param amount width or height, range : 0 ~ displayObj.size.width or height, unit : px\n   */\n  static setSize(displayObj, isHorizontal, amount) {\n    const size = SliderViewUtil.getContentsBounds(displayObj);\n    if (isHorizontal) {\n      displayObj.scale.x = amount / size.width;\n    } else {\n      displayObj.scale.y = amount / size.height;\n    }\n  }\n  static clamp(num, max, min) {\n    num = Math.max(num, min);\n    num = Math.min(num, max);\n    return num;\n  }\n  static getContentsBounds(displayObj) {\n    if (displayObj.hitArea) return displayObj.hitArea;\n    return displayObj.getLocalBounds();\n  }\n  static getRootContainer(canvas, button) {\n    if (canvas) {\n      return canvas;\n    }\n    let parent = button.parent;\n    while (parent.parent) {\n      parent = parent.parent;\n    }\n    return parent;\n  }\n  static addChildParts(parent, obj) {\n    var _a;\n    if (!obj) return;\n    (_a = obj.parent) === null || _a === void 0 ? void 0 : _a.removeChild(obj);\n    parent.addChild(obj);\n  }\n  static getPointerLocalPosition(displayObj, isHorizontal, dragStartPos, evt) {\n    const getLocalPos = () => {\n      if (evt instanceof lib/* FederatedPointerEvent */.nRP) {\n        return displayObj.toLocal(evt.global);\n      }\n      return displayObj.toLocal(new lib/* Point */.E9j(evt.offsetX, evt.offsetY));\n    };\n    const localPos = getLocalPos();\n    if (isHorizontal) {\n      return localPos.x - dragStartPos.x;\n    } else {\n      return localPos.y - dragStartPos.y;\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo_scrollbar.js\n\n\n\nconst onDomContentsLoaded = () => {\n  const app = new lib/* Application */.MxU({\n    width: 800,\n    height: 800\n  });\n  document.body.appendChild(app.view);\n  lib/* Ticker.shared.add */.vB5.shared.add(e => {\n    tween_esm/* default.update */.ZP.update(performance.now());\n  });\n  const scrollbar = initScrollBar(app.stage, app.view);\n  const addButton = label => {\n    const btnPlus = document.createElement("button");\n    btnPlus.innerText = label;\n    document.body.appendChild(btnPlus);\n    return btnPlus;\n  };\n  const btnPlus = addButton("Contents Size +");\n  const btnMinus = addButton("Contents Size -");\n  const changeSize = dif => {\n    const scrollPosition = scrollbar.rate;\n    overrideContents(scrollbar.contents.target, dif);\n    scrollbar.updateSlider();\n    scrollbar.changeRate(scrollPosition);\n  };\n  const onPlus = () => {\n    changeSize(64);\n  };\n  const onMinus = () => {\n    changeSize(-64);\n  };\n  btnPlus.addEventListener("click", onPlus);\n  btnMinus.addEventListener("click", onMinus);\n};\n\n/**\n * スクロールバーの実装サンプル\n * @param stage\n */\nconst initScrollBar = (stage, view) => {\n  const SCROLLBAR_W = 16;\n  const SCROLLBAR_H = 360;\n  const SCROLLBAR_Y = 120;\n  const CONTENTS_W = 240;\n  const container = new lib/* Container */.W20();\n  stage.addChild(container);\n  container.x = 32;\n  container.y = SCROLLBAR_Y;\n  const contents = getScrollBarOption(CONTENTS_W, SCROLLBAR_H, container);\n  const scrollbar = new ScrollBarView({\n    base: getScrollBarBase(SCROLLBAR_W, SCROLLBAR_H, 0x0000ff),\n    button: getScrollBarButton(SCROLLBAR_W, 0xffff00),\n    minPosition: 0,\n    maxPosition: SCROLLBAR_H,\n    rate: 35.0,\n    isHorizontal: false,\n    canvas: view\n  }, contents);\n  stage.addChild(scrollbar);\n  scrollbar.x = container.x + CONTENTS_W;\n  scrollbar.y = SCROLLBAR_Y;\n  scrollbar.sliderEventEmitter.on("slider_change", e => {\n    // console.log(e);\n  });\n\n  /**\n   * スクロール動作を確認するために、故意にマスクを外しています。\n   */\n  contents.target.mask = null;\n  return scrollbar;\n};\nconst getScrollBarBase = (w, h, color) => {\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(color);\n  g.drawRect(0, 0, w, h);\n  g.hitArea = new lib/* Rectangle */.AeJ(0, 0, w, h);\n  return g;\n};\nconst getScrollBarButton = (width, color) => {\n  const ratio = 0.5;\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(color);\n  g.drawRect(-width / 2, -width * ratio, width, width);\n  g.hitArea = new lib/* Rectangle */.AeJ(-width / 2, -width * ratio, width, width);\n  g.x = width / 2;\n  return g;\n};\nconst getScrollBarContents = (color, w, h, container, alpha = 1.0) => {\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(color, alpha);\n  g.drawRect(0, 0, w, h);\n  g.hitArea = new lib/* Rectangle */.AeJ(0, 0, w, h);\n  container.addChild(g);\n  return g;\n};\nconst overrideContents = (g, difHeight) => {\n  const fill = g.fill.clone();\n  console.log(fill);\n  const hitArea = g.hitArea.clone();\n  hitArea.height += difHeight;\n  g.clear();\n  g.beginFill(fill.color, fill.alpha);\n  g.drawRect(hitArea.x, hitArea.y, hitArea.width, hitArea.height);\n  g.hitArea = new lib/* Rectangle */.AeJ(hitArea.x, hitArea.y, hitArea.width, hitArea.height);\n};\nconst getScrollBarOption = (contentsW, scrollBarH, container) => {\n  const targetContents = getScrollBarContents(0xff00ff, contentsW, scrollBarH * 2, container);\n  const contentsMask = getScrollBarContents(0x0000ff, contentsW, scrollBarH, container, 0.3);\n  return new ScrollBarContents(targetContents, contentsMask, container);\n};\n\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nif (document.readyState !== "loading") {\n  onDomContentsLoaded();\n} else {\n  document.addEventListener("DOMContentLoaded", onDomContentsLoaded);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM2LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLGtCQUFrQixDQUFDO0VBQzVCQyxXQUFXQSxDQUFDQyxJQUFJLEVBQUU7SUFDZCxJQUFJLENBQUNBLElBQUksR0FBR0EsSUFBSTtFQUNwQjtBQUNKLEM7Ozs7Ozs7O0FDUjBDO0FBQ1A7QUFDUTtBQUNvQztBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1NLFVBQVUsU0FBU0wsNkJBQVMsQ0FBQztFQUN0QyxJQUFJRCxJQUFJQSxDQUFBLEVBQUc7SUFDUCxPQUFPLElBQUksQ0FBQ08sS0FBSztFQUNyQjtFQUNBO0FBQ0o7QUFDQTtFQUNJUixXQUFXQSxDQUFDUyxNQUFNLEVBQUU7SUFDaEIsS0FBSyxDQUFDLENBQUM7SUFDUCxJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJO0lBQ3hCLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUlSLHNCQUFLLENBQUMsQ0FBQztJQUMvQixJQUFJLENBQUNTLFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUN6QixJQUFJLENBQUNDLGtCQUFrQixHQUFHLElBQUlULHNCQUFZLENBQUMsQ0FBQztJQUM1QztBQUNSO0FBQ0E7QUFDQTtJQUNRLElBQUksQ0FBQ1UsU0FBUyxHQUFJQyxDQUFDLElBQUs7TUFDcEIsSUFBSSxDQUFDQyxxQkFBcUIsQ0FBQ0QsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFDRDtBQUNSO0FBQ0E7QUFDQTtJQUNRLElBQUksQ0FBQ0UsVUFBVSxHQUFJRixDQUFDLElBQUs7TUFDckIsSUFBSSxDQUFDRyxZQUFZLENBQUNILENBQUMsQ0FBQztJQUN4QixDQUFDO0lBQ0Q7QUFDUjtBQUNBO0lBQ1EsSUFBSSxDQUFDSSxnQkFBZ0IsR0FBRyxNQUFNO01BQzFCLElBQUksQ0FBQ1AsVUFBVSxHQUFHLEtBQUs7TUFDdkIsSUFBSSxDQUFDUSxtQkFBbUIsQ0FBQ0MsbUJBQW1CLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQ0osVUFBVSxDQUFDO01BQzVFLElBQUksQ0FBQ0ssWUFBWSxDQUFDQyxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQ0osZ0JBQWdCLENBQUM7TUFDekQsSUFBSSxDQUFDRyxZQUFZLENBQUNDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUNKLGdCQUFnQixDQUFDO01BQ2hFLElBQUksQ0FBQ04sa0JBQWtCLENBQUNXLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxJQUFJekIsa0JBQWtCLENBQUMsSUFBSSxDQUFDRSxJQUFJLENBQUMsQ0FBQztJQUM3RixDQUFDO0lBQ0Q7QUFDUjtBQUNBO0FBQ0E7SUFDUSxJQUFJLENBQUN3QixPQUFPLEdBQUlWLENBQUMsSUFBSztNQUNsQixJQUFJLENBQUNXLGlCQUFpQixDQUFDWCxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUNELE1BQU1ZLFVBQVUsR0FBR3RCLHlCQUF5QixDQUFDSSxNQUFNLENBQUM7SUFDcEQsSUFBSSxDQUFDb0IsTUFBTSxHQUFHRixVQUFVLENBQUNFLE1BQU07SUFDL0IsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDQyxRQUFRLENBQUNKLFVBQVUsQ0FBQ0ssSUFBSSxDQUFDO0lBQzNDLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUksQ0FBQ0MsY0FBYyxDQUFDUCxVQUFVLEtBQUssSUFBSSxJQUFJQSxVQUFVLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLFVBQVUsQ0FBQ1EsR0FBRyxDQUFDO0lBQ3ZHLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUksQ0FBQ0YsY0FBYyxDQUFDUCxVQUFVLEtBQUssSUFBSSxJQUFJQSxVQUFVLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLFVBQVUsQ0FBQ1UsSUFBSSxDQUFDO0lBQzVHLElBQUksSUFBSSxDQUFDSixJQUFJLElBQUksSUFBSSxDQUFDRyxRQUFRLEVBQzFCLElBQUksQ0FBQ0gsSUFBSSxDQUFDSSxJQUFJLEdBQUcsSUFBSSxDQUFDRCxRQUFRO0lBQ2xDLElBQUksQ0FBQ2QsWUFBWSxHQUFHLElBQUksQ0FBQ2dCLGdCQUFnQixDQUFDWCxVQUFVLENBQUNZLE1BQU0sQ0FBQztJQUM1RCxJQUFJLENBQUNuQixtQkFBbUIsR0FBR2QsK0JBQStCLENBQUMsSUFBSSxDQUFDdUIsTUFBTSxFQUFFLElBQUksQ0FBQ1AsWUFBWSxDQUFDO0lBQzFGLElBQUksQ0FBQ21CLFlBQVksR0FBR2QsVUFBVSxDQUFDZSxXQUFXO0lBQzFDLElBQUksQ0FBQ0MsWUFBWSxHQUFHaEIsVUFBVSxDQUFDaUIsV0FBVztJQUMxQyxJQUFJLENBQUNsQyxZQUFZLEdBQUdpQixVQUFVLENBQUNqQixZQUFZO0lBQzNDLElBQUksQ0FBQ0YsS0FBSyxHQUFHbUIsVUFBVSxDQUFDMUIsSUFBSTtJQUM1QixJQUFJLENBQUM0QyxVQUFVLENBQUMsSUFBSSxDQUFDckMsS0FBSyxDQUFDO0VBQy9CO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7RUFDSXFDLFVBQVVBLENBQUM1QyxJQUFJLEVBQUU7SUFDYjtJQUNBLElBQUksSUFBSSxDQUFDVyxVQUFVLEVBQ2Y7SUFDSixJQUFJLENBQUNKLEtBQUssR0FBR1AsSUFBSTtJQUNqQixNQUFNNkMsR0FBRyxHQUFHLElBQUksQ0FBQ0Msa0JBQWtCLENBQUMsSUFBSSxDQUFDdkMsS0FBSyxDQUFDO0lBQy9DLElBQUksQ0FBQ3dDLFdBQVcsQ0FBQ0YsR0FBRyxDQUFDO0lBQ3JCLElBQUksQ0FBQ2pDLGtCQUFrQixDQUFDVyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUl6QixrQkFBa0IsQ0FBQyxJQUFJLENBQUNFLElBQUksQ0FBQyxDQUFDO0VBQ3BGO0VBQ0FlLHFCQUFxQkEsQ0FBQ0QsQ0FBQyxFQUFFO0lBQ3JCLElBQUksQ0FBQ0gsVUFBVSxHQUFHLElBQUk7SUFDdEIsTUFBTXFDLE1BQU0sR0FBR2xDLENBQUMsQ0FBQ21DLGFBQWE7SUFDOUIsTUFBTUMsUUFBUSxHQUFHLElBQUksQ0FBQ0MsT0FBTyxDQUFDckMsQ0FBQyxDQUFDc0MsTUFBTSxDQUFDO0lBQ3ZDLElBQUksQ0FBQzFDLFlBQVksQ0FBQzJDLEdBQUcsQ0FBQ0gsUUFBUSxDQUFDSSxDQUFDLEdBQUdOLE1BQU0sQ0FBQ00sQ0FBQyxFQUFFSixRQUFRLENBQUNLLENBQUMsR0FBR1AsTUFBTSxDQUFDTyxDQUFDLENBQUM7SUFDbkUsSUFBSSxDQUFDcEMsbUJBQW1CLENBQUNxQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDeEMsVUFBVSxDQUFDO0lBQ3pFLElBQUksQ0FBQ0ssWUFBWSxDQUFDb0MsRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUN2QyxnQkFBZ0IsQ0FBQztJQUN4RCxJQUFJLENBQUNHLFlBQVksQ0FBQ29DLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUN2QyxnQkFBZ0IsQ0FBQztFQUNuRTtFQUNBRCxZQUFZQSxDQUFDSCxDQUFDLEVBQUU7SUFDWixNQUFNNEMsUUFBUSxHQUFHLElBQUksQ0FBQ0MseUJBQXlCLENBQUM3QyxDQUFDLENBQUM7SUFDbEQsSUFBSSxDQUFDaUMsV0FBVyxDQUFDVyxRQUFRLENBQUM7SUFDMUIsSUFBSSxDQUFDbkQsS0FBSyxHQUFHLElBQUksQ0FBQ3FELGtCQUFrQixDQUFDRixRQUFRLENBQUM7SUFDOUMsSUFBSSxDQUFDOUMsa0JBQWtCLENBQUNXLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSXpCLGtCQUFrQixDQUFDLElBQUksQ0FBQ0UsSUFBSSxDQUFDLENBQUM7RUFDcEY7RUFDQTtBQUNKO0FBQ0E7QUFDQTtFQUNJMkQseUJBQXlCQSxDQUFDRSxHQUFHLEVBQUU7SUFDM0IsTUFBTUgsUUFBUSxHQUFHckQsc0NBQXNDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ0ksWUFBWSxFQUFFLElBQUksQ0FBQ0MsWUFBWSxFQUFFbUQsR0FBRyxDQUFDO0lBQ3hHLE9BQU94RCxvQkFBb0IsQ0FBQ3FELFFBQVEsRUFBRSxJQUFJLENBQUNoQixZQUFZLEVBQUUsSUFBSSxDQUFDRixZQUFZLENBQUM7RUFDL0U7RUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBQ0lPLFdBQVdBLENBQUNXLFFBQVEsRUFBRTtJQUNsQixNQUFNTSxPQUFPLEdBQUloQixNQUFNLElBQUs7TUFDeEIzQyxzQkFBc0IsQ0FBQzJDLE1BQU0sRUFBRSxJQUFJLENBQUN2QyxZQUFZLEVBQUVpRCxRQUFRLEdBQUdyRCwwQkFBMEIsQ0FBQzJDLE1BQU0sRUFBRSxJQUFJLENBQUN2QyxZQUFZLENBQUMsQ0FBQztJQUN2SCxDQUFDO0lBQ0Q7SUFDQSxJQUFJLElBQUksQ0FBQ3VCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQ0csUUFBUSxFQUFFO01BQzdCNkIsT0FBTyxDQUFDLElBQUksQ0FBQ2hDLElBQUksQ0FBQztJQUN0QjtJQUNBO0lBQ0EsSUFBSSxJQUFJLENBQUNHLFFBQVEsRUFBRTtNQUNmNkIsT0FBTyxDQUFDLElBQUksQ0FBQzdCLFFBQVEsQ0FBQztJQUMxQjtJQUNBO0lBQ0E5QiwwQkFBMEIsQ0FBQyxJQUFJLENBQUNnQixZQUFZLEVBQUUsSUFBSSxDQUFDWixZQUFZLEVBQUVpRCxRQUFRLENBQUM7RUFDOUU7RUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBQ0lVLFdBQVdBLENBQUNQLEdBQUcsRUFBRTtJQUNiLElBQUksQ0FBQ25ELFlBQVksQ0FBQzJDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLElBQUksQ0FBQ3JDLFVBQVUsQ0FBQzZDLEdBQUcsQ0FBQztJQUNwQixJQUFJLENBQUNqRCxrQkFBa0IsQ0FBQ1csSUFBSSxDQUFDLHdCQUF3QixFQUFFLElBQUl6QixrQkFBa0IsQ0FBQyxJQUFJLENBQUNFLElBQUksQ0FBQyxDQUFDO0VBQzdGO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUNJOEMsa0JBQWtCQSxDQUFDOUMsSUFBSSxFQUFFO0lBQ3JCLE9BQU9LLGlDQUFpQyxDQUFDTCxJQUFJLEVBQUUsSUFBSSxDQUFDMEMsWUFBWSxFQUFFLElBQUksQ0FBQ0YsWUFBWSxDQUFDO0VBQ3hGO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUNJb0Isa0JBQWtCQSxDQUFDUyxLQUFLLEVBQUU7SUFDdEIsT0FBT2hFLGlDQUFpQyxDQUFDZ0UsS0FBSyxFQUFFLElBQUksQ0FBQzNCLFlBQVksRUFBRSxJQUFJLENBQUNGLFlBQVksQ0FBQztFQUN6RjtFQUNBO0FBQ0o7QUFDQTtBQUNBO0VBQ0lWLFFBQVFBLENBQUN3QyxLQUFLLEVBQUU7SUFDWkEsS0FBSyxDQUFDQyxTQUFTLEdBQUcsUUFBUTtJQUMxQkQsS0FBSyxDQUFDYixFQUFFLENBQUMsWUFBWSxFQUFHM0MsQ0FBQyxJQUFLO01BQzFCLElBQUksQ0FBQ3NELFdBQVcsQ0FBQ3RELENBQUMsQ0FBQztJQUN2QixDQUFDLENBQUM7SUFDRlQsNEJBQTRCLENBQUMsSUFBSSxFQUFFaUUsS0FBSyxDQUFDO0lBQ3pDLE9BQU9BLEtBQUs7RUFDaEI7RUFDQXJDLGNBQWNBLENBQUNxQyxLQUFLLEVBQUU7SUFDbEIsSUFBSUEsS0FBSyxJQUFJLElBQUksRUFDYjtJQUNKQSxLQUFLLENBQUNDLFNBQVMsR0FBRyxNQUFNO0lBQ3hCbEUsNEJBQTRCLENBQUMsSUFBSSxFQUFFaUUsS0FBSyxDQUFDO0lBQ3pDLE9BQU9BLEtBQUs7RUFDaEI7RUFDQWpDLGdCQUFnQkEsQ0FBQ2lDLEtBQUssRUFBRTtJQUNwQkEsS0FBSyxDQUFDYixFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQzVDLFNBQVMsQ0FBQztJQUN2Q3lELEtBQUssQ0FBQ0MsU0FBUyxHQUFHLFFBQVE7SUFDMUJsRSw0QkFBNEIsQ0FBQyxJQUFJLEVBQUVpRSxLQUFLLENBQUM7SUFDekMsT0FBT0EsS0FBSztFQUNoQjtFQUNBO0FBQ0o7QUFDQTtFQUNJN0MsaUJBQWlCQSxDQUFDWCxDQUFDLEVBQUU7SUFDakIsSUFBSSxDQUFDMkQsa0JBQWtCLENBQUMsQ0FBQztJQUN6QixJQUFJLENBQUM1QyxLQUFLLENBQUM0QyxrQkFBa0IsQ0FBQyxDQUFDO0lBQy9CLElBQUksQ0FBQ3BELFlBQVksQ0FBQ29ELGtCQUFrQixDQUFDLENBQUM7SUFDdEMsSUFBSSxDQUFDQyxjQUFjLENBQUMsQ0FBQztFQUN6QjtBQUNKO0FBQ0FwRSxVQUFVLENBQUNxRSxRQUFRLEdBQUcsR0FBRyxDOztBQzNMekI7QUFDQTtBQUNBO0FBQ2lDO0FBQ2U7QUFDekMsTUFBTXZFLG9CQUFvQixDQUFDO0VBQzlCLE9BQU91QixJQUFJQSxDQUFDbkIsTUFBTSxFQUFFO0lBQ2hCLElBQUlxRSxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsRUFBRTtJQUNkLElBQUksQ0FBQ0MsS0FBSyxDQUFDeEUsTUFBTSxDQUFDO0lBQ2xCLElBQUlBLE1BQU0sQ0FBQ1IsSUFBSSxJQUFJLElBQUksRUFBRTtNQUNyQlEsTUFBTSxDQUFDUixJQUFJLEdBQUdpRixJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEVBQUUxRSxNQUFNLENBQUNSLElBQUksQ0FBQztNQUN0Q1EsTUFBTSxDQUFDUixJQUFJLEdBQUdpRixJQUFJLENBQUNFLEdBQUcsQ0FBQzdFLG1CQUFtQixFQUFFRSxNQUFNLENBQUNSLElBQUksQ0FBQztJQUM1RDtJQUNBLENBQUM2RSxFQUFFLEdBQUdyRSxNQUFNLENBQUNSLElBQUksTUFBTSxJQUFJLElBQUk2RSxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUdBLEVBQUUsR0FBSXJFLE1BQU0sQ0FBQ1IsSUFBSSxHQUFHLEdBQUk7SUFDdkUsQ0FBQzhFLEVBQUUsR0FBR3RFLE1BQU0sQ0FBQ2lDLFdBQVcsTUFBTSxJQUFJLElBQUlxQyxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUdBLEVBQUUsR0FBSXRFLE1BQU0sQ0FBQ2lDLFdBQVcsR0FBRyxHQUFJO0lBQ3JGLENBQUNzQyxFQUFFLEdBQUd2RSxNQUFNLENBQUNDLFlBQVksTUFBTSxJQUFJLElBQUlzRSxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUdBLEVBQUUsR0FBSXZFLE1BQU0sQ0FBQ0MsWUFBWSxHQUFHLElBQUs7SUFDeEYsT0FBT0QsTUFBTTtFQUNqQjtFQUNBLE9BQU93RSxLQUFLQSxDQUFDeEUsTUFBTSxFQUFFO0lBQ2pCLElBQUksQ0FBQzRFLFVBQVUsQ0FBQzVFLE1BQU0sQ0FBQ3VCLElBQUksRUFBRSxNQUFNLENBQUM7SUFDcEMsSUFBSSxDQUFDcUQsVUFBVSxDQUFDNUUsTUFBTSxDQUFDOEIsTUFBTSxFQUFFLFFBQVEsQ0FBQztJQUN4QyxJQUFJLENBQUM4QyxVQUFVLENBQUM1RSxNQUFNLENBQUM0QixJQUFJLEVBQUUsTUFBTSxDQUFDO0lBQ3BDLElBQUksQ0FBQ2dELFVBQVUsQ0FBQzVFLE1BQU0sQ0FBQzBCLEdBQUcsRUFBRSxLQUFLLENBQUM7RUFDdEM7RUFDQSxPQUFPa0QsVUFBVUEsQ0FBQ0MsR0FBRyxFQUFFQyxVQUFVLEVBQUU7SUFDL0IsSUFBSUQsR0FBRyxJQUFJLElBQUksRUFDWDtJQUNKLE1BQU1FLE1BQU0sR0FBR2xGLGdDQUFnQyxDQUFDZ0YsR0FBRyxDQUFDO0lBQ3BELElBQUlFLE1BQU0sQ0FBQ0UsS0FBSyxLQUFLLENBQUMsSUFDbEJGLE1BQU0sQ0FBQ0csTUFBTSxLQUFLLENBQUMsSUFDbkJILE1BQU0sQ0FBQ0ksSUFBSSxLQUFLZiw2QkFBVyxFQUFFO01BQzdCLE1BQU0sSUFBSWlCLEtBQUssQ0FBRSxnQkFBZVAsVUFBVyx1R0FBc0csQ0FBQztJQUN0SjtJQUNBLElBQUlELEdBQUcsQ0FBQ1MsTUFBTSxFQUFFO01BQ1pDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFFLDBHQUF5RyxDQUFDO0lBQzVIO0VBQ0o7QUFDSixDOzs7O0FDckMyQztBQUNPO0FBQ2hCO0FBQ0c7QUFDRTtBQUN2QztBQUNBO0FBQ0E7QUFDTyxNQUFNSyxxQkFBcUIsU0FBU2xHLHNCQUFZLENBQUM7RUFDcEQsSUFBSW1HLEtBQUtBLENBQUEsRUFBRztJQUNSLE9BQU8sSUFBSSxDQUFDQyxNQUFNO0VBQ3RCO0VBQ0F4RyxXQUFXQSxDQUFDeUcsYUFBYSxFQUFFO0lBQ3ZCLEtBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxLQUFLO0lBQzdCLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUcsR0FBRztJQUM5QixJQUFJLENBQUNILE1BQU0sR0FBRyxHQUFHO0lBQ2pCLElBQUksQ0FBQzVGLFVBQVUsR0FBRyxLQUFLO0lBQ3ZCLElBQUksQ0FBQ2dHLFFBQVEsR0FBRyxLQUFLO0lBQ3JCLElBQUksQ0FBQ0MsV0FBVyxHQUFJOUYsQ0FBQyxJQUFLO01BQ3RCLElBQUksQ0FBQytGLGFBQWEsQ0FBQy9GLENBQUMsQ0FBQztNQUNyQixJQUFJLENBQUNILFVBQVUsR0FBRyxJQUFJO01BQ3RCLElBQUksQ0FBQzRGLE1BQU0sR0FBRyxHQUFHO01BQ2pCLElBQUksSUFBSSxDQUFDTyxLQUFLLEVBQ1YsSUFBSSxDQUFDQyxZQUFZLENBQUMsQ0FBQztNQUN2QixJQUFJLENBQUNDLGVBQWUsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFDRCxJQUFJLENBQUNDLFdBQVcsR0FBSW5HLENBQUMsSUFBSztNQUN0QixJQUFJLElBQUksQ0FBQ29HLE9BQU8sSUFBSSxJQUFJLEVBQ3BCO01BQ0osTUFBTUMsS0FBSyxHQUFHLElBQUksQ0FBQ0MsVUFBVSxDQUFDdEcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDb0csT0FBTztNQUMvQyxJQUFJLENBQUNYLE1BQU0sR0FBR1ksS0FBSztNQUNuQixJQUFJLENBQUNFLGlCQUFpQixDQUFDRixLQUFLLEdBQUcsSUFBSSxDQUFDRyx1QkFBdUIsQ0FBQyxDQUFDLENBQUM7TUFDOUQsSUFBSSxDQUFDVCxhQUFhLENBQUMvRixDQUFDLENBQUM7SUFDekIsQ0FBQztJQUNELElBQUksQ0FBQ3lHLFNBQVMsR0FBRyxNQUFNO01BQ25CLElBQUksQ0FBQ0Msa0JBQWtCLENBQUMsQ0FBQztNQUN6QixJQUFJLENBQUM3RyxVQUFVLEdBQUcsS0FBSztNQUN2QixJQUFJLENBQUM4RyxNQUFNLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBQ0QsSUFBSSxDQUFDQSxNQUFNLEdBQUcsTUFBTTtNQUNoQixJQUFJNUMsRUFBRTtNQUNOLElBQUksSUFBSSxDQUFDbEUsVUFBVSxFQUNmO01BQ0osSUFBSSxJQUFJLENBQUM0RixNQUFNLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQ21CLHFCQUFxQixDQUFDLENBQUMsS0FBSyxHQUFHLEVBQzNEO01BQ0osSUFBSSxDQUFDN0MsRUFBRSxHQUFHLElBQUksQ0FBQ2lDLEtBQUssTUFBTSxJQUFJLElBQUlqQyxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEVBQUUsQ0FBQzhDLFNBQVMsQ0FBQyxDQUFDLEVBQ3JFO01BQ0o7TUFDQSxNQUFNQyxvQkFBb0IsR0FBRyxJQUFJLENBQUNOLHVCQUF1QixDQUFDLENBQUM7TUFDM0QsSUFBSSxDQUFDZixNQUFNLElBQUksSUFBSSxDQUFDRSxnQkFBZ0IsR0FBR21CLG9CQUFvQjtNQUMzRCxJQUFJLENBQUNQLGlCQUFpQixDQUFDLElBQUksQ0FBQ2QsTUFBTSxDQUFDO01BQ25DLElBQUl0QixJQUFJLENBQUM0QyxHQUFHLENBQUMsSUFBSSxDQUFDdEIsTUFBTSxDQUFDLEdBQUcsR0FBRyxFQUMzQjtNQUNKO01BQ0EsSUFBSSxDQUFDQSxNQUFNLEdBQUcsR0FBRztNQUNqQixNQUFNdUIsS0FBSyxHQUFHO1FBQUV2RSxDQUFDLEVBQUUsSUFBSSxDQUFDd0UsYUFBYSxDQUFDO01BQUUsQ0FBQztNQUN6QyxJQUFJLENBQUNoQixZQUFZLENBQUMsQ0FBQztNQUNuQixJQUFJLENBQUNELEtBQUssR0FBRyxJQUFJWix1QkFBSyxDQUFDLElBQUksQ0FBQ00sYUFBYSxDQUFDd0IsUUFBUSxDQUFDaEYsTUFBTSxDQUFDLENBQ3JEaUYsRUFBRSxDQUFDSCxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQ2RJLFFBQVEsQ0FBQyxNQUFNO1FBQ2hCLElBQUksQ0FBQzNHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztNQUN2QyxDQUFDLENBQUMsQ0FDRzRHLE1BQU0sQ0FBQ2xDLDRDQUFnQixDQUFDLENBQ3hCcUMsS0FBSyxDQUFDLENBQUM7SUFDaEIsQ0FBQztJQUNELElBQUksQ0FBQ0MsWUFBWSxHQUFHLE1BQU07TUFDdEIsSUFBSSxDQUFDaEMsTUFBTSxHQUFHLEdBQUc7TUFDakIsSUFBSSxDQUFDUSxZQUFZLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBQ0QsSUFBSSxDQUFDQSxZQUFZLEdBQUcsTUFBTTtNQUN0QixJQUFJLElBQUksQ0FBQ0QsS0FBSyxFQUFFO1FBQ1osSUFBSSxDQUFDQSxLQUFLLENBQUMwQixJQUFJLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMxQixLQUFLLEdBQUcyQixTQUFTO01BQzFCO0lBQ0osQ0FBQztJQUNELElBQUksQ0FBQ2pDLGFBQWEsR0FBR0EsYUFBYTtJQUNsQ0EsYUFBYSxDQUFDa0MscUJBQXFCLENBQUNqRixFQUFFLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDOEUsWUFBWSxDQUFDO0lBQ2hGLE1BQU12RixNQUFNLEdBQUcsSUFBSSxDQUFDd0QsYUFBYSxDQUFDd0IsUUFBUSxDQUFDaEYsTUFBTTtJQUNqREEsTUFBTSxDQUFDdUIsU0FBUyxHQUFHLFFBQVE7SUFDM0IsSUFBSSxDQUFDK0QsS0FBSyxDQUFDLENBQUM7RUFDaEI7RUFDQUEsS0FBS0EsQ0FBQSxFQUFHO0lBQ0osSUFBSSxJQUFJLENBQUMzQixRQUFRLEVBQ2I7SUFDSixJQUFJLENBQUNBLFFBQVEsR0FBRyxJQUFJO0lBQ3BCLE1BQU0zRCxNQUFNLEdBQUcsSUFBSSxDQUFDd0QsYUFBYSxDQUFDd0IsUUFBUSxDQUFDaEYsTUFBTTtJQUNqREEsTUFBTSxDQUFDUyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQ21ELFdBQVcsQ0FBQztJQUMxQ1QseUNBQWlCLENBQUMsSUFBSSxDQUFDc0IsTUFBTSxDQUFDO0VBQ2xDO0VBQ0FlLElBQUlBLENBQUEsRUFBRztJQUNILElBQUksQ0FBQyxJQUFJLENBQUM3QixRQUFRLEVBQ2Q7SUFDSixJQUFJLENBQUNBLFFBQVEsR0FBRyxLQUFLO0lBQ3JCLE1BQU0zRCxNQUFNLEdBQUcsSUFBSSxDQUFDd0QsYUFBYSxDQUFDd0IsUUFBUSxDQUFDaEYsTUFBTTtJQUNqREEsTUFBTSxDQUFDMUIsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUNzRixXQUFXLENBQUM7SUFDM0MsSUFBSSxDQUFDWSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3pCLElBQUksQ0FBQ2UsWUFBWSxDQUFDLENBQUM7SUFDbkJwQywrQ0FBb0IsQ0FBQyxJQUFJLENBQUNzQixNQUFNLENBQUM7RUFDckM7RUFDQVQsZUFBZUEsQ0FBQSxFQUFHO0lBQ2QsSUFBSSxDQUFDOEIsa0JBQWtCLENBQUMsSUFBSSxDQUFDO0VBQ2pDO0VBQ0F0QixrQkFBa0JBLENBQUEsRUFBRztJQUNqQixJQUFJLENBQUNzQixrQkFBa0IsQ0FBQyxLQUFLLENBQUM7RUFDbEM7RUFDQUEsa0JBQWtCQSxDQUFDQyxJQUFJLEVBQUU7SUFDckIsSUFBSWxFLEVBQUU7SUFDTixNQUFNN0IsTUFBTSxHQUFHLElBQUksQ0FBQ3dELGFBQWEsQ0FBQ3dCLFFBQVEsQ0FBQ2hGLE1BQU07SUFDakQsTUFBTWdHLFVBQVUsR0FBRyxDQUFDbkUsRUFBRSxHQUFHLElBQUksQ0FBQzJCLGFBQWEsQ0FBQzVFLE1BQU0sTUFBTSxJQUFJLElBQUlpRCxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUdBLEVBQUUsR0FBRzdCLE1BQU07SUFDM0YsTUFBTWlHLGNBQWMsR0FBR0EsQ0FBQ0YsSUFBSSxFQUFFQyxVQUFVLEVBQUVFLEtBQUssRUFBRUMsUUFBUSxLQUFLO01BQzFELElBQUlKLElBQUksRUFBRTtRQUNOQyxVQUFVLENBQUN4RixnQkFBZ0IsQ0FBQzBGLEtBQUssRUFBRUMsUUFBUSxDQUFDO01BQ2hELENBQUMsTUFDSTtRQUNESCxVQUFVLENBQUM1SCxtQkFBbUIsQ0FBQzhILEtBQUssRUFBRUMsUUFBUSxDQUFDO01BQ25EO0lBQ0osQ0FBQztJQUNERixjQUFjLENBQUNGLElBQUksRUFBRUMsVUFBVSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMvQixXQUFXLENBQUM7SUFDakVnQyxjQUFjLENBQUNGLElBQUksRUFBRS9GLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDdUUsU0FBUyxDQUFDO0lBQ3pEMEIsY0FBYyxDQUFDRixJQUFJLEVBQUUvRixNQUFNLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxDQUFDdUUsU0FBUyxDQUFDO0VBQ3BFO0VBQ0FILFVBQVVBLENBQUN0RyxDQUFDLEVBQUU7SUFDVixPQUFPVCxzQ0FBc0MsQ0FBQ1MsQ0FBQyxFQUFFLElBQUksQ0FBQzBGLGFBQWEsQ0FBQy9GLFlBQVksQ0FBQztFQUNyRjtFQUNBb0csYUFBYUEsQ0FBQy9GLENBQUMsRUFBRTtJQUNiLElBQUksQ0FBQ29HLE9BQU8sR0FBRyxJQUFJLENBQUNFLFVBQVUsQ0FBQ3RHLENBQUMsQ0FBQztFQUNyQztFQUNBdUcsaUJBQWlCQSxDQUFDRixLQUFLLEVBQUU7SUFDckIsTUFBTW5FLE1BQU0sR0FBRyxJQUFJLENBQUN3RCxhQUFhLENBQUN3QixRQUFRLENBQUNoRixNQUFNO0lBQ2pELE1BQU12QyxZQUFZLEdBQUcsSUFBSSxDQUFDK0YsYUFBYSxDQUFDL0YsWUFBWTtJQUNwRCxNQUFNNEksVUFBVSxHQUFHaEosMEJBQTBCLENBQUMyQyxNQUFNLEVBQUV2QyxZQUFZLENBQUM7SUFDbkVKLDBCQUEwQixDQUFDMkMsTUFBTSxFQUFFdkMsWUFBWSxFQUFFNEksVUFBVSxHQUFHbEMsS0FBSyxDQUFDO0lBQ3BFLElBQUksQ0FBQzVGLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztFQUN2QztFQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFDSStGLHVCQUF1QkEsQ0FBQSxFQUFHO0lBQ3RCLE1BQU1nQyxNQUFNLEdBQUcsSUFBSSxDQUFDNUIscUJBQXFCLENBQUMsQ0FBQztJQUMzQyxJQUFJRSxvQkFBb0IsR0FBRyxDQUFDLElBQUksQ0FBQ2xCLG1CQUFtQixHQUFHNEMsTUFBTSxJQUFJLElBQUksQ0FBQzVDLG1CQUFtQjtJQUN6RixJQUFJa0Isb0JBQW9CLEdBQUcsR0FBRyxFQUMxQkEsb0JBQW9CLEdBQUcsR0FBRztJQUM5QixPQUFPQSxvQkFBb0I7RUFDL0I7RUFDQTtBQUNKO0FBQ0E7RUFDSUYscUJBQXFCQSxDQUFBLEVBQUc7SUFDcEIsTUFBTTFFLE1BQU0sR0FBRyxJQUFJLENBQUN3RCxhQUFhLENBQUN3QixRQUFRLENBQUNoRixNQUFNO0lBQ2pELE1BQU12QyxZQUFZLEdBQUcsSUFBSSxDQUFDK0YsYUFBYSxDQUFDL0YsWUFBWTtJQUNwRCxNQUFNNEksVUFBVSxHQUFHaEosMEJBQTBCLENBQUMyQyxNQUFNLEVBQUV2QyxZQUFZLENBQUM7SUFDbkUsTUFBTThJLFVBQVUsR0FBRyxJQUFJLENBQUN4QixhQUFhLENBQUMsQ0FBQztJQUN2QyxPQUFPOUMsSUFBSSxDQUFDNEMsR0FBRyxDQUFDd0IsVUFBVSxHQUFHRSxVQUFVLENBQUM7RUFDNUM7RUFDQXhCLGFBQWFBLENBQUEsRUFBRztJQUNaLE1BQU0vRSxNQUFNLEdBQUcsSUFBSSxDQUFDd0QsYUFBYSxDQUFDd0IsUUFBUSxDQUFDaEYsTUFBTTtJQUNqRCxNQUFNdkMsWUFBWSxHQUFHLElBQUksQ0FBQytGLGFBQWEsQ0FBQy9GLFlBQVk7SUFDcEQsT0FBTzJGLDBDQUEwQyxDQUFDcEQsTUFBTSxFQUFFLElBQUksQ0FBQ3dELGFBQWEsQ0FBQ3dCLFFBQVEsQ0FBQzVGLElBQUksRUFBRTNCLFlBQVksQ0FBQztFQUM3RztBQUNKLEM7O0FDbEsyQztBQUNOO0FBQ0U7QUFDdkM7QUFDQTtBQUNBO0FBQ08sTUFBTWdKLHVCQUF1QixTQUFTdEosc0JBQVksQ0FBQztFQUN0REosV0FBV0EsQ0FBQ3lHLGFBQWEsRUFBRTtJQUN2QixLQUFLLENBQUMsQ0FBQztJQUNQLElBQUksQ0FBQ1csS0FBSyxHQUFHLEVBQUU7SUFDZixJQUFJLENBQUNSLFFBQVEsR0FBRyxLQUFLO0lBQ3JCO0lBQ0EsSUFBSSxDQUFDK0MsWUFBWSxHQUFJNUksQ0FBQyxJQUFLO01BQ3ZCLE1BQU02SSxLQUFLLEdBQUc3SSxDQUFDLENBQUM4SSxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDekMsS0FBSyxHQUFHLElBQUksQ0FBQ0EsS0FBSztNQUNyRCxJQUFJLENBQUMwQyxNQUFNLENBQUNGLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBQ0QsSUFBSSxDQUFDbkQsYUFBYSxHQUFHQSxhQUFhO0lBQ2xDLE1BQU14RCxNQUFNLEdBQUcsSUFBSSxDQUFDd0QsYUFBYSxDQUFDd0IsUUFBUSxDQUFDaEYsTUFBTTtJQUNqREEsTUFBTSxDQUFDdUIsU0FBUyxHQUFHLFFBQVE7SUFDM0IsSUFBSSxDQUFDK0QsS0FBSyxDQUFDLENBQUM7RUFDaEI7RUFDQUEsS0FBS0EsQ0FBQSxFQUFHO0lBQ0osSUFBSSxJQUFJLENBQUMzQixRQUFRLEVBQ2I7SUFDSixNQUFNM0QsTUFBTSxHQUFHLElBQUksQ0FBQ3dELGFBQWEsQ0FBQ3dCLFFBQVEsQ0FBQ2hGLE1BQU07SUFDakRBLE1BQU0sQ0FBQ1MsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUNpRyxZQUFZLENBQUM7SUFDckMsSUFBSSxDQUFDL0MsUUFBUSxHQUFHLElBQUk7RUFDeEI7RUFDQTZCLElBQUlBLENBQUEsRUFBRztJQUNILE1BQU14RixNQUFNLEdBQUcsSUFBSSxDQUFDd0QsYUFBYSxDQUFDd0IsUUFBUSxDQUFDaEYsTUFBTTtJQUNqREEsTUFBTSxDQUFDMUIsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUNvSSxZQUFZLENBQUM7SUFDdEMsSUFBSSxDQUFDL0MsUUFBUSxHQUFHLEtBQUs7RUFDekI7RUFDQWtELE1BQU1BLENBQUMxQyxLQUFLLEVBQUU7SUFDVixNQUFNbkUsTUFBTSxHQUFHLElBQUksQ0FBQ3dELGFBQWEsQ0FBQ3dCLFFBQVEsQ0FBQ2hGLE1BQU07SUFDakQsTUFBTVosSUFBSSxHQUFHLElBQUksQ0FBQ29FLGFBQWEsQ0FBQ3dCLFFBQVEsQ0FBQzVGLElBQUk7SUFDN0MsTUFBTTNCLFlBQVksR0FBRyxJQUFJLENBQUMrRixhQUFhLENBQUMvRixZQUFZO0lBQ3BELE1BQU1vQyxHQUFHLEdBQUd4QywwQkFBMEIsQ0FBQzJDLE1BQU0sRUFBRXZDLFlBQVksQ0FBQyxHQUFHMEcsS0FBSztJQUNwRWYscUNBQXFDLENBQUNwRCxNQUFNLEVBQUVaLElBQUksRUFBRVMsR0FBRyxFQUFFcEMsWUFBWSxDQUFDO0lBQ3RFLElBQUksQ0FBQ2MsSUFBSSxDQUFDLHdCQUF3QixDQUFDO0lBQ25DLElBQUksQ0FBQ2lGLGFBQWEsQ0FBQ2tDLHFCQUFxQixDQUFDbkgsSUFBSSxDQUFDLHFCQUFxQixDQUFDO0VBQ3hFO0FBQ0osQzs7QUMxQzJDO0FBQ007QUFDakQ7QUFDQTtBQUNBO0FBQ08sTUFBTXdJLGlCQUFpQixTQUFTNUosc0JBQVksQ0FBQztFQUNoRCxJQUFJNkMsTUFBTUEsQ0FBQSxFQUFHO0lBQ1QsT0FBTyxJQUFJLENBQUNnSCxPQUFPO0VBQ3ZCO0VBQ0EsSUFBSWhILE1BQU1BLENBQUNzQixLQUFLLEVBQUU7SUFDZCxJQUFJLENBQUMwRixPQUFPLEdBQUcxRixLQUFLO0lBQ3BCLElBQUksQ0FBQy9DLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztFQUN0QztFQUNBLElBQUlhLElBQUlBLENBQUEsRUFBRztJQUNQLE9BQU8sSUFBSSxDQUFDNkgsS0FBSztFQUNyQjtFQUNBLElBQUk3SCxJQUFJQSxDQUFDa0MsS0FBSyxFQUFFO0lBQ1osSUFBSSxDQUFDMkYsS0FBSyxHQUFHM0YsS0FBSztJQUNsQixJQUFJLENBQUMvQyxJQUFJLENBQUMsdUJBQXVCLENBQUM7RUFDdEM7RUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJeEIsV0FBV0EsQ0FBQ2lELE1BQU0sRUFBRVosSUFBSSxFQUFFOEgsU0FBUyxFQUFFO0lBQ2pDLEtBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDQSxTQUFTLEdBQUdBLFNBQVM7SUFDMUIsSUFBSSxDQUFDRixPQUFPLEdBQUdoSCxNQUFNO0lBQ3JCLElBQUksQ0FBQ2lILEtBQUssR0FBRzdILElBQUk7SUFDakIySCxpQkFBaUIsQ0FBQ3BJLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDaEM7RUFDQSxPQUFPQSxJQUFJQSxDQUFDd0ksaUJBQWlCLEVBQUU7SUFDM0IsSUFBSUEsaUJBQWlCLENBQUNILE9BQU8sQ0FBQzVILElBQUksS0FBSytILGlCQUFpQixDQUFDRixLQUFLLEVBQUU7TUFDNURFLGlCQUFpQixDQUFDSCxPQUFPLENBQUM1SCxJQUFJLEdBQUcrSCxpQkFBaUIsQ0FBQ0YsS0FBSztJQUM1RDtJQUNBLE1BQU1HLGNBQWMsR0FBSUMsYUFBYSxJQUFLO01BQ3RDLElBQUl4RixFQUFFO01BQ04sSUFBSXdGLGFBQWEsQ0FBQ3ZFLE1BQU0sS0FBS3FFLGlCQUFpQixDQUFDRCxTQUFTLEVBQ3BEO01BQ0osQ0FBQ3JGLEVBQUUsR0FBR3dGLGFBQWEsQ0FBQ3ZFLE1BQU0sTUFBTSxJQUFJLElBQUlqQixFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEVBQUUsQ0FBQ3lGLFdBQVcsQ0FBQ0QsYUFBYSxDQUFDO01BQzlGRixpQkFBaUIsQ0FBQ0QsU0FBUyxDQUFDSyxRQUFRLENBQUNGLGFBQWEsQ0FBQztJQUN2RCxDQUFDO0lBQ0RELGNBQWMsQ0FBQ0QsaUJBQWlCLENBQUNILE9BQU8sQ0FBQztJQUN6Q0ksY0FBYyxDQUFDRCxpQkFBaUIsQ0FBQ0YsS0FBSyxDQUFDO0VBQzNDO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0lPLHVCQUF1QkEsQ0FBQy9KLFlBQVksRUFBRTtJQUNsQyxNQUFNZ0ssTUFBTSxHQUFHcEssMEJBQTBCO0lBQ3pDLE1BQU1xSyxPQUFPLEdBQUdELE1BQU0sQ0FBQyxJQUFJLENBQUNySSxJQUFJLEVBQUUzQixZQUFZLENBQUM7SUFDL0MsTUFBTWtLLFdBQVcsR0FBR0YsTUFBTSxDQUFDLElBQUksQ0FBQ3pILE1BQU0sRUFBRXZDLFlBQVksQ0FBQztJQUNyRCxNQUFNbUssbUJBQW1CLEdBQUdGLE9BQU8sR0FBR0MsV0FBVztJQUNqRCxNQUFNRSxZQUFZLEdBQUcsSUFBSSxDQUFDQyxlQUFlLENBQUNySyxZQUFZLENBQUM7SUFDdkQsT0FBUW1LLG1CQUFtQixHQUFHQyxZQUFZLEdBQUl2SyxtQkFBbUI7RUFDckU7RUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJd0ssZUFBZUEsQ0FBQ3JLLFlBQVksRUFBRTtJQUMxQixNQUFNc0ssT0FBTyxHQUFHMUssc0JBQXNCO0lBQ3RDLE1BQU0ySyxVQUFVLEdBQUdELE9BQU8sQ0FBQyxJQUFJLENBQUNmLE9BQU8sRUFBRXZKLFlBQVksQ0FBQztJQUN0RCxNQUFNd0ssUUFBUSxHQUFHRixPQUFPLENBQUMsSUFBSSxDQUFDZCxLQUFLLEVBQUV4SixZQUFZLENBQUM7SUFDbEQsTUFBTXlLLEdBQUcsR0FBR0YsVUFBVSxHQUFHQyxRQUFRO0lBQ2pDLElBQUlDLEdBQUcsSUFBSSxHQUFHLEVBQUU7TUFDWixPQUFPLE1BQU07SUFDakI7SUFDQSxPQUFPQSxHQUFHO0VBQ2Q7RUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSXJCLE1BQU1BLENBQUM3SixJQUFJLEVBQUVTLFlBQVksRUFBRTtJQUN2QixNQUFNZ0ssTUFBTSxHQUFHcEssMEJBQTBCO0lBQ3pDLE1BQU1xSyxPQUFPLEdBQUdELE1BQU0sQ0FBQyxJQUFJLENBQUNSLEtBQUssRUFBRXhKLFlBQVksQ0FBQztJQUNoRCxNQUFNb0ssWUFBWSxHQUFHLElBQUksQ0FBQ0MsZUFBZSxDQUFDckssWUFBWSxDQUFDO0lBQ3ZELE1BQU1rSyxXQUFXLEdBQUdELE9BQU8sR0FBR0csWUFBWSxJQUFJN0ssSUFBSSxHQUFHTSxtQkFBbUIsQ0FBQztJQUN6RUQsMEJBQTBCLENBQUMsSUFBSSxDQUFDMkosT0FBTyxFQUFFdkosWUFBWSxFQUFFa0ssV0FBVyxDQUFDO0VBQ3ZFO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSVEsY0FBY0EsQ0FBQzFLLFlBQVksRUFBRTtJQUN6QixNQUFNc0ssT0FBTyxHQUFHMUssc0JBQXNCO0lBQ3RDLE1BQU0rSyxZQUFZLEdBQUdMLE9BQU8sQ0FBQyxJQUFJLENBQUMvSCxNQUFNLEVBQUV2QyxZQUFZLENBQUM7SUFDdkQsTUFBTXdLLFFBQVEsR0FBR0YsT0FBTyxDQUFDLElBQUksQ0FBQzNJLElBQUksRUFBRTNCLFlBQVksQ0FBQztJQUNqRCxPQUFPSixvQkFBb0IsQ0FBQzRLLFFBQVEsR0FBR0csWUFBWSxFQUFFOUssbUJBQW1CLEVBQUUsR0FBRyxDQUFDO0VBQ2xGO0VBQ0FrQixPQUFPQSxDQUFBLEVBQUc7SUFDTixJQUFJLENBQUNpRCxrQkFBa0IsQ0FBQyxDQUFDO0VBQzdCO0FBQ0osQzs7QUMvRzJDO0FBQzZCO0FBQ2dCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU00RyxhQUFhLFNBQVMvSyxVQUFVLENBQUM7RUFDMUMsSUFBSWdMLFFBQVFBLENBQUEsRUFBRztJQUNYLE9BQU8sSUFBSSxDQUFDQyxTQUFTO0VBQ3pCO0VBQ0EsSUFBSUQsUUFBUUEsQ0FBQ2hILEtBQUssRUFBRTtJQUNoQixJQUFJLENBQUNpSCxTQUFTLEdBQUdqSCxLQUFLO0lBQ3RCLElBQUksQ0FBQ2tILG1CQUFtQixDQUFDLENBQUM7RUFDOUI7RUFDQXpMLFdBQVdBLENBQUNTLE1BQU0sRUFBRWlMLGNBQWMsRUFBRTtJQUNoQyxLQUFLLENBQUNqTCxNQUFNLENBQUM7SUFDYixJQUFJLENBQUMrSyxTQUFTLEdBQUcsS0FBSztJQUN0QixJQUFJLENBQUM3QyxxQkFBcUIsR0FBRyxJQUFJdkksc0JBQVksQ0FBQyxDQUFDO0lBQy9DO0FBQ1I7QUFDQTtBQUNBO0lBQ1EsSUFBSSxDQUFDdUwsc0JBQXNCLEdBQUk1SyxDQUFDLElBQUs7TUFDakMsSUFBSSxDQUFDNkssOEJBQThCLENBQUM3SyxDQUFDLENBQUNkLElBQUksQ0FBQztJQUMvQyxDQUFDO0lBQ0QsTUFBTTBCLFVBQVUsR0FBR3RCLHlCQUF5QixDQUFDSSxNQUFNLENBQUM7SUFDcEQsSUFBSSxDQUFDd0gsUUFBUSxHQUFHeUQsY0FBYztJQUM5QixJQUFJLENBQUN6RCxRQUFRLENBQUN2RSxFQUFFLENBQUMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDbUksWUFBWSxDQUFDO0lBQzVELElBQUksQ0FBQ2hMLGtCQUFrQixDQUFDNkMsRUFBRSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUNpSSxzQkFBc0IsQ0FBQztJQUN4RSxJQUFJLENBQUM5SSxVQUFVLENBQUNsQixVQUFVLENBQUMxQixJQUFJLENBQUM7SUFDaEMsSUFBSSxDQUFDNkwsWUFBWSxHQUFHLElBQUlwQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUM7SUFDckQsSUFBSSxDQUFDb0MsWUFBWSxDQUFDcEksRUFBRSxDQUFDLHdCQUF3QixFQUFFLE1BQU07TUFDakQsSUFBSSxDQUFDcUksb0JBQW9CLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUM7SUFDRixJQUFJLENBQUNDLGVBQWUsR0FBRyxJQUFJMUYscUJBQXFCLENBQUMsSUFBSSxDQUFDO0lBQ3RELElBQUksQ0FBQzBGLGVBQWUsQ0FBQ3RJLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxNQUFNO01BQ3BELElBQUksQ0FBQ3FJLG9CQUFvQixDQUFDLENBQUM7SUFDL0IsQ0FBQyxDQUFDO0VBQ047RUFDQTtBQUNKO0FBQ0E7QUFDQTtFQUNJbkkseUJBQXlCQSxDQUFDRSxHQUFHLEVBQUU7SUFDM0IsTUFBTUgsUUFBUSxHQUFHckQsc0NBQXNDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ0ksWUFBWSxFQUFFLElBQUksQ0FBQ0MsWUFBWSxFQUFFbUQsR0FBRyxDQUFDO0lBQ3hHLE1BQU1tSSxLQUFLLEdBQUcsSUFBSSxDQUFDQyw4QkFBOEIsQ0FBQyxDQUFDO0lBQ25ELE9BQU81TCxvQkFBb0IsQ0FBQ3FELFFBQVEsRUFBRXNJLEtBQUssQ0FBQzlHLEdBQUcsRUFBRThHLEtBQUssQ0FBQzdHLEdBQUcsQ0FBQztFQUMvRDtFQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFDSXJDLGtCQUFrQkEsQ0FBQzlDLElBQUksRUFBRTtJQUNyQixNQUFNZ00sS0FBSyxHQUFHLElBQUksQ0FBQ0MsOEJBQThCLENBQUMsQ0FBQztJQUNuRCxPQUFPNUwsaUNBQWlDLENBQUNMLElBQUksRUFBRWdNLEtBQUssQ0FBQzlHLEdBQUcsRUFBRThHLEtBQUssQ0FBQzdHLEdBQUcsQ0FBQztFQUN4RTtFQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFDSXZCLGtCQUFrQkEsQ0FBQ1MsS0FBSyxFQUFFO0lBQ3RCLE1BQU0ySCxLQUFLLEdBQUcsSUFBSSxDQUFDQyw4QkFBOEIsQ0FBQyxDQUFDO0lBQ25ELE9BQU81TCxpQ0FBaUMsQ0FBQ2dFLEtBQUssRUFBRTJILEtBQUssQ0FBQzlHLEdBQUcsRUFBRThHLEtBQUssQ0FBQzdHLEdBQUcsQ0FBQztFQUN6RTtFQUNBO0FBQ0o7QUFDQTtFQUNJOEcsOEJBQThCQSxDQUFBLEVBQUc7SUFDN0IsTUFBTUMsVUFBVSxHQUFHLElBQUksQ0FBQ0MsZUFBZTtJQUN2QyxNQUFNQyxLQUFLLEdBQUdoRyxrQ0FBa0MsQ0FBQyxJQUFJLENBQUMvRSxZQUFZLEVBQUUsSUFBSSxDQUFDWixZQUFZLENBQUM7SUFDdEYsTUFBTXlFLEdBQUcsR0FBRyxJQUFJLENBQUN4QyxZQUFZLEdBQUcsQ0FBQyxHQUFHLEdBQUcwSixLQUFLLElBQUlGLFVBQVU7SUFDMUQsTUFBTS9HLEdBQUcsR0FBRyxJQUFJLENBQUMzQyxZQUFZLEdBQUc0SixLQUFLLEdBQUdGLFVBQVU7SUFDbEQsT0FBTztNQUFFaEgsR0FBRztNQUFFQztJQUFJLENBQUM7RUFDdkI7RUFDQTtBQUNKO0FBQ0E7QUFDQTtFQUNJLElBQUlnSCxlQUFlQSxDQUFBLEVBQUc7SUFDbEIsSUFBSSxDQUFDRyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3ZCLE9BQU9qTSxzQkFBc0IsQ0FBQyxJQUFJLENBQUNnQixZQUFZLEVBQUUsSUFBSSxDQUFDWixZQUFZLENBQUM7RUFDdkU7RUFDQTtBQUNKO0FBQ0E7QUFDQTtFQUNJbUwsWUFBWUEsQ0FBQSxFQUFHO0lBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQ1cscUJBQXFCLENBQUMsQ0FBQyxFQUM3QjtJQUNKLElBQUksQ0FBQ0QsZ0JBQWdCLENBQUMsQ0FBQztJQUN2QixJQUFJLENBQUNSLG9CQUFvQixDQUFDLENBQUM7RUFDL0I7RUFDQTtBQUNKO0FBQ0E7QUFDQTtFQUNJQSxvQkFBb0JBLENBQUEsRUFBRztJQUNuQixNQUFNOUwsSUFBSSxHQUFHLElBQUksQ0FBQ2dJLFFBQVEsQ0FBQ3dDLHVCQUF1QixDQUFDLElBQUksQ0FBQy9KLFlBQVksQ0FBQztJQUNyRSxJQUFJLENBQUNtQyxVQUFVLENBQUM1QyxJQUFJLENBQUM7RUFDekI7RUFDQXVNLHFCQUFxQkEsQ0FBQSxFQUFHO0lBQ3BCLElBQUkxSCxFQUFFLEVBQUVDLEVBQUU7SUFDVixPQUFRLENBQUMsQ0FBQ0QsRUFBRSxHQUFHLElBQUksQ0FBQ21ELFFBQVEsTUFBTSxJQUFJLElBQUluRCxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEVBQUUsQ0FBQzdCLE1BQU0sS0FBSyxJQUFJLElBQ2pGLENBQUMsQ0FBQzhCLEVBQUUsR0FBRyxJQUFJLENBQUNrRCxRQUFRLE1BQU0sSUFBSSxJQUFJbEQsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUMxQyxJQUFJLEtBQUssSUFBSSxJQUMzRSxJQUFJLENBQUNmLFlBQVksSUFBSSxJQUFJO0VBQ2pDO0VBQ0E7QUFDSjtBQUNBO0VBQ0lpTCxnQkFBZ0JBLENBQUEsRUFBRztJQUNmLElBQUksQ0FBQyxJQUFJLENBQUNDLHFCQUFxQixDQUFDLENBQUMsRUFDN0I7SUFDSixNQUFNQyxRQUFRLEdBQUcsSUFBSSxDQUFDOUosWUFBWSxHQUFHLElBQUksQ0FBQ0YsWUFBWTtJQUN0RCxNQUFNaUssV0FBVyxHQUFHLElBQUksQ0FBQ3pFLFFBQVEsQ0FBQ21ELGNBQWMsQ0FBQyxJQUFJLENBQUMxSyxZQUFZLENBQUM7SUFDbkUsTUFBTWlNLFVBQVUsR0FBR0YsUUFBUSxHQUFHQyxXQUFXO0lBQ3pDcE0sc0JBQXNCLENBQUMsSUFBSSxDQUFDZ0IsWUFBWSxFQUFFLElBQUksQ0FBQ1osWUFBWSxFQUFFaU0sVUFBVSxDQUFDO0lBQ3hFLElBQUksQ0FBQ2xCLG1CQUFtQixDQUFDLENBQUM7RUFDOUI7RUFDQTtBQUNKO0FBQ0E7QUFDQTtFQUNJQSxtQkFBbUJBLENBQUEsRUFBRztJQUNsQixJQUFJLENBQUNuSyxZQUFZLENBQUNzTCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUNDLFFBQVE7SUFDMUMsSUFBSSxDQUFDdkwsWUFBWSxDQUFDa0QsU0FBUyxHQUFHLElBQUksQ0FBQ3FJLFFBQVEsR0FBRyxNQUFNLEdBQUcsUUFBUTtFQUNuRTtFQUNBO0FBQ0o7QUFDQTtFQUNJLElBQUlBLFFBQVFBLENBQUEsRUFBRztJQUNYO0lBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQ3RCLFFBQVEsRUFDZCxPQUFPLEtBQUs7SUFDaEIsT0FBTyxJQUFJLENBQUN0RCxRQUFRLENBQUNtRCxjQUFjLENBQUMsSUFBSSxDQUFDMUssWUFBWSxDQUFDLEtBQUssR0FBRztFQUNsRTtFQUNBO0FBQ0o7QUFDQTtBQUNBO0VBQ0lrTCw4QkFBOEJBLENBQUMzTCxJQUFJLEVBQUU7SUFDakMsSUFBSSxDQUFDZ0ksUUFBUSxDQUFDNkIsTUFBTSxDQUFDN0osSUFBSSxFQUFFLElBQUksQ0FBQ1MsWUFBWSxDQUFDO0VBQ2pEO0VBQ0FNLHFCQUFxQkEsQ0FBQ0QsQ0FBQyxFQUFFO0lBQ3JCLEtBQUssQ0FBQ0MscUJBQXFCLENBQUNELENBQUMsQ0FBQztJQUM5QixJQUFJLENBQUM0SCxxQkFBcUIsQ0FBQ25ILElBQUksQ0FBQyxxQkFBcUIsQ0FBQztFQUMxRDtFQUNBTixZQUFZQSxDQUFDSCxDQUFDLEVBQUU7SUFDWixLQUFLLENBQUNHLFlBQVksQ0FBQ0gsQ0FBQyxDQUFDO0lBQ3JCLElBQUksQ0FBQzRILHFCQUFxQixDQUFDbkgsSUFBSSxDQUFDLHFCQUFxQixDQUFDO0VBQzFEO0VBQ0E2QyxXQUFXQSxDQUFDUCxHQUFHLEVBQUU7SUFDYixJQUFJLElBQUksQ0FBQytJLFFBQVEsRUFDYjtJQUNKLEtBQUssQ0FBQ3hJLFdBQVcsQ0FBQ1AsR0FBRyxDQUFDO0lBQ3RCLElBQUksQ0FBQzZFLHFCQUFxQixDQUFDbkgsSUFBSSxDQUFDLHFCQUFxQixDQUFDO0VBQzFEO0VBQ0FFLGlCQUFpQkEsQ0FBQ1gsQ0FBQyxFQUFFO0lBQ2pCLElBQUksQ0FBQ2tILFFBQVEsQ0FBQ3hHLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCLEtBQUssQ0FBQ0MsaUJBQWlCLENBQUNYLENBQUMsQ0FBQztFQUM5QjtBQUNKLEM7O0FDeEtxQztBQUM5QixNQUFNc0YsaUJBQWlCLENBQUM7RUFDM0I7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0ksT0FBT29ELHdCQUF3QkEsQ0FBQ3hHLE1BQU0sRUFBRVosSUFBSSxFQUFFM0IsWUFBWSxFQUFFO0lBQ3hELE1BQU1zSyxPQUFPLEdBQUcxSyxzQkFBc0I7SUFDdEMsTUFBTTJLLFVBQVUsR0FBR0QsT0FBTyxDQUFDL0gsTUFBTSxFQUFFdkMsWUFBWSxDQUFDO0lBQ2hELE1BQU13SyxRQUFRLEdBQUdGLE9BQU8sQ0FBQzNJLElBQUksRUFBRTNCLFlBQVksQ0FBQztJQUM1QyxNQUFNb00sTUFBTSxHQUFHNUgsSUFBSSxDQUFDRSxHQUFHLENBQUMsQ0FBQzZGLFVBQVUsR0FBR0MsUUFBUSxFQUFFLEdBQUcsQ0FBQztJQUNwRCxNQUFNcEksR0FBRyxHQUFHeEMsMEJBQTBCLENBQUMyQyxNQUFNLEVBQUV2QyxZQUFZLENBQUM7SUFDNUQsT0FBT0osb0JBQW9CLENBQUN3QyxHQUFHLEVBQUUsQ0FBQyxFQUFFZ0ssTUFBTSxDQUFDO0VBQy9DO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSSxPQUFPL0MsbUJBQW1CQSxDQUFDOUcsTUFBTSxFQUFFWixJQUFJLEVBQUUwSyxRQUFRLEVBQUVyTSxZQUFZLEVBQUU7SUFDN0RKLDBCQUEwQixDQUFDMkMsTUFBTSxFQUFFdkMsWUFBWSxFQUFFcU0sUUFBUSxDQUFDO0lBQzFELE1BQU12RCxVQUFVLEdBQUcsSUFBSSxDQUFDQyx3QkFBd0IsQ0FBQ3hHLE1BQU0sRUFBRVosSUFBSSxFQUFFM0IsWUFBWSxDQUFDO0lBQzVFSiwwQkFBMEIsQ0FBQzJDLE1BQU0sRUFBRXZDLFlBQVksRUFBRThJLFVBQVUsQ0FBQztFQUNoRTtFQUNBLE9BQU84QyxnQkFBZ0JBLENBQUNVLFVBQVUsRUFBRXRNLFlBQVksRUFBRTtJQUM5QyxNQUFNOEUsTUFBTSxHQUFHbEYsZ0NBQWdDLENBQUMwTSxVQUFVLENBQUM7SUFDM0QsTUFBTUMsSUFBSSxHQUFHdk0sWUFBWSxHQUFHOEUsTUFBTSxDQUFDRSxLQUFLLEdBQUdGLE1BQU0sQ0FBQ0csTUFBTTtJQUN4RCxNQUFNb0gsUUFBUSxHQUFHck0sWUFBWSxHQUFHOEUsTUFBTSxDQUFDakMsQ0FBQyxHQUFHaUMsTUFBTSxDQUFDaEMsQ0FBQztJQUNuRCxNQUFNNkksS0FBSyxHQUFHVSxRQUFRLEdBQUdFLElBQUk7SUFDN0IsSUFBSVosS0FBSyxHQUFHLENBQUMsRUFBRTtNQUNYckcsT0FBTyxDQUFDQyxJQUFJLENBQUUsR0FBRStHLFVBQVUsQ0FBQ0UsSUFBSyxnRUFBK0QsQ0FBQztJQUNwRztJQUNBLE9BQU9iLEtBQUs7RUFDaEI7QUFDSixDOztBQ3RDd0M7QUFDRTtBQUNOO0FBQ1M7QUFDWjtBQUNEOzs7QUNMdUI7QUFDdkI7QUFDekIsTUFBTS9MLGNBQWMsQ0FBQztFQUN4QjtBQUNKO0FBQ0E7RUFDSSxPQUFPdUQsa0JBQWtCQSxDQUFDUyxLQUFLLEVBQUVhLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0lBQ3ZDLElBQUlELEdBQUcsSUFBSUMsR0FBRyxFQUFFO01BQ1osT0FBTyxHQUFHO0lBQ2Q7SUFDQSxNQUFNbkYsSUFBSSxHQUFJLENBQUNxRSxLQUFLLEdBQUdjLEdBQUcsS0FBS0QsR0FBRyxHQUFHQyxHQUFHLENBQUMsR0FBSTdFLG1CQUFtQjtJQUNoRSxPQUFPRCxjQUFjLENBQUMwRCxLQUFLLENBQUMvRCxJQUFJLEVBQUVNLG1CQUFtQixFQUFFLEdBQUcsQ0FBQztFQUMvRDtFQUNBLE9BQU93QyxrQkFBa0JBLENBQUM5QyxJQUFJLEVBQUVrRixHQUFHLEVBQUVDLEdBQUcsRUFBRTtJQUN0QyxNQUFNZ0ksR0FBRyxHQUFJLENBQUNqSSxHQUFHLEdBQUdDLEdBQUcsSUFBSW5GLElBQUksR0FBSU0sbUJBQW1CLEdBQUc2RSxHQUFHO0lBQzVELE9BQU85RSxjQUFjLENBQUMwRCxLQUFLLENBQUNvSixHQUFHLEVBQUVqSSxHQUFHLEVBQUVDLEdBQUcsQ0FBQztFQUM5QztFQUNBO0FBQ0o7QUFDQTtBQUNBO0VBQ0ksT0FBT2pCLFdBQVdBLENBQUM2SSxVQUFVLEVBQUV0TSxZQUFZLEVBQUU7SUFDekMsSUFBSUEsWUFBWSxFQUFFO01BQ2QsT0FBT3NNLFVBQVUsQ0FBQ3pKLENBQUM7SUFDdkI7SUFDQSxPQUFPeUosVUFBVSxDQUFDeEosQ0FBQztFQUN2QjtFQUNBLE9BQU82Rix1QkFBdUJBLENBQUN0SSxDQUFDLEVBQUVMLFlBQVksRUFBRTtJQUM1QyxJQUFJSyxDQUFDLFlBQVlvTSxrQ0FBcUIsRUFBRTtNQUNwQyxPQUFPN00sY0FBYyxDQUFDNkQsV0FBVyxDQUFDcEQsQ0FBQyxDQUFDc0MsTUFBTSxFQUFFM0MsWUFBWSxDQUFDO0lBQzdELENBQUMsTUFDSTtNQUNELE9BQU9KLGNBQWMsQ0FBQzZELFdBQVcsQ0FBQyxJQUFJaEUsa0JBQUssQ0FBQ1ksQ0FBQyxDQUFDc00sT0FBTyxFQUFFdE0sQ0FBQyxDQUFDdU0sT0FBTyxDQUFDLEVBQUU1TSxZQUFZLENBQUM7SUFDcEY7RUFDSjtFQUNBO0FBQ0o7QUFDQTtFQUNJLE9BQU8wRCxXQUFXQSxDQUFDNEksVUFBVSxFQUFFdE0sWUFBWSxFQUFFcU0sUUFBUSxFQUFFO0lBQ25ELElBQUksQ0FBQ0MsVUFBVSxFQUNYO0lBQ0osSUFBSXRNLFlBQVksRUFBRTtNQUNkc00sVUFBVSxDQUFDekosQ0FBQyxHQUFHd0osUUFBUTtJQUMzQixDQUFDLE1BQ0k7TUFDREMsVUFBVSxDQUFDeEosQ0FBQyxHQUFHdUosUUFBUTtJQUMzQjtFQUNKO0VBQ0E7QUFDSjtBQUNBO0VBQ0ksT0FBTy9CLE9BQU9BLENBQUNnQyxVQUFVLEVBQUV0TSxZQUFZLEVBQUU7SUFDckMsTUFBTXVNLElBQUksR0FBRzNNLGNBQWMsQ0FBQ21GLGlCQUFpQixDQUFDdUgsVUFBVSxDQUFDO0lBQ3pELElBQUl0TSxZQUFZLEVBQUU7TUFDZCxPQUFPdU0sSUFBSSxDQUFDdkgsS0FBSyxHQUFHc0gsVUFBVSxDQUFDTyxLQUFLLENBQUNoSyxDQUFDO0lBQzFDLENBQUMsTUFDSTtNQUNELE9BQU8wSixJQUFJLENBQUN0SCxNQUFNLEdBQUdxSCxVQUFVLENBQUNPLEtBQUssQ0FBQy9KLENBQUM7SUFDM0M7RUFDSjtFQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJLE9BQU9VLE9BQU9BLENBQUM4SSxVQUFVLEVBQUV0TSxZQUFZLEVBQUU4TSxNQUFNLEVBQUU7SUFDN0MsTUFBTVAsSUFBSSxHQUFHM00sY0FBYyxDQUFDbUYsaUJBQWlCLENBQUN1SCxVQUFVLENBQUM7SUFDekQsSUFBSXRNLFlBQVksRUFBRTtNQUNkc00sVUFBVSxDQUFDTyxLQUFLLENBQUNoSyxDQUFDLEdBQUdpSyxNQUFNLEdBQUdQLElBQUksQ0FBQ3ZILEtBQUs7SUFDNUMsQ0FBQyxNQUNJO01BQ0RzSCxVQUFVLENBQUNPLEtBQUssQ0FBQy9KLENBQUMsR0FBR2dLLE1BQU0sR0FBR1AsSUFBSSxDQUFDdEgsTUFBTTtJQUM3QztFQUNKO0VBQ0EsT0FBTzNCLEtBQUtBLENBQUN5SixHQUFHLEVBQUV0SSxHQUFHLEVBQUVDLEdBQUcsRUFBRTtJQUN4QnFJLEdBQUcsR0FBR3ZJLElBQUksQ0FBQ0MsR0FBRyxDQUFDc0ksR0FBRyxFQUFFckksR0FBRyxDQUFDO0lBQ3hCcUksR0FBRyxHQUFHdkksSUFBSSxDQUFDRSxHQUFHLENBQUNxSSxHQUFHLEVBQUV0SSxHQUFHLENBQUM7SUFDeEIsT0FBT3NJLEdBQUc7RUFDZDtFQUNBLE9BQU9oSSxpQkFBaUJBLENBQUN1SCxVQUFVLEVBQUU7SUFDakMsSUFBSUEsVUFBVSxDQUFDVSxPQUFPLEVBQ2xCLE9BQU9WLFVBQVUsQ0FBQ1UsT0FBTztJQUM3QixPQUFPVixVQUFVLENBQUNXLGNBQWMsQ0FBQyxDQUFDO0VBQ3RDO0VBQ0EsT0FBT25MLGdCQUFnQkEsQ0FBQ1gsTUFBTSxFQUFFVSxNQUFNLEVBQUU7SUFDcEMsSUFBSVYsTUFBTSxFQUFFO01BQ1IsT0FBT0EsTUFBTTtJQUNqQjtJQUNBLElBQUlrRSxNQUFNLEdBQUd4RCxNQUFNLENBQUN3RCxNQUFNO0lBQzFCLE9BQU9BLE1BQU0sQ0FBQ0EsTUFBTSxFQUFFO01BQ2xCQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0EsTUFBTTtJQUMxQjtJQUNBLE9BQU9BLE1BQU07RUFDakI7RUFDQSxPQUFPdEIsYUFBYUEsQ0FBQ3NCLE1BQU0sRUFBRVQsR0FBRyxFQUFFO0lBQzlCLElBQUlSLEVBQUU7SUFDTixJQUFJLENBQUNRLEdBQUcsRUFDSjtJQUNKLENBQUNSLEVBQUUsR0FBR1EsR0FBRyxDQUFDUyxNQUFNLE1BQU0sSUFBSSxJQUFJakIsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUN5RixXQUFXLENBQUNqRixHQUFHLENBQUM7SUFDMUVTLE1BQU0sQ0FBQ3lFLFFBQVEsQ0FBQ2xGLEdBQUcsQ0FBQztFQUN4QjtFQUNBLE9BQU92Qix1QkFBdUJBLENBQUNpSixVQUFVLEVBQUV0TSxZQUFZLEVBQUVDLFlBQVksRUFBRW1ELEdBQUcsRUFBRTtJQUN4RSxNQUFNOEosV0FBVyxHQUFHQSxDQUFBLEtBQU07TUFDdEIsSUFBSTlKLEdBQUcsWUFBWXFKLGtDQUFxQixFQUFFO1FBQ3RDLE9BQU9ILFVBQVUsQ0FBQzVKLE9BQU8sQ0FBQ1UsR0FBRyxDQUFDVCxNQUFNLENBQUM7TUFDekM7TUFDQSxPQUFPMkosVUFBVSxDQUFDNUosT0FBTyxDQUFDLElBQUlqRCxrQkFBSyxDQUFDMkQsR0FBRyxDQUFDdUosT0FBTyxFQUFFdkosR0FBRyxDQUFDd0osT0FBTyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUNELE1BQU1uSyxRQUFRLEdBQUd5SyxXQUFXLENBQUMsQ0FBQztJQUM5QixJQUFJbE4sWUFBWSxFQUFFO01BQ2QsT0FBT3lDLFFBQVEsQ0FBQ0ksQ0FBQyxHQUFHNUMsWUFBWSxDQUFDNEMsQ0FBQztJQUN0QyxDQUFDLE1BQ0k7TUFDRCxPQUFPSixRQUFRLENBQUNLLENBQUMsR0FBRzdDLFlBQVksQ0FBQzZDLENBQUM7SUFDdEM7RUFDSjtBQUNKLEM7O0FDckg4QjtBQUNEO0FBQ007QUFDUDs7O0FDSGtEO0FBQ3hCO0FBQ2hCO0FBRXRDLE1BQU15SyxtQkFBbUIsR0FBR0EsQ0FBQSxLQUFNO0VBQ2hDLE1BQU1DLEdBQUcsR0FBRyxJQUFJTCx3QkFBVyxDQUFDO0lBQUVuSSxLQUFLLEVBQUUsR0FBRztJQUFFQyxNQUFNLEVBQUU7RUFBSSxDQUFDLENBQUM7RUFDeER3SSxRQUFRLENBQUNDLElBQUksQ0FBQ0MsV0FBVyxDQUFDSCxHQUFHLENBQUNJLElBQUksQ0FBQztFQUVuQ2xJLHlDQUFpQixDQUFFckYsQ0FBQyxJQUFLO0lBQ3ZCaU4sdUNBQVksQ0FBQ1EsV0FBVyxDQUFDQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQ2pDLENBQUMsQ0FBQztFQUVGLE1BQU1DLFNBQVMsR0FBR0MsYUFBYSxDQUFDVCxHQUFHLENBQUNVLEtBQUssRUFBRVYsR0FBRyxDQUFDSSxJQUFJLENBQUM7RUFFcEQsTUFBTU8sU0FBUyxHQUFJQyxLQUFLLElBQUs7SUFDM0IsTUFBTUMsT0FBTyxHQUFHWixRQUFRLENBQUNhLGFBQWEsQ0FBQyxRQUFRLENBQUM7SUFDaERELE9BQU8sQ0FBQ0UsU0FBUyxHQUFHSCxLQUFLO0lBQ3pCWCxRQUFRLENBQUNDLElBQUksQ0FBQ0MsV0FBVyxDQUFDVSxPQUFPLENBQUM7SUFDbEMsT0FBT0EsT0FBTztFQUNoQixDQUFDO0VBQ0QsTUFBTUEsT0FBTyxHQUFHRixTQUFTLENBQUMsaUJBQWlCLENBQUM7RUFDNUMsTUFBTUssUUFBUSxHQUFHTCxTQUFTLENBQUMsaUJBQWlCLENBQUM7RUFDN0MsTUFBTU0sVUFBVSxHQUFJaEUsR0FBRyxJQUFLO0lBQzFCLE1BQU1pRSxjQUFjLEdBQUdWLFNBQVMsQ0FBQ3pPLElBQUk7SUFDckNvUCxnQkFBZ0IsQ0FBQ1gsU0FBUyxDQUFDekcsUUFBUSxDQUFDaEYsTUFBTSxFQUFFa0ksR0FBRyxDQUFDO0lBQ2hEdUQsU0FBUyxDQUFDN0MsWUFBWSxDQUFDLENBQUM7SUFDeEI2QyxTQUFTLENBQUM3TCxVQUFVLENBQUN1TSxjQUFjLENBQUM7RUFDdEMsQ0FBQztFQUNELE1BQU1FLE1BQU0sR0FBR0EsQ0FBQSxLQUFNO0lBQ25CSCxVQUFVLENBQUMsRUFBRSxDQUFDO0VBQ2hCLENBQUM7RUFDRCxNQUFNSSxPQUFPLEdBQUdBLENBQUEsS0FBTTtJQUNwQkosVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDO0VBQ2pCLENBQUM7RUFDREosT0FBTyxDQUFDdEwsZ0JBQWdCLENBQUMsT0FBTyxFQUFFNkwsTUFBTSxDQUFDO0VBQ3pDSixRQUFRLENBQUN6TCxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU4TCxPQUFPLENBQUM7QUFDN0MsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1aLGFBQWEsR0FBR0EsQ0FBQ0MsS0FBSyxFQUFFTixJQUFJLEtBQUs7RUFDckMsTUFBTWtCLFdBQVcsR0FBRyxFQUFFO0VBQ3RCLE1BQU1DLFdBQVcsR0FBRyxHQUFHO0VBQ3ZCLE1BQU1DLFdBQVcsR0FBRyxHQUFHO0VBQ3ZCLE1BQU1DLFVBQVUsR0FBRyxHQUFHO0VBRXRCLE1BQU14RixTQUFTLEdBQUcsSUFBSWpLLHNCQUFTLENBQUMsQ0FBQztFQUNqQzBPLEtBQUssQ0FBQ3BFLFFBQVEsQ0FBQ0wsU0FBUyxDQUFDO0VBQ3pCQSxTQUFTLENBQUM1RyxDQUFDLEdBQUcsRUFBRTtFQUNoQjRHLFNBQVMsQ0FBQzNHLENBQUMsR0FBR2tNLFdBQVc7RUFFekIsTUFBTXpILFFBQVEsR0FBRzJILGtCQUFrQixDQUFDRCxVQUFVLEVBQUVGLFdBQVcsRUFBRXRGLFNBQVMsQ0FBQztFQUN2RSxNQUFNdUUsU0FBUyxHQUFHLElBQUlwRCxhQUFhLENBQ2pDO0lBQ0V0SixJQUFJLEVBQUU2TixnQkFBZ0IsQ0FBQ0wsV0FBVyxFQUFFQyxXQUFXLEVBQUUsUUFBUSxDQUFDO0lBQzFEbE4sTUFBTSxFQUFFdU4sa0JBQWtCLENBQUNOLFdBQVcsRUFBRSxRQUFRLENBQUM7SUFDakQ5TSxXQUFXLEVBQUUsQ0FBQztJQUNkRSxXQUFXLEVBQUU2TSxXQUFXO0lBQ3hCeFAsSUFBSSxFQUFFLElBQUk7SUFDVlMsWUFBWSxFQUFFLEtBQUs7SUFDbkJtQixNQUFNLEVBQUV5TTtFQUNWLENBQUMsRUFDRHJHLFFBQ0YsQ0FBQztFQUVEMkcsS0FBSyxDQUFDcEUsUUFBUSxDQUFDa0UsU0FBUyxDQUFDO0VBQ3pCQSxTQUFTLENBQUNuTCxDQUFDLEdBQUc0RyxTQUFTLENBQUM1RyxDQUFDLEdBQUdvTSxVQUFVO0VBQ3RDakIsU0FBUyxDQUFDbEwsQ0FBQyxHQUFHa00sV0FBVztFQUV6QmhCLFNBQVMsQ0FBQzdOLGtCQUFrQixDQUFDNkMsRUFBRSxDQUFDLGVBQWUsRUFBRzNDLENBQUMsSUFBSztJQUN0RDtFQUFBLENBQ0QsQ0FBQzs7RUFFRjtBQUNGO0FBQ0E7RUFDRWtILFFBQVEsQ0FBQ2hGLE1BQU0sQ0FBQ1osSUFBSSxHQUFHLElBQUk7RUFDM0IsT0FBT3FNLFNBQVM7QUFDbEIsQ0FBQztBQUVELE1BQU1tQixnQkFBZ0IsR0FBR0EsQ0FBQ0UsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEtBQUssS0FBSztFQUN4QyxNQUFNQyxDQUFDLEdBQUcsSUFBSXBDLHFCQUFRLENBQUMsQ0FBQztFQUN4Qm9DLENBQUMsQ0FBQ0MsU0FBUyxDQUFDRixLQUFLLENBQUM7RUFDbEJDLENBQUMsQ0FBQ0UsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUVMLENBQUMsRUFBRUMsQ0FBQyxDQUFDO0VBQ3RCRSxDQUFDLENBQUN4QyxPQUFPLEdBQUcsSUFBSUssc0JBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFZ0MsQ0FBQyxFQUFFQyxDQUFDLENBQUM7RUFDckMsT0FBT0UsQ0FBQztBQUNWLENBQUM7QUFFRCxNQUFNSixrQkFBa0IsR0FBR0EsQ0FBQ3BLLEtBQUssRUFBRXVLLEtBQUssS0FBSztFQUMzQyxNQUFNNUQsS0FBSyxHQUFHLEdBQUc7RUFDakIsTUFBTTZELENBQUMsR0FBRyxJQUFJcEMscUJBQVEsQ0FBQyxDQUFDO0VBQ3hCb0MsQ0FBQyxDQUFDQyxTQUFTLENBQUNGLEtBQUssQ0FBQztFQUNsQkMsQ0FBQyxDQUFDRSxRQUFRLENBQUMsQ0FBQzFLLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQ0EsS0FBSyxHQUFHMkcsS0FBSyxFQUFFM0csS0FBSyxFQUFFQSxLQUFLLENBQUM7RUFDcER3SyxDQUFDLENBQUN4QyxPQUFPLEdBQUcsSUFBSUssc0JBQVMsQ0FBQyxDQUFDckksS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDQSxLQUFLLEdBQUcyRyxLQUFLLEVBQUUzRyxLQUFLLEVBQUVBLEtBQUssQ0FBQztFQUNuRXdLLENBQUMsQ0FBQzNNLENBQUMsR0FBR21DLEtBQUssR0FBRyxDQUFDO0VBQ2YsT0FBT3dLLENBQUM7QUFDVixDQUFDO0FBRUQsTUFBTUcsb0JBQW9CLEdBQUdBLENBQUNKLEtBQUssRUFBRUYsQ0FBQyxFQUFFQyxDQUFDLEVBQUU3RixTQUFTLEVBQUVtRyxLQUFLLEdBQUcsR0FBRyxLQUFLO0VBQ3BFLE1BQU1KLENBQUMsR0FBRyxJQUFJcEMscUJBQVEsQ0FBQyxDQUFDO0VBQ3hCb0MsQ0FBQyxDQUFDQyxTQUFTLENBQUNGLEtBQUssRUFBRUssS0FBSyxDQUFDO0VBQ3pCSixDQUFDLENBQUNFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFTCxDQUFDLEVBQUVDLENBQUMsQ0FBQztFQUN0QkUsQ0FBQyxDQUFDeEMsT0FBTyxHQUFHLElBQUlLLHNCQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRWdDLENBQUMsRUFBRUMsQ0FBQyxDQUFDO0VBQ3JDN0YsU0FBUyxDQUFDSyxRQUFRLENBQUMwRixDQUFDLENBQUM7RUFDckIsT0FBT0EsQ0FBQztBQUNWLENBQUM7QUFFRCxNQUFNYixnQkFBZ0IsR0FBR0EsQ0FBQ2EsQ0FBQyxFQUFFSyxTQUFTLEtBQUs7RUFDekMsTUFBTUMsSUFBSSxHQUFHTixDQUFDLENBQUNNLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDM0J6SyxPQUFPLENBQUMwSyxHQUFHLENBQUNGLElBQUksQ0FBQztFQUNqQixNQUFNOUMsT0FBTyxHQUFHd0MsQ0FBQyxDQUFDeEMsT0FBTyxDQUFDK0MsS0FBSyxDQUFDLENBQUM7RUFDakMvQyxPQUFPLENBQUMvSCxNQUFNLElBQUk0SyxTQUFTO0VBQzNCTCxDQUFDLENBQUNTLEtBQUssQ0FBQyxDQUFDO0VBQ1RULENBQUMsQ0FBQ0MsU0FBUyxDQUFDSyxJQUFJLENBQUNQLEtBQUssRUFBRU8sSUFBSSxDQUFDRixLQUFLLENBQUM7RUFDbkNKLENBQUMsQ0FBQ0UsUUFBUSxDQUFDMUMsT0FBTyxDQUFDbkssQ0FBQyxFQUFFbUssT0FBTyxDQUFDbEssQ0FBQyxFQUFFa0ssT0FBTyxDQUFDaEksS0FBSyxFQUFFZ0ksT0FBTyxDQUFDL0gsTUFBTSxDQUFDO0VBQy9EdUssQ0FBQyxDQUFDeEMsT0FBTyxHQUFHLElBQUlLLHNCQUFTLENBQ3ZCTCxPQUFPLENBQUNuSyxDQUFDLEVBQ1RtSyxPQUFPLENBQUNsSyxDQUFDLEVBQ1RrSyxPQUFPLENBQUNoSSxLQUFLLEVBQ2JnSSxPQUFPLENBQUMvSCxNQUNWLENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTWlLLGtCQUFrQixHQUFHQSxDQUFDZ0IsU0FBUyxFQUFFQyxVQUFVLEVBQUUxRyxTQUFTLEtBQUs7RUFDL0QsTUFBTTJHLGNBQWMsR0FBR1Qsb0JBQW9CLENBQ3pDLFFBQVEsRUFDUk8sU0FBUyxFQUNUQyxVQUFVLEdBQUcsQ0FBQyxFQUNkMUcsU0FDRixDQUFDO0VBQ0QsTUFBTTRHLFlBQVksR0FBR1Ysb0JBQW9CLENBQ3ZDLFFBQVEsRUFDUk8sU0FBUyxFQUNUQyxVQUFVLEVBQ1YxRyxTQUFTLEVBQ1QsR0FDRixDQUFDO0VBQ0QsT0FBTyxJQUFJSCxpQkFBaUIsQ0FBQzhHLGNBQWMsRUFBRUMsWUFBWSxFQUFFNUcsU0FBUyxDQUFDO0FBQ3ZFLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsSUFBSWdFLFFBQVEsQ0FBQzZDLFVBQVUsS0FBSyxTQUFTLEVBQUU7RUFDckMvQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ3ZCLENBQUMsTUFBTTtFQUNMRSxRQUFRLENBQUMxSyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRXdLLG1CQUFtQixDQUFDO0FBQ3BFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL1NsaWRlckV2ZW50LmpzPzY0M2YiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL1NsaWRlclZpZXcuanM/NGZjMiIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vU2xpZGVyVmlld09wdGlvbi5qcz9iZTg0Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9zY3JvbGxCYXIvSW5lcnRpYWxTY3JvbGxNYW5hZ2VyLmpzPzM2YmYiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL3Njcm9sbEJhci9Nb3VzZVdoZWVsU2Nyb2xsTWFuYWdlci5qcz9iNzBjIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9zY3JvbGxCYXIvU2Nyb2xsQmFyQ29udGVudHMuanM/NWFkNSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vc2Nyb2xsQmFyL1Njcm9sbEJhclZpZXcuanM/YTBmZiIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vc2Nyb2xsQmFyL1Njcm9sbEJhclZpZXdVdGlsLmpzP2YyYzMiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL3Njcm9sbEJhci9pbmRleC5qcz9mNTIxIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9TbGlkZXJWaWV3VXRpbC5qcz9mNGE2Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9pbmRleC5qcz9iMjM5Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2RlbW9TcmMvZGVtb19zY3JvbGxiYXIuanM/NDY5NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOOCueODqeOCpOODgOODvOOBjOenu+WLleOBl+OBn+mam+OBq+eZuuihjOOBleOCjOOCi+OCpOODmeODs+ODiOOBp+OBmeOAglxuICog54++54q244Gu44K544Op44Kk44OA44O85L2N572u44KS5aCx5ZGK44GX44G+44GZ44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBTbGlkZXJFdmVudENvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKHJhdGUpIHtcbiAgICAgICAgdGhpcy5yYXRlID0gcmF0ZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb250YWluZXIgfSBmcm9tIFwiQHBpeGkvZGlzcGxheVwiO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tIFwiQHBpeGkvbWF0aFwiO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBwaXhpL3V0aWxzXCI7XG5pbXBvcnQgeyBTbGlkZXJFdmVudENvbnRleHQsIFNsaWRlclZpZXdPcHRpb25VdGlsLCBTbGlkZXJWaWV3VXRpbCwgfSBmcm9tIFwiLi9cIjtcbi8qKlxuICog44K544Op44Kk44OA44O855So44Kv44Op44K544Gn44GZXG4gKlxuICog5L2/55So5LiK44Gu5rOo5oSPIDpcbiAqIOOCquODluOCuOOCp+OCr+ODiOOBruOCteOCpOOCuuOBruioiOa4rOOBq2dldExvY2FsQm91bmRz6Zai5pWw44KS5L2/55So44GX44Gm44GE44G+44GZ44CCXG4gKiBoaXRBcmVh44Gn44K144Kk44K644KS44GC44KJ44GL44GY44KB5LiO44GI44Gm44GP44Gg44GV44GE44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBTbGlkZXJWaWV3IGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgICBnZXQgcmF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JhdGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBvcHRpb25cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb24pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pc0hvcml6b250YWwgPSB0cnVlO1xuICAgICAgICB0aGlzLmRyYWdTdGFydFBvcyA9IG5ldyBQb2ludCgpO1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTsgLy8g54++5Zyo44K544Op44Kk44OJ5Lit44GL5ZCm44GLXG4gICAgICAgIHRoaXMuc2xpZGVyRXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICog44K544Op44Kk44OA44O844Gu44OJ44Op44OD44Kw44KS6ZaL5aeL44GZ44KLXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YXJ0TW92ZSA9IChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uUHJlc3NlZFNsaWRlckJ1dHRvbihlKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOOCueODqeOCpOODgOODvOOBruODieODqeODg+OCsOS4reOBruWHpueQhlxuICAgICAgICAgKiBAcGFyYW0gZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tb3ZlU2xpZGVyID0gKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25Nb3ZlU2xpZGVyKGUpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICog44K544Op44Kk44OA44O844Gu44OJ44Op44OD44Kw57WC5LqG5pmC44Gu5Yem55CGXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1vdmVTbGlkZXJGaW5pc2ggPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uUm9vdENvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5tb3ZlU2xpZGVyKTtcbiAgICAgICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uLm9mZihcInBvaW50ZXJ1cFwiLCB0aGlzLm1vdmVTbGlkZXJGaW5pc2gpO1xuICAgICAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24ub2ZmKFwicG9pbnRlcnVwb3V0c2lkZVwiLCB0aGlzLm1vdmVTbGlkZXJGaW5pc2gpO1xuICAgICAgICAgICAgdGhpcy5zbGlkZXJFdmVudEVtaXR0ZXIuZW1pdChcInNsaWRlcl9jaGFuZ2VfZmluaXNoZWRcIiwgbmV3IFNsaWRlckV2ZW50Q29udGV4dCh0aGlzLnJhdGUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOOBk+OBruOCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOOBmeOCi+OAglxuICAgICAgICAgKiBAcGFyYW1cdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGlzcG9zZSA9IChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uRGlzcG9zZUZ1bmN0aW9uKGUpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBpbml0T3B0aW9uID0gU2xpZGVyVmlld09wdGlvblV0aWwuaW5pdChvcHRpb24pO1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGluaXRPcHRpb24uY2FudmFzO1xuICAgICAgICB0aGlzLl9iYXNlID0gdGhpcy5pbml0QmFzZShpbml0T3B0aW9uLmJhc2UpO1xuICAgICAgICB0aGlzLl9iYXIgPSB0aGlzLmluaXRCYXJBbmRNYXNrKGluaXRPcHRpb24gPT09IG51bGwgfHwgaW5pdE9wdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdE9wdGlvbi5iYXIpO1xuICAgICAgICB0aGlzLl9iYXJNYXNrID0gdGhpcy5pbml0QmFyQW5kTWFzayhpbml0T3B0aW9uID09PSBudWxsIHx8IGluaXRPcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluaXRPcHRpb24ubWFzayk7XG4gICAgICAgIGlmICh0aGlzLl9iYXIgJiYgdGhpcy5fYmFyTWFzaylcbiAgICAgICAgICAgIHRoaXMuX2Jhci5tYXNrID0gdGhpcy5fYmFyTWFzaztcbiAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24gPSB0aGlzLmluaXRTbGlkZXJCdXR0b24oaW5pdE9wdGlvbi5idXR0b24pO1xuICAgICAgICB0aGlzLmJ1dHRvblJvb3RDb250YWluZXIgPSBTbGlkZXJWaWV3VXRpbC5nZXRSb290Q29udGFpbmVyKHRoaXMuY2FudmFzLCB0aGlzLl9zbGlkZUJ1dHRvbik7XG4gICAgICAgIHRoaXMuX21pblBvc2l0aW9uID0gaW5pdE9wdGlvbi5taW5Qb3NpdGlvbjtcbiAgICAgICAgdGhpcy5fbWF4UG9zaXRpb24gPSBpbml0T3B0aW9uLm1heFBvc2l0aW9uO1xuICAgICAgICB0aGlzLmlzSG9yaXpvbnRhbCA9IGluaXRPcHRpb24uaXNIb3Jpem9udGFsO1xuICAgICAgICB0aGlzLl9yYXRlID0gaW5pdE9wdGlvbi5yYXRlO1xuICAgICAgICB0aGlzLmNoYW5nZVJhdGUodGhpcy5fcmF0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOOBruS9jee9ruOCkuWkieabtOOBmeOCi1xuICAgICAqIEBwYXJhbVx0cmF0ZVx044K544Op44Kk44OA44O844Gu5L2N572uIE1JTiAwLjAgfiBNQVggW1NsaWRlclZpZXcuTUFYX1JBVEVdXG4gICAgICovXG4gICAgY2hhbmdlUmF0ZShyYXRlKSB7XG4gICAgICAgIC8v44OJ44Op44OD44Kw5Lit44Gv5aSW6YOo44GL44KJ44Gu5pON5L2c44KS54Sh6KaW44GZ44KL44CCXG4gICAgICAgIGlmICh0aGlzLmlzRHJhZ2dpbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX3JhdGUgPSByYXRlO1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLmNvbnZlcnRSYXRlVG9QaXhlbCh0aGlzLl9yYXRlKTtcbiAgICAgICAgdGhpcy51cGRhdGVQYXJ0cyhwb3MpO1xuICAgICAgICB0aGlzLnNsaWRlckV2ZW50RW1pdHRlci5lbWl0KFwic2xpZGVyX2NoYW5nZVwiLCBuZXcgU2xpZGVyRXZlbnRDb250ZXh0KHRoaXMucmF0ZSkpO1xuICAgIH1cbiAgICBvblByZXNzZWRTbGlkZXJCdXR0b24oZSkge1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIGNvbnN0IGxvY2FsUG9zID0gdGhpcy50b0xvY2FsKGUuZ2xvYmFsKTtcbiAgICAgICAgdGhpcy5kcmFnU3RhcnRQb3Muc2V0KGxvY2FsUG9zLnggLSB0YXJnZXQueCwgbG9jYWxQb3MueSAtIHRhcmdldC55KTtcbiAgICAgICAgdGhpcy5idXR0b25Sb290Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCB0aGlzLm1vdmVTbGlkZXIpO1xuICAgICAgICB0aGlzLl9zbGlkZUJ1dHRvbi5vbihcInBvaW50ZXJ1cFwiLCB0aGlzLm1vdmVTbGlkZXJGaW5pc2gpO1xuICAgICAgICB0aGlzLl9zbGlkZUJ1dHRvbi5vbihcInBvaW50ZXJ1cG91dHNpZGVcIiwgdGhpcy5tb3ZlU2xpZGVyRmluaXNoKTtcbiAgICB9XG4gICAgb25Nb3ZlU2xpZGVyKGUpIHtcbiAgICAgICAgY29uc3QgbW91c2VQb3MgPSB0aGlzLmxpbWl0U2xpZGVyQnV0dG9uUG9zaXRpb24oZSk7XG4gICAgICAgIHRoaXMudXBkYXRlUGFydHMobW91c2VQb3MpO1xuICAgICAgICB0aGlzLl9yYXRlID0gdGhpcy5jb252ZXJ0UGl4ZWxUb1JhdGUobW91c2VQb3MpO1xuICAgICAgICB0aGlzLnNsaWRlckV2ZW50RW1pdHRlci5lbWl0KFwic2xpZGVyX2NoYW5nZVwiLCBuZXcgU2xpZGVyRXZlbnRDb250ZXh0KHRoaXMucmF0ZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjg5zjgr/jg7Pjga7kvY3nva7jgpLliLbpmZDjgZnjgovplqLmlbBcbiAgICAgKiBAcmV0dXJuIOWItumZkOOBp+WIh+OCiuiQveOBqOOBleOCjOOBn+OCueODqeOCpOODgOODvOODnOOCv+ODs+OBruW6p+aomeWApCDluqfmqJnjga7ljp/ngrnjga9TbGlkZXJWaWV344Gn44GC44KK44CB44Oc44K/44Oz44KE44OQ44O844Gn44Gv44Gq44GE44CCXG4gICAgICovXG4gICAgbGltaXRTbGlkZXJCdXR0b25Qb3NpdGlvbihldnQpIHtcbiAgICAgICAgY29uc3QgbW91c2VQb3MgPSBTbGlkZXJWaWV3VXRpbC5nZXRQb2ludGVyTG9jYWxQb3NpdGlvbih0aGlzLCB0aGlzLmlzSG9yaXpvbnRhbCwgdGhpcy5kcmFnU3RhcnRQb3MsIGV2dCk7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jbGFtcChtb3VzZVBvcywgdGhpcy5fbWF4UG9zaXRpb24sIHRoaXMuX21pblBvc2l0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog5ZCETUPjga7kvY3nva7jgIHjgrXjgqTjgrrjgpLjg57jgqbjgrnjg53jgqTjg7Pjgr/jga7kvY3nva7jgavlkIjjgo/jgZvjgabmm7TmlrDjgZnjgotcbiAgICAgKiBtb3ZlU2xpZGVy44Gu5YaF6YOo5Yem55CGXG4gICAgICogQHBhcmFtXHRtb3VzZVBvcyBTbGlkZXJWaWV344KS5Y6f54K544Go44GX44Gf44Ot44O844Kr44Or44Gu44Oe44Km44K55bqn5qiZ44CBbGltaXRTbGlkZXJCdXR0b25Qb3NpdGlvbumWouaVsOOBp+WPr+WLleevhOWbsuOBq+WItumZkOa4iOOBv+OAglxuICAgICAqL1xuICAgIHVwZGF0ZVBhcnRzKG1vdXNlUG9zKSB7XG4gICAgICAgIGNvbnN0IHN0cmV0Y2ggPSAodGFyZ2V0KSA9PiB7XG4gICAgICAgICAgICBTbGlkZXJWaWV3VXRpbC5zZXRTaXplKHRhcmdldCwgdGhpcy5pc0hvcml6b250YWwsIG1vdXNlUG9zIC0gU2xpZGVyVmlld1V0aWwuZ2V0UG9zaXRpb24odGFyZ2V0LCB0aGlzLmlzSG9yaXpvbnRhbCkpO1xuICAgICAgICB9O1xuICAgICAgICAvL+ODkOODvOODnuOCueOCr+OBjOOBquOBkeOCjOOBsOOAgeODkOODvOiHquS9k+OCkuS8uOe4ruOBmeOCi1xuICAgICAgICBpZiAodGhpcy5fYmFyICYmICF0aGlzLl9iYXJNYXNrKSB7XG4gICAgICAgICAgICBzdHJldGNoKHRoaXMuX2Jhcik7XG4gICAgICAgIH1cbiAgICAgICAgLy/jg5Djg7zjg57jgrnjgq/jgYzjgYLjgozjgbDjgIHjg57jgrnjgq/jgpLkvLjnuK7jgZnjgovjgIJcbiAgICAgICAgaWYgKHRoaXMuX2Jhck1hc2spIHtcbiAgICAgICAgICAgIHN0cmV0Y2godGhpcy5fYmFyTWFzayk7XG4gICAgICAgIH1cbiAgICAgICAgLy/jg5zjgr/jg7Pjga7kvY3nva7jgpLmm7TmlrDjgZnjgovjgIJcbiAgICAgICAgU2xpZGVyVmlld1V0aWwuc2V0UG9zaXRpb24odGhpcy5fc2xpZGVCdXR0b24sIHRoaXMuaXNIb3Jpem9udGFsLCBtb3VzZVBvcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOOBruWcsOOCkuOCr+ODquODg+OCr+OBl+OBn+mam+OBruWHpueQhlxuICAgICAqIOOBneOBruS9jee9ruOBvuOBp+OCueODqeOCpOODgOODvOOCkuOCuOODo+ODs+ODl+OBmeOCi1xuICAgICAqIEBwYXJhbSBldnRcbiAgICAgKi9cbiAgICBvblByZXNzQmFzZShldnQpIHtcbiAgICAgICAgdGhpcy5kcmFnU3RhcnRQb3Muc2V0KDAsIDApO1xuICAgICAgICB0aGlzLm1vdmVTbGlkZXIoZXZ0KTtcbiAgICAgICAgdGhpcy5zbGlkZXJFdmVudEVtaXR0ZXIuZW1pdChcInNsaWRlcl9jaGFuZ2VfZmluaXNoZWRcIiwgbmV3IFNsaWRlckV2ZW50Q29udGV4dCh0aGlzLnJhdGUpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Gu5Ymy5ZCI44GL44KJ44CB44K544Op44Kk44OA44O844Gu5L2N572u44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtXHRyYXRlXG4gICAgICogQHJldHVyblxuICAgICAqL1xuICAgIGNvbnZlcnRSYXRlVG9QaXhlbChyYXRlKSB7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jb252ZXJ0UmF0ZVRvUGl4ZWwocmF0ZSwgdGhpcy5fbWF4UG9zaXRpb24sIHRoaXMuX21pblBvc2l0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Gu5bqn5qiZ44GL44KJ44CB44K544Op44Kk44OA44O844Gu5Ymy5ZCI44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtXHRwaXhlbFxuICAgICAqIEByZXR1cm5cbiAgICAgKi9cbiAgICBjb252ZXJ0UGl4ZWxUb1JhdGUocGl4ZWwpIHtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmNvbnZlcnRQaXhlbFRvUmF0ZShwaXhlbCwgdGhpcy5fbWF4UG9zaXRpb24sIHRoaXMuX21pblBvc2l0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44OJ44Op44OD44Kw5Lit44Gu44Oe44Km44K55bqn5qiZ44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICogbGltaXRTbGlkZXJCdXR0b25Qb3NpdGlvbuWGheOBruWHpueQhuOAglxuICAgICAqL1xuICAgIGluaXRCYXNlKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlLmV2ZW50TW9kZSA9IFwic3RhdGljXCI7XG4gICAgICAgIHZhbHVlLm9uKFwicG9pbnRlcnRhcFwiLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vblByZXNzQmFzZShlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFNsaWRlclZpZXdVdGlsLmFkZENoaWxkUGFydHModGhpcywgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGluaXRCYXJBbmRNYXNrKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YWx1ZS5ldmVudE1vZGUgPSBcIm5vbmVcIjtcbiAgICAgICAgU2xpZGVyVmlld1V0aWwuYWRkQ2hpbGRQYXJ0cyh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaW5pdFNsaWRlckJ1dHRvbih2YWx1ZSkge1xuICAgICAgICB2YWx1ZS5vbihcInBvaW50ZXJkb3duXCIsIHRoaXMuc3RhcnRNb3ZlKTtcbiAgICAgICAgdmFsdWUuZXZlbnRNb2RlID0gXCJzdGF0aWNcIjtcbiAgICAgICAgU2xpZGVyVmlld1V0aWwuYWRkQ2hpbGRQYXJ0cyh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog5YWo44Gm44GuRGlzcGxheU9iamVjdOOBqEV2ZW50TGlzdGVuZXLjgpLop6PpmaTjgZnjgovjgIJcbiAgICAgKi9cbiAgICBvbkRpc3Bvc2VGdW5jdGlvbihlKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuX2Jhc2UucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLnJlbW92ZUNoaWxkcmVuKCk7XG4gICAgfVxufVxuU2xpZGVyVmlldy5NQVhfUkFURSA9IDEuMDtcbiIsIi8qKlxuICog44K544Op44Kk44OA44O844KS5Yid5pyf5YyW44GZ44KL6Zqb44Gu44Kq44OX44K344On44OzXG4gKi9cbmltcG9ydCB7IFNIQVBFUyB9IGZyb20gXCJwaXhpLmpzXCI7XG5pbXBvcnQgeyBTbGlkZXJWaWV3LCBTbGlkZXJWaWV3VXRpbCB9IGZyb20gXCIuL1wiO1xuZXhwb3J0IGNsYXNzIFNsaWRlclZpZXdPcHRpb25VdGlsIHtcbiAgICBzdGF0aWMgaW5pdChvcHRpb24pIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHRoaXMuY2hlY2sob3B0aW9uKTtcbiAgICAgICAgaWYgKG9wdGlvbi5yYXRlICE9IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbi5yYXRlID0gTWF0aC5tYXgoMCwgb3B0aW9uLnJhdGUpO1xuICAgICAgICAgICAgb3B0aW9uLnJhdGUgPSBNYXRoLm1pbihTbGlkZXJWaWV3Lk1BWF9SQVRFLCBvcHRpb24ucmF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgKF9hID0gb3B0aW9uLnJhdGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChvcHRpb24ucmF0ZSA9IDAuMCk7XG4gICAgICAgIChfYiA9IG9wdGlvbi5taW5Qb3NpdGlvbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogKG9wdGlvbi5taW5Qb3NpdGlvbiA9IDAuMCk7XG4gICAgICAgIChfYyA9IG9wdGlvbi5pc0hvcml6b250YWwpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IChvcHRpb24uaXNIb3Jpem9udGFsID0gdHJ1ZSk7XG4gICAgICAgIHJldHVybiBvcHRpb247XG4gICAgfVxuICAgIHN0YXRpYyBjaGVjayhvcHRpb24pIHtcbiAgICAgICAgdGhpcy5jaGVja1BhcnRzKG9wdGlvbi5iYXNlLCBcImJhc2VcIik7XG4gICAgICAgIHRoaXMuY2hlY2tQYXJ0cyhvcHRpb24uYnV0dG9uLCBcImJ1dHRvblwiKTtcbiAgICAgICAgdGhpcy5jaGVja1BhcnRzKG9wdGlvbi5tYXNrLCBcIm1hc2tcIik7XG4gICAgICAgIHRoaXMuY2hlY2tQYXJ0cyhvcHRpb24uYmFyLCBcImJhclwiKTtcbiAgICB9XG4gICAgc3RhdGljIGNoZWNrUGFydHMob2JqLCB0YXJnZXROYW1lKSB7XG4gICAgICAgIGlmIChvYmogPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgYm91bmRzID0gU2xpZGVyVmlld1V0aWwuZ2V0Q29udGVudHNCb3VuZHMob2JqKTtcbiAgICAgICAgaWYgKGJvdW5kcy53aWR0aCA9PT0gMCAmJlxuICAgICAgICAgICAgYm91bmRzLmhlaWdodCA9PT0gMCAmJlxuICAgICAgICAgICAgYm91bmRzLnR5cGUgPT09IFNIQVBFUy5SRUNUKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFNsaWRlclZpZXcgOiAke3RhcmdldE5hbWV9IOWIneacn+WMluOCquODl+OCt+ODp+ODs+OBp+aMh+WumuOBleOCjOOBn0Rpc3BsYXlPYmplY3Tjgavjg5Djgqbjg7Pjg4fjgqPjg7PjgrDjg5zjg4Pjgq/jgrnjgYzlrZjlnKjjgZfjgb7jgZvjgpPjgIJDb250YWluZXLjgpLliKnnlKjjgZnjgovloLTlkIjjga9oaXRBcmVh44KS5Yip55So44GX44Gm44OQ44Km44Oz44OH44Kj44Oz44Kw44Oc44OD44Kv44K544KS5omL5YuV44Gn6Kit5a6a44GX44Gm44GP44Gg44GV44GE44CCYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iai5wYXJlbnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihg5Yid5pyf5YyW44Kq44OX44K344On44Oz44Gn5oyH5a6a44GV44KM44Gf44OR44O844OE44GM44GZ44Gn44Gr5Yil44Gu6Kaq44GrYWRkQ2hpbGTjgZXjgozjgabjgYTjgb7jgZnjgIJTbGlkZXJWaWV344GK44KI44GzU2Nyb2xsQmFyVmlld+OBruani+aIkOODkeODvOODhOOBr+WQjOS4gOOBruOCs+ODs+ODhuODiuOBq2FkZENoaWxk44GV44KM44KL44GT44Go44KS5YmN5o+Q44Go44GX44Gm44GE44G+44GZ44CCYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiQHBpeGkvdXRpbHNcIjtcbmltcG9ydCB7IEVhc2luZywgVHdlZW4gfSBmcm9tIFwiQHR3ZWVuanMvdHdlZW4uanNcIjtcbmltcG9ydCB7IFRpY2tlciwgfSBmcm9tIFwicGl4aS5qc1wiO1xuaW1wb3J0IHsgU2xpZGVyVmlld1V0aWwgfSBmcm9tIFwiLi4vXCI7XG5pbXBvcnQgeyBTY3JvbGxCYXJWaWV3VXRpbCB9IGZyb20gXCIuL1wiO1xuLyoqXG4gKiDjgrnjgq/jg63jg7zjg6vjg5Djg7zjgqjjg6rjgqLjga7mhaPmgKfjgrnjgq/jg63jg7zjg6vjgpLlh6bnkIbjgZnjgovjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEluZXJ0aWFsU2Nyb2xsTWFuYWdlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgZ2V0IHNwZWVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3BlZWQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHNjcm9sbEJhclZpZXcpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5kZWNlbGVyYXRpb25SYXRlID0gMC45NzU7XG4gICAgICAgIHRoaXMub3ZlcmZsb3dTY3JvbGxSYW5nZSA9IDE4MDtcbiAgICAgICAgdGhpcy5fc3BlZWQgPSAwLjA7XG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc1N0YXJ0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25Nb3VzZURvd24gPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVEcmFnUG9zKGUpO1xuICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3NwZWVkID0gMC4wO1xuICAgICAgICAgICAgaWYgKHRoaXMudHdlZW4pXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwb3NlVHdlZW4oKTtcbiAgICAgICAgICAgIHRoaXMuYWRkRHJhZ0xpc3RlbmVyKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25Nb3VzZU1vdmUgPSAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZHJhZ1BvcyA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gdGhpcy5nZXREcmFnUG9zKGUpIC0gdGhpcy5kcmFnUG9zO1xuICAgICAgICAgICAgdGhpcy5fc3BlZWQgPSBkZWx0YTtcbiAgICAgICAgICAgIHRoaXMuYWRkVGFyZ2V0UG9zaXRpb24oZGVsdGEgKiB0aGlzLmdldE92ZXJmbG93RGVjZWxlcmF0aW9uKCkpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVEcmFnUG9zKGUpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uTW91c2VVcCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRHJhZ0xpc3RlbmVyKCk7XG4gICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMub25UaWNrKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25UaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNEcmFnZ2luZylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAodGhpcy5fc3BlZWQgPT09IDAuMCAmJiB0aGlzLmdldExlYXZlUmFuZ2VGcm9tTWFzaygpID09PSAwLjApXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKChfYSA9IHRoaXMudHdlZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pc1BsYXlpbmcoKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvL+S9jee9ruOBq+OCiOOCi+a4m+mAn+eOh+Wil+WKoOOAguODnuOCueOCr+OCqOODquOCouOBi+OCiembouOCjOOBpuOBhOOCi+OBquOCiea4m+mAn+eOh+OBjOWkp+OBjeOBj+OBquOCi+OAglxuICAgICAgICAgICAgY29uc3Qgb3ZlcmZsb3dEZWNlbGVyYXRpb24gPSB0aGlzLmdldE92ZXJmbG93RGVjZWxlcmF0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLl9zcGVlZCAqPSB0aGlzLmRlY2VsZXJhdGlvblJhdGUgKiBvdmVyZmxvd0RlY2VsZXJhdGlvbjtcbiAgICAgICAgICAgIHRoaXMuYWRkVGFyZ2V0UG9zaXRpb24odGhpcy5fc3BlZWQpO1xuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuX3NwZWVkKSA+IDAuMSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvL2JhY2sgZWFzZVxuICAgICAgICAgICAgdGhpcy5fc3BlZWQgPSAwLjA7XG4gICAgICAgICAgICBjb25zdCB0b09iaiA9IHsgeTogdGhpcy5nZXRDbGFtcGVkUG9zKCkgfTtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZVR3ZWVuKCk7XG4gICAgICAgICAgICB0aGlzLnR3ZWVuID0gbmV3IFR3ZWVuKHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQpXG4gICAgICAgICAgICAgICAgLnRvKHRvT2JqLCA2NjYpXG4gICAgICAgICAgICAgICAgLm9uVXBkYXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJ1cGRhdGVfdGFyZ2V0X3Bvc2l0aW9uXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZWFzaW5nKEVhc2luZy5DdWJpYy5PdXQpXG4gICAgICAgICAgICAgICAgLnN0YXJ0KCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3RvcEluZXJ0aWFsID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc3BlZWQgPSAwLjA7XG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2VUd2VlbigpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRpc3Bvc2VUd2VlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnR3ZWVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50d2Vlbi5zdG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy50d2VlbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zY3JvbGxCYXJWaWV3ID0gc2Nyb2xsQmFyVmlldztcbiAgICAgICAgc2Nyb2xsQmFyVmlldy5zY3JvbGxCYXJFdmVudEVtaXR0ZXIub24oXCJzdG9wX2luZXJ0aWFsX3R3ZWVuXCIsIHRoaXMuc3RvcEluZXJ0aWFsKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgdGFyZ2V0LmV2ZW50TW9kZSA9IFwic3RhdGljXCI7XG4gICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1N0YXJ0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9pc1N0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgdGFyZ2V0Lm9uKFwicG9pbnRlcmRvd25cIiwgdGhpcy5vbk1vdXNlRG93bik7XG4gICAgICAgIFRpY2tlci5zaGFyZWQuYWRkKHRoaXMub25UaWNrKTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1N0YXJ0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9pc1N0YXJ0ID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQ7XG4gICAgICAgIHRhcmdldC5vZmYoXCJwb2ludGVyZG93blwiLCB0aGlzLm9uTW91c2VEb3duKTtcbiAgICAgICAgdGhpcy5yZW1vdmVEcmFnTGlzdGVuZXIoKTtcbiAgICAgICAgdGhpcy5zdG9wSW5lcnRpYWwoKTtcbiAgICAgICAgVGlja2VyLnNoYXJlZC5yZW1vdmUodGhpcy5vblRpY2spO1xuICAgIH1cbiAgICBhZGREcmFnTGlzdGVuZXIoKSB7XG4gICAgICAgIHRoaXMuc3dpdGNoRHJhZ0xpc3RlbmVyKHRydWUpO1xuICAgIH1cbiAgICByZW1vdmVEcmFnTGlzdGVuZXIoKSB7XG4gICAgICAgIHRoaXMuc3dpdGNoRHJhZ0xpc3RlbmVyKGZhbHNlKTtcbiAgICB9XG4gICAgc3dpdGNoRHJhZ0xpc3RlbmVyKGlzT24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnNjcm9sbEJhclZpZXcuY29udGVudHMudGFyZ2V0O1xuICAgICAgICBjb25zdCBkcmFnVGFyZ2V0ID0gKF9hID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNhbnZhcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGFyZ2V0O1xuICAgICAgICBjb25zdCBzd2l0Y2hMaXN0ZW5lciA9IChpc09uLCBkcmFnVGFyZ2V0LCBldmVudCwgbGlzdGVuZXIpID0+IHtcbiAgICAgICAgICAgIGlmIChpc09uKSB7XG4gICAgICAgICAgICAgICAgZHJhZ1RhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkcmFnVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc3dpdGNoTGlzdGVuZXIoaXNPbiwgZHJhZ1RhcmdldCwgXCJwb2ludGVybW92ZVwiLCB0aGlzLm9uTW91c2VNb3ZlKTtcbiAgICAgICAgc3dpdGNoTGlzdGVuZXIoaXNPbiwgdGFyZ2V0LCBcInBvaW50ZXJ1cFwiLCB0aGlzLm9uTW91c2VVcCk7XG4gICAgICAgIHN3aXRjaExpc3RlbmVyKGlzT24sIHRhcmdldCwgXCJwb2ludGVydXBvdXRzaWRlXCIsIHRoaXMub25Nb3VzZVVwKTtcbiAgICB9XG4gICAgZ2V0RHJhZ1BvcyhlKSB7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5nZXRQb2ludGVyRXZlbnRQb3NpdGlvbihlLCB0aGlzLnNjcm9sbEJhclZpZXcuaXNIb3Jpem9udGFsKTtcbiAgICB9XG4gICAgdXBkYXRlRHJhZ1BvcyhlKSB7XG4gICAgICAgIHRoaXMuZHJhZ1BvcyA9IHRoaXMuZ2V0RHJhZ1BvcyhlKTtcbiAgICB9XG4gICAgYWRkVGFyZ2V0UG9zaXRpb24oZGVsdGEpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5zY3JvbGxCYXJWaWV3LmlzSG9yaXpvbnRhbDtcbiAgICAgICAgY29uc3QgY3VycmVudFBvcyA9IFNsaWRlclZpZXdVdGlsLmdldFBvc2l0aW9uKHRhcmdldCwgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgU2xpZGVyVmlld1V0aWwuc2V0UG9zaXRpb24odGFyZ2V0LCBpc0hvcml6b250YWwsIGN1cnJlbnRQb3MgKyBkZWx0YSk7XG4gICAgICAgIHRoaXMuZW1pdChcInVwZGF0ZV90YXJnZXRfcG9zaXRpb25cIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueOCr+ODreODvOODq+OBruOCquODvOODkOODvOODleODreODvOmHj+OBi+OCieOAgea4m+mAgOeOh+OCkuWJsuOCiuWHuuOBmeOAglxuICAgICAqIG92ZXJmbG93U2Nyb2xsUmFuZ2Xku6XkuIrjgavpm6LjgozjgabjgYTjgovloLTlkIjjga8wLjBcbiAgICAgKiDjgrnjgq/jg63jg7zjg6vjgqjjg6rjgqLlhoXjgavjgrPjg7Pjg4bjg7Pjg4TjgYzjgYLjgovloLTlkIjjga8xLjDjgpLov5TjgZnjgIJcbiAgICAgKi9cbiAgICBnZXRPdmVyZmxvd0RlY2VsZXJhdGlvbigpIHtcbiAgICAgICAgY29uc3QgZGlmUG9zID0gdGhpcy5nZXRMZWF2ZVJhbmdlRnJvbU1hc2soKTtcbiAgICAgICAgbGV0IG92ZXJmbG93RGVjZWxlcmF0aW9uID0gKHRoaXMub3ZlcmZsb3dTY3JvbGxSYW5nZSAtIGRpZlBvcykgLyB0aGlzLm92ZXJmbG93U2Nyb2xsUmFuZ2U7XG4gICAgICAgIGlmIChvdmVyZmxvd0RlY2VsZXJhdGlvbiA8IDAuMClcbiAgICAgICAgICAgIG92ZXJmbG93RGVjZWxlcmF0aW9uID0gMC4wO1xuICAgICAgICByZXR1cm4gb3ZlcmZsb3dEZWNlbGVyYXRpb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCv+ODvOOCsuODg+ODiOOCs+ODs+ODhuODs+ODhOOBjOODnuOCueOCr+mgmOWfn+OBi+OCieOBqeOCjOOBoOOBkembouOCjOOBpuOBhOOCi+OBi+OAglxuICAgICAqL1xuICAgIGdldExlYXZlUmFuZ2VGcm9tTWFzaygpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5zY3JvbGxCYXJWaWV3LmlzSG9yaXpvbnRhbDtcbiAgICAgICAgY29uc3QgY3VycmVudFBvcyA9IFNsaWRlclZpZXdVdGlsLmdldFBvc2l0aW9uKHRhcmdldCwgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgY2xhbXBlZFBvcyA9IHRoaXMuZ2V0Q2xhbXBlZFBvcygpO1xuICAgICAgICByZXR1cm4gTWF0aC5hYnMoY3VycmVudFBvcyAtIGNsYW1wZWRQb3MpO1xuICAgIH1cbiAgICBnZXRDbGFtcGVkUG9zKCkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnNjcm9sbEJhclZpZXcuY29udGVudHMudGFyZ2V0O1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLnNjcm9sbEJhclZpZXcuaXNIb3Jpem9udGFsO1xuICAgICAgICByZXR1cm4gU2Nyb2xsQmFyVmlld1V0aWwuZ2V0Q2xhbXBlZFRhcmdldFBvc2l0aW9uKHRhcmdldCwgdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLm1hc2ssIGlzSG9yaXpvbnRhbCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBwaXhpL3V0aWxzXCI7XG5pbXBvcnQgeyBTbGlkZXJWaWV3VXRpbCB9IGZyb20gXCIuLi9cIjtcbmltcG9ydCB7IFNjcm9sbEJhclZpZXdVdGlsIH0gZnJvbSBcIi4vXCI7XG4vKipcbiAqIFNjcm9sbEJhclZpZXfjgpLlj5fjgZHlj5bjgorjgIHjg57jgqbjgrnjg5vjgqTjg7zjg6vjgavjgojjgovmk43kvZzjgpLooYzjgYbjgq/jg6njgrlcbiAqL1xuZXhwb3J0IGNsYXNzIE1vdXNlV2hlZWxTY3JvbGxNYW5hZ2VyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzY3JvbGxCYXJWaWV3KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZGVsdGEgPSAxNjtcbiAgICAgICAgdGhpcy5faXNTdGFydCA9IGZhbHNlO1xuICAgICAgICAvL1RPRE8gYWRkIHN1cHBvcnQgZGVsdGFYIC8gZGVsdGFZXG4gICAgICAgIHRoaXMud2hlZWxIYW5kbGVyID0gKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNoaWZ0ID0gZS5kZWx0YVkgPiAwID8gLXRoaXMuZGVsdGEgOiB0aGlzLmRlbHRhO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGwoc2hpZnQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNjcm9sbEJhclZpZXcgPSBzY3JvbGxCYXJWaWV3O1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnNjcm9sbEJhclZpZXcuY29udGVudHMudGFyZ2V0O1xuICAgICAgICB0YXJnZXQuZXZlbnRNb2RlID0gXCJzdGF0aWNcIjtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzU3RhcnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQ7XG4gICAgICAgIHRhcmdldC5vbihcIndoZWVsXCIsIHRoaXMud2hlZWxIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5faXNTdGFydCA9IHRydWU7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQ7XG4gICAgICAgIHRhcmdldC5vZmYoXCJ3aGVlbFwiLCB0aGlzLndoZWVsSGFuZGxlcik7XG4gICAgICAgIHRoaXMuX2lzU3RhcnQgPSBmYWxzZTtcbiAgICB9XG4gICAgc2Nyb2xsKGRlbHRhKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQ7XG4gICAgICAgIGNvbnN0IG1hc2sgPSB0aGlzLnNjcm9sbEJhclZpZXcuY29udGVudHMubWFzaztcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5zY3JvbGxCYXJWaWV3LmlzSG9yaXpvbnRhbDtcbiAgICAgICAgY29uc3QgcG9zID0gU2xpZGVyVmlld1V0aWwuZ2V0UG9zaXRpb24odGFyZ2V0LCBpc0hvcml6b250YWwpICsgZGVsdGE7XG4gICAgICAgIFNjcm9sbEJhclZpZXdVdGlsLmNsYW1wVGFyZ2V0UG9zaXRpb24odGFyZ2V0LCBtYXNrLCBwb3MsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIHRoaXMuZW1pdChcInVwZGF0ZV90YXJnZXRfcG9zaXRpb25cIik7XG4gICAgICAgIHRoaXMuc2Nyb2xsQmFyVmlldy5zY3JvbGxCYXJFdmVudEVtaXR0ZXIuZW1pdChcInN0b3BfaW5lcnRpYWxfdHdlZW5cIik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBwaXhpL3V0aWxzXCI7XG5pbXBvcnQgeyBTbGlkZXJWaWV3LCBTbGlkZXJWaWV3VXRpbCB9IGZyb20gXCIuLi9cIjtcbi8qKlxuICog44K544Kv44Ot44O844Or44OQ44O844Gn5pON5L2c44GZ44KL44Kz44Oz44OG44Oz44OEXG4gKi9cbmV4cG9ydCBjbGFzcyBTY3JvbGxCYXJDb250ZW50cyBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgZ2V0IHRhcmdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldDtcbiAgICB9XG4gICAgc2V0IHRhcmdldCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl90YXJnZXQgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lbWl0KFwiY2hhbmdlZF9jb250ZW50c19zaXplXCIpO1xuICAgIH1cbiAgICBnZXQgbWFzaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hc2s7XG4gICAgfVxuICAgIHNldCBtYXNrKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX21hc2sgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lbWl0KFwiY2hhbmdlZF9jb250ZW50c19zaXplXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXJnZXQg44K544Kv44Ot44O844Or5pON5L2c44KS5Y+X44GR44KL44Kz44Oz44OG44Oz44OEXG4gICAgICogQHBhcmFtIG1hc2sgdGFyZ2V044KS5YiH44KK5oqc44GP44Oe44K544KvXG4gICAgICogQHBhcmFtIGNvbnRhaW5lciB0YXJnZXTjgYrjgojjgbNtYXNr44KS5qC857SN44GZ44KL6Kaq44Kz44Oz44OG44OKXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGFyZ2V0LCBtYXNrLCBjb250YWluZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy5fbWFzayA9IG1hc2s7XG4gICAgICAgIFNjcm9sbEJhckNvbnRlbnRzLmluaXQodGhpcyk7XG4gICAgfVxuICAgIHN0YXRpYyBpbml0KHNjcm9sbEJhckNvbnRlbnRzKSB7XG4gICAgICAgIGlmIChzY3JvbGxCYXJDb250ZW50cy5fdGFyZ2V0Lm1hc2sgIT09IHNjcm9sbEJhckNvbnRlbnRzLl9tYXNrKSB7XG4gICAgICAgICAgICBzY3JvbGxCYXJDb250ZW50cy5fdGFyZ2V0Lm1hc2sgPSBzY3JvbGxCYXJDb250ZW50cy5fbWFzaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZGRUb0NvbnRhaW5lciA9IChkaXNwbGF5T2JqZWN0KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAoZGlzcGxheU9iamVjdC5wYXJlbnQgPT09IHNjcm9sbEJhckNvbnRlbnRzLmNvbnRhaW5lcilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAoX2EgPSBkaXNwbGF5T2JqZWN0LnBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlbW92ZUNoaWxkKGRpc3BsYXlPYmplY3QpO1xuICAgICAgICAgICAgc2Nyb2xsQmFyQ29udGVudHMuY29udGFpbmVyLmFkZENoaWxkKGRpc3BsYXlPYmplY3QpO1xuICAgICAgICB9O1xuICAgICAgICBhZGRUb0NvbnRhaW5lcihzY3JvbGxCYXJDb250ZW50cy5fdGFyZ2V0KTtcbiAgICAgICAgYWRkVG9Db250YWluZXIoc2Nyb2xsQmFyQ29udGVudHMuX21hc2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDnj77nirbjga7jgrnjgq/jg63jg7zjg6vkvY3nva7jgpLlj5blvpfjgZnjgovjgILljZjkvY1yYXRlXG4gICAgICogMC4w44Gn44Kz44Oz44OG44Oz44OE44GvVE9QLCAxLjDjgadCT1RUT03jgavkvY3nva7jgZfjgabjgYTjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpc0hvcml6b250YWxcbiAgICAgKi9cbiAgICBnZXRTY3JvbGxQb3NpdGlvbkFzUmF0ZShpc0hvcml6b250YWwpIHtcbiAgICAgICAgY29uc3QgZ2V0UG9zID0gU2xpZGVyVmlld1V0aWwuZ2V0UG9zaXRpb247XG4gICAgICAgIGNvbnN0IHplcm9Qb3MgPSBnZXRQb3ModGhpcy5tYXNrLCBpc0hvcml6b250YWwpO1xuICAgICAgICBjb25zdCBjb250ZW50c1BvcyA9IGdldFBvcyh0aGlzLnRhcmdldCwgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgY29udGVudHNQb3NpdGlvbkRpZiA9IHplcm9Qb3MgLSBjb250ZW50c1BvcztcbiAgICAgICAgY29uc3QgbW92YWJsZVJhbmdlID0gdGhpcy5nZXRNb3ZhYmxlUmFuZ2UoaXNIb3Jpem9udGFsKTtcbiAgICAgICAgcmV0dXJuIChjb250ZW50c1Bvc2l0aW9uRGlmIC8gbW92YWJsZVJhbmdlKSAqIFNsaWRlclZpZXcuTUFYX1JBVEU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueOCr+ODreODvOODq+OBruacgOWkp+WPr+WLlemgmOWfn+OCkuWPluW+l+OBmeOCi+OAguWNmOS9jXB4XG4gICAgICog44KC44GX5Y+v5YuV5Z+f44GM44K844OtcHjku6XkuIvjga7loLTlkIjjgIHmpbXlsI/jga7mraPjga7lgKTjgpLov5TjgZnjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpc0hvcml6b250YWxcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldE1vdmFibGVSYW5nZShpc0hvcml6b250YWwpIHtcbiAgICAgICAgY29uc3QgZ2V0U2l6ZSA9IFNsaWRlclZpZXdVdGlsLmdldFNpemU7XG4gICAgICAgIGNvbnN0IHRhcmdldFNpemUgPSBnZXRTaXplKHRoaXMuX3RhcmdldCwgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgbWFza1NpemUgPSBnZXRTaXplKHRoaXMuX21hc2ssIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IGRpZiA9IHRhcmdldFNpemUgLSBtYXNrU2l6ZTtcbiAgICAgICAgaWYgKGRpZiA8PSAwLjApIHtcbiAgICAgICAgICAgIHJldHVybiAxZS0xMjg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpZjtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Kz44Oz44OG44Oz44OE44KS44CB5oyH5a6a44GV44KM44GfcmF0ZeOBruS9jee9ruOBvuOBp+OCueOCr+ODreODvOODq+OBmeOCi1xuICAgICAqXG4gICAgICogQHBhcmFtIHJhdGVcbiAgICAgKiBAcGFyYW0gaXNIb3Jpem9udGFsXG4gICAgICovXG4gICAgc2Nyb2xsKHJhdGUsIGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBjb25zdCBnZXRQb3MgPSBTbGlkZXJWaWV3VXRpbC5nZXRQb3NpdGlvbjtcbiAgICAgICAgY29uc3QgemVyb1BvcyA9IGdldFBvcyh0aGlzLl9tYXNrLCBpc0hvcml6b250YWwpO1xuICAgICAgICBjb25zdCBtb3ZhYmxlUmFuZ2UgPSB0aGlzLmdldE1vdmFibGVSYW5nZShpc0hvcml6b250YWwpO1xuICAgICAgICBjb25zdCBjb250ZW50c1BvcyA9IHplcm9Qb3MgLSBtb3ZhYmxlUmFuZ2UgKiAocmF0ZSAvIFNsaWRlclZpZXcuTUFYX1JBVEUpO1xuICAgICAgICBTbGlkZXJWaWV3VXRpbC5zZXRQb3NpdGlvbih0aGlzLl90YXJnZXQsIGlzSG9yaXpvbnRhbCwgY29udGVudHNQb3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjg4bjg7Pjg4TjgYzooajnpLrpoJjln5/jgavjganjgozjgaDjgZHooajnpLrjgZXjgozjgabjgYTjgovjgYvjga7mr5TnjofjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKiDjgZPjga7mr5Tnjofjga/jgIHjgrnjgq/jg63jg7zjg6vjg5Djg7zjg5zjgr/jg7Pjga7jgrnjgrHjg7zjg6vjgajjgarjgovjgIJcbiAgICAgKlxuICAgICAqIOS+iyA6IOOCs+ODs+ODhuODs+ODhOOCteOCpOOCuuOBjDIwMOOAgeihqOekuumgmOWfn+OBjDEwMOOBquOCiTAuNVxuICAgICAqIOOCs+ODs+ODhuODs+ODhOOBjOOBmeOBueOBpuihqOekuuOBleOCjOOBpuOBhOOCi+OBquOCiTEuMFxuICAgICAqXG4gICAgICogQHBhcmFtIGlzSG9yaXpvbnRhbFxuICAgICAqIEByZXR1cm4gMC4wIH4gMS4wXG4gICAgICovXG4gICAgZ2V0RGlzcGxheVJhdGUoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGNvbnN0IGdldFNpemUgPSBTbGlkZXJWaWV3VXRpbC5nZXRTaXplO1xuICAgICAgICBjb25zdCBjb250ZW50c1NpemUgPSBnZXRTaXplKHRoaXMudGFyZ2V0LCBpc0hvcml6b250YWwpO1xuICAgICAgICBjb25zdCBtYXNrU2l6ZSA9IGdldFNpemUodGhpcy5tYXNrLCBpc0hvcml6b250YWwpO1xuICAgICAgICByZXR1cm4gU2xpZGVyVmlld1V0aWwuY2xhbXAobWFza1NpemUgLyBjb250ZW50c1NpemUsIFNsaWRlclZpZXcuTUFYX1JBVEUsIDAuMCk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBwaXhpL3V0aWxzXCI7XG5pbXBvcnQgeyBTbGlkZXJWaWV3LCBTbGlkZXJWaWV3T3B0aW9uVXRpbCwgU2xpZGVyVmlld1V0aWwsIH0gZnJvbSBcIi4uL1wiO1xuaW1wb3J0IHsgSW5lcnRpYWxTY3JvbGxNYW5hZ2VyLCBNb3VzZVdoZWVsU2Nyb2xsTWFuYWdlciwgU2Nyb2xsQmFyVmlld1V0aWwsIH0gZnJvbSBcIi4vXCI7XG4vKipcbiAqIOOCueOCr+ODreODvOODq+ODkOODvOOCkuihqOOBmeOCr+ODqeOCueOBp+OBmeOAglxuICpcbiAqIOOBk+OBruOCr+ODqeOCueOBr+OAgeOCueODqeOCpOODgOODvOOBq+S7peS4i+OBruapn+iDveOCkui/veWKoOOBl+OBn+OCguOBruOBp+OBmeOAglxuICpcbiAqIFx0XHQxLuOCs+ODs+ODhuODs+ODhOOCteOCpOOCuuOBq+WQiOOCj+OBm+OBn+OAgeOCueOCr+ODreODvOODq+ODkOODvOOBruS8uOe4rlxuICogXHRcdDIu44K544Kv44Ot44O844Or44OQ44O844Gu5Ly457iu44Gr44GC44KP44Gb44Gf44CB56e75YuV56+E5Zuy44Gu5Yi26ZmQXG4gKiBcdFx0My7jgrnjgq/jg63jg7zjg6vjg5Djg7zjga7kvLjnuK7jgavjgYLjgo/jgZvjgZ/jgIHnp7vli5XlgKTjga7lj5blvpdcbiAqL1xuZXhwb3J0IGNsYXNzIFNjcm9sbEJhclZpZXcgZXh0ZW5kcyBTbGlkZXJWaWV3IHtcbiAgICBnZXQgYXV0b0hpZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hdXRvSGlkZTtcbiAgICB9XG4gICAgc2V0IGF1dG9IaWRlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2F1dG9IaWRlID0gdmFsdWU7XG4gICAgICAgIHRoaXMudXBkYXRlU2xpZGVyVmlzaWJsZSgpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihvcHRpb24sIHNjcm9sbENvbnRlbnRzKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbik7XG4gICAgICAgIHRoaXMuX2F1dG9IaWRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2Nyb2xsQmFyRXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICog44K544Op44Kk44OA44O844Kk44OZ44Oz44OI44Gr5b+c44GY44Gm44Kz44Oz44OG44Oz44OE44KS44K544Kv44Ot44O844Or44GZ44KLXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnRzUG9zaXRpb24gPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDb250ZW50c1Bvc2l0aW9uV2l0aFJhdGUoZS5yYXRlKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaW5pdE9wdGlvbiA9IFNsaWRlclZpZXdPcHRpb25VdGlsLmluaXQob3B0aW9uKTtcbiAgICAgICAgdGhpcy5jb250ZW50cyA9IHNjcm9sbENvbnRlbnRzO1xuICAgICAgICB0aGlzLmNvbnRlbnRzLm9uKFwiY2hhbmdlZF9jb250ZW50c19zaXplXCIsIHRoaXMudXBkYXRlU2xpZGVyKTtcbiAgICAgICAgdGhpcy5zbGlkZXJFdmVudEVtaXR0ZXIub24oXCJzbGlkZXJfY2hhbmdlXCIsIHRoaXMudXBkYXRlQ29udGVudHNQb3NpdGlvbik7XG4gICAgICAgIHRoaXMuY2hhbmdlUmF0ZShpbml0T3B0aW9uLnJhdGUpO1xuICAgICAgICB0aGlzLndoZWVsTWFuYWdlciA9IG5ldyBNb3VzZVdoZWVsU2Nyb2xsTWFuYWdlcih0aGlzKTtcbiAgICAgICAgdGhpcy53aGVlbE1hbmFnZXIub24oXCJ1cGRhdGVfdGFyZ2V0X3Bvc2l0aW9uXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2xpZGVyUG9zaXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW5lcnRpYWxNYW5hZ2VyID0gbmV3IEluZXJ0aWFsU2Nyb2xsTWFuYWdlcih0aGlzKTtcbiAgICAgICAgdGhpcy5pbmVydGlhbE1hbmFnZXIub24oXCJ1cGRhdGVfdGFyZ2V0X3Bvc2l0aW9uXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2xpZGVyUG9zaXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOODnOOCv+ODs+OBruS9jee9ruOCkuWItumZkOOBmeOCi+mWouaVsFxuICAgICAqIEByZXR1cm4g5Yi26ZmQ44Gn5YiH44KK6JC944Go44GV44KM44Gf44K544Op44Kk44OA44O844Oc44K/44Oz44Gu5bqn5qiZ5YCkXG4gICAgICovXG4gICAgbGltaXRTbGlkZXJCdXR0b25Qb3NpdGlvbihldnQpIHtcbiAgICAgICAgY29uc3QgbW91c2VQb3MgPSBTbGlkZXJWaWV3VXRpbC5nZXRQb2ludGVyTG9jYWxQb3NpdGlvbih0aGlzLCB0aGlzLmlzSG9yaXpvbnRhbCwgdGhpcy5kcmFnU3RhcnRQb3MsIGV2dCk7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRSYW5nZU9mU2xpZGVyQnV0dG9uUG9zaXRpb24oKTtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmNsYW1wKG1vdXNlUG9zLCByYW5nZS5tYXgsIHJhbmdlLm1pbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOOBruWJsuWQiOOBi+OCieOAgeOCueODqeOCpOODgOODvOOBruS9jee9ruOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbVx0cmF0ZVxuICAgICAqIEByZXR1cm5cbiAgICAgKi9cbiAgICBjb252ZXJ0UmF0ZVRvUGl4ZWwocmF0ZSkge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPZlNsaWRlckJ1dHRvblBvc2l0aW9uKCk7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jb252ZXJ0UmF0ZVRvUGl4ZWwocmF0ZSwgcmFuZ2UubWF4LCByYW5nZS5taW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjga7luqfmqJnjgYvjgonjgIHjgrnjg6njgqTjg4Djg7zjga7libLlkIjjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW1cdHBpeGVsXG4gICAgICogQHJldHVyblxuICAgICAqL1xuICAgIGNvbnZlcnRQaXhlbFRvUmF0ZShwaXhlbCkge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPZlNsaWRlckJ1dHRvblBvc2l0aW9uKCk7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jb252ZXJ0UGl4ZWxUb1JhdGUocGl4ZWwsIHJhbmdlLm1heCwgcmFuZ2UubWluKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Oc44K/44Oz44Gu5Y+v5YuV56+E5Zuy44KS5Y+W5b6X44GZ44KL44CC5Y2Y5L2N44OU44Kv44K744OrXG4gICAgICovXG4gICAgZ2V0UmFuZ2VPZlNsaWRlckJ1dHRvblBvc2l0aW9uKCkge1xuICAgICAgICBjb25zdCBidXR0b25TaXplID0gdGhpcy5zbGlkZUJ1dHRvblNpemU7XG4gICAgICAgIGNvbnN0IHJhdGlvID0gU2Nyb2xsQmFyVmlld1V0aWwuZ2V0UmF0aW9PZk9yaWdpbih0aGlzLl9zbGlkZUJ1dHRvbiwgdGhpcy5pc0hvcml6b250YWwpO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLl9tYXhQb3NpdGlvbiAtICgxLjAgKyByYXRpbykgKiBidXR0b25TaXplO1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLl9taW5Qb3NpdGlvbiAtIHJhdGlvICogYnV0dG9uU2l6ZTtcbiAgICAgICAgcmV0dXJuIHsgbWF4LCBtaW4gfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Oc44K/44Oz44Gu44K144Kk44K644CCXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgc2xpZGVCdXR0b25TaXplKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclNpemUoKTtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmdldFNpemUodGhpcy5fc2xpZGVCdXR0b24sIHRoaXMuaXNIb3Jpem9udGFsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Kv44Ot44O844Or44OQ44O844Gu44Oc44K/44Oz44K144Kk44K65Y+K44Gz5L2N572u44KS5pu05paw44GZ44KL44CCXG4gICAgICog44Kz44Oz44OG44Oz44OE44K144Kk44K644GM5aSJ5pu044GV44KM44Gf5aC05ZCI44Gu5pu05paw44Gr44KC5Yip55So44GZ44KL44CCXG4gICAgICovXG4gICAgdXBkYXRlU2xpZGVyKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNVcGRhdGFibGVTbGlkZXJTaXplKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMudXBkYXRlU2xpZGVyU2l6ZSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclBvc2l0aW9uKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOePvueKtuOBruOCs+ODs+ODhuODs+ODhOOBiuOCiOOBs+ODnuOCueOCr+S9jee9ruOBi+OCieOAgeOCueODqeOCpOODgOODvOOBruWJsuWQiOOCkueul+WHuuOBmeOCi+OAglxuICAgICAqIOOBneOBruWJsuWQiOOBp+OCueODqeOCpOODgOODvOOBruS9jee9ruOCkuabtOaWsOOBmeOCi+OAglxuICAgICAqL1xuICAgIHVwZGF0ZVNsaWRlclBvc2l0aW9uKCkge1xuICAgICAgICBjb25zdCByYXRlID0gdGhpcy5jb250ZW50cy5nZXRTY3JvbGxQb3NpdGlvbkFzUmF0ZSh0aGlzLmlzSG9yaXpvbnRhbCk7XG4gICAgICAgIHRoaXMuY2hhbmdlUmF0ZShyYXRlKTtcbiAgICB9XG4gICAgaXNVcGRhdGFibGVTbGlkZXJTaXplKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gKCgoX2EgPSB0aGlzLmNvbnRlbnRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGFyZ2V0KSAhPSBudWxsICYmXG4gICAgICAgICAgICAoKF9iID0gdGhpcy5jb250ZW50cykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm1hc2spICE9IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uICE9IG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjg5zjgr/jg7Pjga7jgrXjgqTjgrrjga7kvLjnuK7jgpLooYzjgYbjgIJcbiAgICAgKi9cbiAgICB1cGRhdGVTbGlkZXJTaXplKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNVcGRhdGFibGVTbGlkZXJTaXplKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGZ1bGxTaXplID0gdGhpcy5fbWF4UG9zaXRpb24gLSB0aGlzLl9taW5Qb3NpdGlvbjtcbiAgICAgICAgY29uc3QgZGlzcGxheVJhdGUgPSB0aGlzLmNvbnRlbnRzLmdldERpc3BsYXlSYXRlKHRoaXMuaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3Qgc2xpZGVyU2l6ZSA9IGZ1bGxTaXplICogZGlzcGxheVJhdGU7XG4gICAgICAgIFNsaWRlclZpZXdVdGlsLnNldFNpemUodGhpcy5fc2xpZGVCdXR0b24sIHRoaXMuaXNIb3Jpem9udGFsLCBzbGlkZXJTaXplKTtcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJWaXNpYmxlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGF1dG9IaWRl44Gu5p2h5Lu244Gr5LiA6Ie044GZ44KL44GL44KS5Yik5a6a44GX44CB6KGo56S644KS5YiH44KK5pu/44GI44KL44CCXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB1cGRhdGVTbGlkZXJWaXNpYmxlKCkge1xuICAgICAgICB0aGlzLl9zbGlkZUJ1dHRvbi52aXNpYmxlID0gIXRoaXMuaXNIaWRkZW47XG4gICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uLmV2ZW50TW9kZSA9IHRoaXMuaXNIaWRkZW4gPyBcIm5vbmVcIiA6IFwic3RhdGljXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGF1dG9IaWRl44Gu5p2h5Lu244Gr5LiA6Ie044GZ44KL44GL44KS5Yik5a6a44GZ44KLXG4gICAgICovXG4gICAgZ2V0IGlzSGlkZGVuKCkge1xuICAgICAgICAvL2F1dG9IaWRl44GM6Kit5a6a44GV44KM44Gm44GE44Gq44GE5aC05ZCI44Gv5bi444Gr6KGo56S6XG4gICAgICAgIGlmICghdGhpcy5hdXRvSGlkZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudHMuZ2V0RGlzcGxheVJhdGUodGhpcy5pc0hvcml6b250YWwpID09PSAxLjA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHJhdGXlgKTjgpLlhYPjgavjgrPjg7Pjg4bjg7Pjg4TjgpLjgrnjgq/jg63jg7zjg6vjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmF0ZVxuICAgICAqL1xuICAgIHVwZGF0ZUNvbnRlbnRzUG9zaXRpb25XaXRoUmF0ZShyYXRlKSB7XG4gICAgICAgIHRoaXMuY29udGVudHMuc2Nyb2xsKHJhdGUsIHRoaXMuaXNIb3Jpem9udGFsKTtcbiAgICB9XG4gICAgb25QcmVzc2VkU2xpZGVyQnV0dG9uKGUpIHtcbiAgICAgICAgc3VwZXIub25QcmVzc2VkU2xpZGVyQnV0dG9uKGUpO1xuICAgICAgICB0aGlzLnNjcm9sbEJhckV2ZW50RW1pdHRlci5lbWl0KFwic3RvcF9pbmVydGlhbF90d2VlblwiKTtcbiAgICB9XG4gICAgb25Nb3ZlU2xpZGVyKGUpIHtcbiAgICAgICAgc3VwZXIub25Nb3ZlU2xpZGVyKGUpO1xuICAgICAgICB0aGlzLnNjcm9sbEJhckV2ZW50RW1pdHRlci5lbWl0KFwic3RvcF9pbmVydGlhbF90d2VlblwiKTtcbiAgICB9XG4gICAgb25QcmVzc0Jhc2UoZXZ0KSB7XG4gICAgICAgIGlmICh0aGlzLmlzSGlkZGVuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzdXBlci5vblByZXNzQmFzZShldnQpO1xuICAgICAgICB0aGlzLnNjcm9sbEJhckV2ZW50RW1pdHRlci5lbWl0KFwic3RvcF9pbmVydGlhbF90d2VlblwiKTtcbiAgICB9XG4gICAgb25EaXNwb3NlRnVuY3Rpb24oZSkge1xuICAgICAgICB0aGlzLmNvbnRlbnRzLmRpc3Bvc2UoKTtcbiAgICAgICAgc3VwZXIub25EaXNwb3NlRnVuY3Rpb24oZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU2xpZGVyVmlld1V0aWwgfSBmcm9tIFwiLi4vXCI7XG5leHBvcnQgY2xhc3MgU2Nyb2xsQmFyVmlld1V0aWwge1xuICAgIC8qKlxuICAgICAqIOOCv+ODvOOCsuODg+ODiOOCs+ODs+ODhuODs+ODhOOBjOOAgeODnuOCueOCr+mgmOWfn+WGheOBq+WPjuOBvuOCi+W6p+aomeWApOOCkuWPluW+l+OBmeOCi+OAglxuICAgICAqIEBwYXJhbSB0YXJnZXRcbiAgICAgKiBAcGFyYW0gbWFza1xuICAgICAqIEBwYXJhbSBpc0hvcml6b250YWxcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0Q2xhbXBlZFRhcmdldFBvc2l0aW9uKHRhcmdldCwgbWFzaywgaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGNvbnN0IGdldFNpemUgPSBTbGlkZXJWaWV3VXRpbC5nZXRTaXplO1xuICAgICAgICBjb25zdCB0YXJnZXRTaXplID0gZ2V0U2l6ZSh0YXJnZXQsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IG1hc2tTaXplID0gZ2V0U2l6ZShtYXNrLCBpc0hvcml6b250YWwpO1xuICAgICAgICBjb25zdCBtaW5Qb3MgPSBNYXRoLm1pbigtdGFyZ2V0U2l6ZSArIG1hc2tTaXplLCAwLjApO1xuICAgICAgICBjb25zdCBwb3MgPSBTbGlkZXJWaWV3VXRpbC5nZXRQb3NpdGlvbih0YXJnZXQsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jbGFtcChwb3MsIDAsIG1pblBvcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCv+ODvOOCsuODg+ODiOOCs+ODs+ODhuODs+ODhOOBruS9jee9ruOCkuOAgeODnuOCueOCr+mgmOWfn+WGheOBq+S4uOOCgei+vOOCgOOAglxuICAgICAqIEBwYXJhbSB0YXJnZXRcbiAgICAgKiBAcGFyYW0gbWFza1xuICAgICAqIEBwYXJhbSBwb3NpdGlvblxuICAgICAqIEBwYXJhbSBpc0hvcml6b250YWxcbiAgICAgKi9cbiAgICBzdGF0aWMgY2xhbXBUYXJnZXRQb3NpdGlvbih0YXJnZXQsIG1hc2ssIHBvc2l0aW9uLCBpc0hvcml6b250YWwpIHtcbiAgICAgICAgU2xpZGVyVmlld1V0aWwuc2V0UG9zaXRpb24odGFyZ2V0LCBpc0hvcml6b250YWwsIHBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgY2xhbXBlZFBvcyA9IHRoaXMuZ2V0Q2xhbXBlZFRhcmdldFBvc2l0aW9uKHRhcmdldCwgbWFzaywgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgU2xpZGVyVmlld1V0aWwuc2V0UG9zaXRpb24odGFyZ2V0LCBpc0hvcml6b250YWwsIGNsYW1wZWRQb3MpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0UmF0aW9PZk9yaWdpbihkaXNwbGF5T2JqLCBpc0hvcml6b250YWwpIHtcbiAgICAgICAgY29uc3QgYm91bmRzID0gU2xpZGVyVmlld1V0aWwuZ2V0Q29udGVudHNCb3VuZHMoZGlzcGxheU9iaik7XG4gICAgICAgIGNvbnN0IHNpemUgPSBpc0hvcml6b250YWwgPyBib3VuZHMud2lkdGggOiBib3VuZHMuaGVpZ2h0O1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGlzSG9yaXpvbnRhbCA/IGJvdW5kcy54IDogYm91bmRzLnk7XG4gICAgICAgIGNvbnN0IHJhdGlvID0gcG9zaXRpb24gLyBzaXplO1xuICAgICAgICBpZiAocmF0aW8gPiAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7ZGlzcGxheU9iai5uYW1lfSA6IOODnOOCv+ODs+OCteOCpOOCuuOBjOS4jemBqeWIh+OBp+OBmeOAguODnOOCv+ODs+OBruefqeW9ouWGheOBq+WOn+eCueOBjOWPjuOBvuOBo+OBpuOBhOOBvuOBm+OCk+OAguOCueOCr+ODreODvOODq+ODkOODvOODnOOCv+ODs+OBr+WOn+eCueOCkuWbsuOCgOefqeW9ouOBqOOBl+OBpuOBj+OBoOOBleOBhOOAgmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByYXRpbztcbiAgICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9JbmVydGlhbFNjcm9sbE1hbmFnZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL01vdXNlV2hlZWxTY3JvbGxNYW5hZ2VyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TY3JvbGxCYXJDb250ZW50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2Nyb2xsQmFyQ29udGVudHNFdmVudFR5cGVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1Njcm9sbEJhckV2ZW50XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TY3JvbGxCYXJWaWV3XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TY3JvbGxCYXJWaWV3VXRpbFwiO1xuIiwiaW1wb3J0IHsgRmVkZXJhdGVkUG9pbnRlckV2ZW50LCBQb2ludCB9IGZyb20gXCJwaXhpLmpzXCI7XG5pbXBvcnQgeyBTbGlkZXJWaWV3IH0gZnJvbSBcIi4vXCI7XG5leHBvcnQgY2xhc3MgU2xpZGVyVmlld1V0aWwge1xuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOOBruW6p+aomeOBi+OCieOAgeOCueODqeOCpOODgOODvOOBruWJsuWQiOOCkuWPluW+l+OBmeOCi1xuICAgICAqL1xuICAgIHN0YXRpYyBjb252ZXJ0UGl4ZWxUb1JhdGUocGl4ZWwsIG1heCwgbWluKSB7XG4gICAgICAgIGlmIChtYXggPD0gbWluKSB7XG4gICAgICAgICAgICByZXR1cm4gMC4wO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJhdGUgPSAoKHBpeGVsIC0gbWluKSAvIChtYXggLSBtaW4pKSAqIFNsaWRlclZpZXcuTUFYX1JBVEU7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jbGFtcChyYXRlLCBTbGlkZXJWaWV3Lk1BWF9SQVRFLCAwLjApO1xuICAgIH1cbiAgICBzdGF0aWMgY29udmVydFJhdGVUb1BpeGVsKHJhdGUsIG1heCwgbWluKSB7XG4gICAgICAgIGNvbnN0IHBpeCA9ICgobWF4IC0gbWluKSAqIHJhdGUpIC8gU2xpZGVyVmlldy5NQVhfUkFURSArIG1pbjtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmNsYW1wKHBpeCwgbWF4LCBtaW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg4fjgqPjgrnjg5fjg6zjgqTjgqrjg5bjgrjjgqfjgq/jg4jjgYvjgonjgrnjgq/jg63jg7zjg6vmlrnlkJHjga7luqfmqJnlgKTjgpLlj5bjgorlh7rjgZlcbiAgICAgKiBAcmV0dXJuIGRpc3BsYXlPYmrjga7luqfmqJnlgKTjgILljZjkvY3jg5Tjgq/jgrvjg6tcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0UG9zaXRpb24oZGlzcGxheU9iaiwgaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXNwbGF5T2JqLng7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpc3BsYXlPYmoueTtcbiAgICB9XG4gICAgc3RhdGljIGdldFBvaW50ZXJFdmVudFBvc2l0aW9uKGUsIGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEZlZGVyYXRlZFBvaW50ZXJFdmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmdldFBvc2l0aW9uKGUuZ2xvYmFsLCBpc0hvcml6b250YWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmdldFBvc2l0aW9uKG5ldyBQb2ludChlLm9mZnNldFgsIGUub2Zmc2V0WSksIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICog44OH44Kj44K544OX44Os44Kk44Kq44OW44K444Kn44Kv44OI44Gr44K544Kv44Ot44O844Or5pa55ZCR44Gu5bqn5qiZ5YCk44KS6Kit5a6a44GZ44KLXG4gICAgICovXG4gICAgc3RhdGljIHNldFBvc2l0aW9uKGRpc3BsYXlPYmosIGlzSG9yaXpvbnRhbCwgcG9zaXRpb24pIHtcbiAgICAgICAgaWYgKCFkaXNwbGF5T2JqKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICBkaXNwbGF5T2JqLnggPSBwb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRpc3BsYXlPYmoueSA9IHBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueOCr+ODreODvOODq+aWueWQkeOBrumrmOOBleOAgeOCguOBl+OBj+OBr+W5heOCkuWPluW+l+OBmeOCi+OAguWNmOS9jeODlOOCr+OCu+ODq1xuICAgICAqL1xuICAgIHN0YXRpYyBnZXRTaXplKGRpc3BsYXlPYmosIGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBjb25zdCBzaXplID0gU2xpZGVyVmlld1V0aWwuZ2V0Q29udGVudHNCb3VuZHMoZGlzcGxheU9iaik7XG4gICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgIHJldHVybiBzaXplLndpZHRoICogZGlzcGxheU9iai5zY2FsZS54O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNpemUuaGVpZ2h0ICogZGlzcGxheU9iai5zY2FsZS55O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueOCr+ODreODvOODq+aWueWQkeOBrumrmOOBleOAgeOCguOBl+OBj+OBr+W5heOCkuioreWumuOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBkaXNwbGF5T2JqXG4gICAgICogQHBhcmFtIGlzSG9yaXpvbnRhbFxuICAgICAqIEBwYXJhbSBhbW91bnQgd2lkdGggb3IgaGVpZ2h0LCByYW5nZSA6IDAgfiBkaXNwbGF5T2JqLnNpemUud2lkdGggb3IgaGVpZ2h0LCB1bml0IDogcHhcbiAgICAgKi9cbiAgICBzdGF0aWMgc2V0U2l6ZShkaXNwbGF5T2JqLCBpc0hvcml6b250YWwsIGFtb3VudCkge1xuICAgICAgICBjb25zdCBzaXplID0gU2xpZGVyVmlld1V0aWwuZ2V0Q29udGVudHNCb3VuZHMoZGlzcGxheU9iaik7XG4gICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgIGRpc3BsYXlPYmouc2NhbGUueCA9IGFtb3VudCAvIHNpemUud2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkaXNwbGF5T2JqLnNjYWxlLnkgPSBhbW91bnQgLyBzaXplLmhlaWdodDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgY2xhbXAobnVtLCBtYXgsIG1pbikge1xuICAgICAgICBudW0gPSBNYXRoLm1heChudW0sIG1pbik7XG4gICAgICAgIG51bSA9IE1hdGgubWluKG51bSwgbWF4KTtcbiAgICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG4gICAgc3RhdGljIGdldENvbnRlbnRzQm91bmRzKGRpc3BsYXlPYmopIHtcbiAgICAgICAgaWYgKGRpc3BsYXlPYmouaGl0QXJlYSlcbiAgICAgICAgICAgIHJldHVybiBkaXNwbGF5T2JqLmhpdEFyZWE7XG4gICAgICAgIHJldHVybiBkaXNwbGF5T2JqLmdldExvY2FsQm91bmRzKCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRSb290Q29udGFpbmVyKGNhbnZhcywgYnV0dG9uKSB7XG4gICAgICAgIGlmIChjYW52YXMpIHtcbiAgICAgICAgICAgIHJldHVybiBjYW52YXM7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBhcmVudCA9IGJ1dHRvbi5wYXJlbnQ7XG4gICAgICAgIHdoaWxlIChwYXJlbnQucGFyZW50KSB7XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuICAgIHN0YXRpYyBhZGRDaGlsZFBhcnRzKHBhcmVudCwgb2JqKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCFvYmopXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIChfYSA9IG9iai5wYXJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdmVDaGlsZChvYmopO1xuICAgICAgICBwYXJlbnQuYWRkQ2hpbGQob2JqKTtcbiAgICB9XG4gICAgc3RhdGljIGdldFBvaW50ZXJMb2NhbFBvc2l0aW9uKGRpc3BsYXlPYmosIGlzSG9yaXpvbnRhbCwgZHJhZ1N0YXJ0UG9zLCBldnQpIHtcbiAgICAgICAgY29uc3QgZ2V0TG9jYWxQb3MgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZ0IGluc3RhbmNlb2YgRmVkZXJhdGVkUG9pbnRlckV2ZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpc3BsYXlPYmoudG9Mb2NhbChldnQuZ2xvYmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkaXNwbGF5T2JqLnRvTG9jYWwobmV3IFBvaW50KGV2dC5vZmZzZXRYLCBldnQub2Zmc2V0WSkpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBsb2NhbFBvcyA9IGdldExvY2FsUG9zKCk7XG4gICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFBvcy54IC0gZHJhZ1N0YXJ0UG9zLng7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxQb3MueSAtIGRyYWdTdGFydFBvcy55O1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vU2xpZGVyRXZlbnRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1NsaWRlclZpZXdcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1NsaWRlclZpZXdPcHRpb25cIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Njcm9sbEJhclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2xpZGVyVmlld1V0aWxcIjtcbiIsImltcG9ydCB7IEFwcGxpY2F0aW9uLCBDb250YWluZXIsIEdyYXBoaWNzLCBSZWN0YW5nbGUsIFRpY2tlciB9IGZyb20gXCJwaXhpLmpzXCI7XG5pbXBvcnQgeyBTY3JvbGxCYXJWaWV3LCBTY3JvbGxCYXJDb250ZW50cyB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IFRXRUVOIGZyb20gXCJAdHdlZW5qcy90d2Vlbi5qc1wiO1xuXG5jb25zdCBvbkRvbUNvbnRlbnRzTG9hZGVkID0gKCkgPT4ge1xuICBjb25zdCBhcHAgPSBuZXcgQXBwbGljYXRpb24oeyB3aWR0aDogODAwLCBoZWlnaHQ6IDgwMCB9KTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhcHAudmlldyk7XG5cbiAgVGlja2VyLnNoYXJlZC5hZGQoKGUpID0+IHtcbiAgICBUV0VFTi51cGRhdGUocGVyZm9ybWFuY2Uubm93KCkpO1xuICB9KTtcblxuICBjb25zdCBzY3JvbGxiYXIgPSBpbml0U2Nyb2xsQmFyKGFwcC5zdGFnZSwgYXBwLnZpZXcpO1xuXG4gIGNvbnN0IGFkZEJ1dHRvbiA9IChsYWJlbCkgPT4ge1xuICAgIGNvbnN0IGJ0blBsdXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGJ0blBsdXMuaW5uZXJUZXh0ID0gbGFiZWw7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChidG5QbHVzKTtcbiAgICByZXR1cm4gYnRuUGx1cztcbiAgfTtcbiAgY29uc3QgYnRuUGx1cyA9IGFkZEJ1dHRvbihcIkNvbnRlbnRzIFNpemUgK1wiKTtcbiAgY29uc3QgYnRuTWludXMgPSBhZGRCdXR0b24oXCJDb250ZW50cyBTaXplIC1cIik7XG4gIGNvbnN0IGNoYW5nZVNpemUgPSAoZGlmKSA9PiB7XG4gICAgY29uc3Qgc2Nyb2xsUG9zaXRpb24gPSBzY3JvbGxiYXIucmF0ZTtcbiAgICBvdmVycmlkZUNvbnRlbnRzKHNjcm9sbGJhci5jb250ZW50cy50YXJnZXQsIGRpZik7XG4gICAgc2Nyb2xsYmFyLnVwZGF0ZVNsaWRlcigpO1xuICAgIHNjcm9sbGJhci5jaGFuZ2VSYXRlKHNjcm9sbFBvc2l0aW9uKTtcbiAgfTtcbiAgY29uc3Qgb25QbHVzID0gKCkgPT4ge1xuICAgIGNoYW5nZVNpemUoNjQpO1xuICB9O1xuICBjb25zdCBvbk1pbnVzID0gKCkgPT4ge1xuICAgIGNoYW5nZVNpemUoLTY0KTtcbiAgfTtcbiAgYnRuUGx1cy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgb25QbHVzKTtcbiAgYnRuTWludXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG9uTWludXMpO1xufTtcblxuLyoqXG4gKiDjgrnjgq/jg63jg7zjg6vjg5Djg7zjga7lrp/oo4XjgrXjg7Pjg5fjg6tcbiAqIEBwYXJhbSBzdGFnZVxuICovXG5jb25zdCBpbml0U2Nyb2xsQmFyID0gKHN0YWdlLCB2aWV3KSA9PiB7XG4gIGNvbnN0IFNDUk9MTEJBUl9XID0gMTY7XG4gIGNvbnN0IFNDUk9MTEJBUl9IID0gMzYwO1xuICBjb25zdCBTQ1JPTExCQVJfWSA9IDEyMDtcbiAgY29uc3QgQ09OVEVOVFNfVyA9IDI0MDtcblxuICBjb25zdCBjb250YWluZXIgPSBuZXcgQ29udGFpbmVyKCk7XG4gIHN0YWdlLmFkZENoaWxkKGNvbnRhaW5lcik7XG4gIGNvbnRhaW5lci54ID0gMzI7XG4gIGNvbnRhaW5lci55ID0gU0NST0xMQkFSX1k7XG5cbiAgY29uc3QgY29udGVudHMgPSBnZXRTY3JvbGxCYXJPcHRpb24oQ09OVEVOVFNfVywgU0NST0xMQkFSX0gsIGNvbnRhaW5lcik7XG4gIGNvbnN0IHNjcm9sbGJhciA9IG5ldyBTY3JvbGxCYXJWaWV3KFxuICAgIHtcbiAgICAgIGJhc2U6IGdldFNjcm9sbEJhckJhc2UoU0NST0xMQkFSX1csIFNDUk9MTEJBUl9ILCAweDAwMDBmZiksXG4gICAgICBidXR0b246IGdldFNjcm9sbEJhckJ1dHRvbihTQ1JPTExCQVJfVywgMHhmZmZmMDApLFxuICAgICAgbWluUG9zaXRpb246IDAsXG4gICAgICBtYXhQb3NpdGlvbjogU0NST0xMQkFSX0gsXG4gICAgICByYXRlOiAzNS4wLFxuICAgICAgaXNIb3Jpem9udGFsOiBmYWxzZSxcbiAgICAgIGNhbnZhczogdmlldyxcbiAgICB9LFxuICAgIGNvbnRlbnRzXG4gICk7XG5cbiAgc3RhZ2UuYWRkQ2hpbGQoc2Nyb2xsYmFyKTtcbiAgc2Nyb2xsYmFyLnggPSBjb250YWluZXIueCArIENPTlRFTlRTX1c7XG4gIHNjcm9sbGJhci55ID0gU0NST0xMQkFSX1k7XG5cbiAgc2Nyb2xsYmFyLnNsaWRlckV2ZW50RW1pdHRlci5vbihcInNsaWRlcl9jaGFuZ2VcIiwgKGUpID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZyhlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIOOCueOCr+ODreODvOODq+WLleS9nOOCkueiuuiqjeOBmeOCi+OBn+OCgeOBq+OAgeaVheaEj+OBq+ODnuOCueOCr+OCkuWkluOBl+OBpuOBhOOBvuOBmeOAglxuICAgKi9cbiAgY29udGVudHMudGFyZ2V0Lm1hc2sgPSBudWxsO1xuICByZXR1cm4gc2Nyb2xsYmFyO1xufTtcblxuY29uc3QgZ2V0U2Nyb2xsQmFyQmFzZSA9ICh3LCBoLCBjb2xvcikgPT4ge1xuICBjb25zdCBnID0gbmV3IEdyYXBoaWNzKCk7XG4gIGcuYmVnaW5GaWxsKGNvbG9yKTtcbiAgZy5kcmF3UmVjdCgwLCAwLCB3LCBoKTtcbiAgZy5oaXRBcmVhID0gbmV3IFJlY3RhbmdsZSgwLCAwLCB3LCBoKTtcbiAgcmV0dXJuIGc7XG59O1xuXG5jb25zdCBnZXRTY3JvbGxCYXJCdXR0b24gPSAod2lkdGgsIGNvbG9yKSA9PiB7XG4gIGNvbnN0IHJhdGlvID0gMC41O1xuICBjb25zdCBnID0gbmV3IEdyYXBoaWNzKCk7XG4gIGcuYmVnaW5GaWxsKGNvbG9yKTtcbiAgZy5kcmF3UmVjdCgtd2lkdGggLyAyLCAtd2lkdGggKiByYXRpbywgd2lkdGgsIHdpZHRoKTtcbiAgZy5oaXRBcmVhID0gbmV3IFJlY3RhbmdsZSgtd2lkdGggLyAyLCAtd2lkdGggKiByYXRpbywgd2lkdGgsIHdpZHRoKTtcbiAgZy54ID0gd2lkdGggLyAyO1xuICByZXR1cm4gZztcbn07XG5cbmNvbnN0IGdldFNjcm9sbEJhckNvbnRlbnRzID0gKGNvbG9yLCB3LCBoLCBjb250YWluZXIsIGFscGhhID0gMS4wKSA9PiB7XG4gIGNvbnN0IGcgPSBuZXcgR3JhcGhpY3MoKTtcbiAgZy5iZWdpbkZpbGwoY29sb3IsIGFscGhhKTtcbiAgZy5kcmF3UmVjdCgwLCAwLCB3LCBoKTtcbiAgZy5oaXRBcmVhID0gbmV3IFJlY3RhbmdsZSgwLCAwLCB3LCBoKTtcbiAgY29udGFpbmVyLmFkZENoaWxkKGcpO1xuICByZXR1cm4gZztcbn07XG5cbmNvbnN0IG92ZXJyaWRlQ29udGVudHMgPSAoZywgZGlmSGVpZ2h0KSA9PiB7XG4gIGNvbnN0IGZpbGwgPSBnLmZpbGwuY2xvbmUoKTtcbiAgY29uc29sZS5sb2coZmlsbCk7XG4gIGNvbnN0IGhpdEFyZWEgPSBnLmhpdEFyZWEuY2xvbmUoKTtcbiAgaGl0QXJlYS5oZWlnaHQgKz0gZGlmSGVpZ2h0O1xuICBnLmNsZWFyKCk7XG4gIGcuYmVnaW5GaWxsKGZpbGwuY29sb3IsIGZpbGwuYWxwaGEpO1xuICBnLmRyYXdSZWN0KGhpdEFyZWEueCwgaGl0QXJlYS55LCBoaXRBcmVhLndpZHRoLCBoaXRBcmVhLmhlaWdodCk7XG4gIGcuaGl0QXJlYSA9IG5ldyBSZWN0YW5nbGUoXG4gICAgaGl0QXJlYS54LFxuICAgIGhpdEFyZWEueSxcbiAgICBoaXRBcmVhLndpZHRoLFxuICAgIGhpdEFyZWEuaGVpZ2h0XG4gICk7XG59O1xuXG5jb25zdCBnZXRTY3JvbGxCYXJPcHRpb24gPSAoY29udGVudHNXLCBzY3JvbGxCYXJILCBjb250YWluZXIpID0+IHtcbiAgY29uc3QgdGFyZ2V0Q29udGVudHMgPSBnZXRTY3JvbGxCYXJDb250ZW50cyhcbiAgICAweGZmMDBmZixcbiAgICBjb250ZW50c1csXG4gICAgc2Nyb2xsQmFySCAqIDIsXG4gICAgY29udGFpbmVyXG4gICk7XG4gIGNvbnN0IGNvbnRlbnRzTWFzayA9IGdldFNjcm9sbEJhckNvbnRlbnRzKFxuICAgIDB4MDAwMGZmLFxuICAgIGNvbnRlbnRzVyxcbiAgICBzY3JvbGxCYXJILFxuICAgIGNvbnRhaW5lcixcbiAgICAwLjNcbiAgKTtcbiAgcmV0dXJuIG5ldyBTY3JvbGxCYXJDb250ZW50cyh0YXJnZXRDb250ZW50cywgY29udGVudHNNYXNrLCBjb250YWluZXIpO1xufTtcblxuLyoqXG4gKiBET01Db250ZW50TG9hZGVk5Lul6ZmN44Gr5Yid5pyf5YyW5Yem55CG44KS5a6f6KGM44GZ44KLXG4gKi9cbmlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIikge1xuICBvbkRvbUNvbnRlbnRzTG9hZGVkKCk7XG59IGVsc2Uge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBvbkRvbUNvbnRlbnRzTG9hZGVkKTtcbn1cbiJdLCJuYW1lcyI6WyJTbGlkZXJFdmVudENvbnRleHQiLCJjb25zdHJ1Y3RvciIsInJhdGUiLCJDb250YWluZXIiLCJQb2ludCIsIkV2ZW50RW1pdHRlciIsIlNsaWRlclZpZXdPcHRpb25VdGlsIiwiU2xpZGVyVmlld1V0aWwiLCJTbGlkZXJWaWV3IiwiX3JhdGUiLCJvcHRpb24iLCJpc0hvcml6b250YWwiLCJkcmFnU3RhcnRQb3MiLCJpc0RyYWdnaW5nIiwic2xpZGVyRXZlbnRFbWl0dGVyIiwic3RhcnRNb3ZlIiwiZSIsIm9uUHJlc3NlZFNsaWRlckJ1dHRvbiIsIm1vdmVTbGlkZXIiLCJvbk1vdmVTbGlkZXIiLCJtb3ZlU2xpZGVyRmluaXNoIiwiYnV0dG9uUm9vdENvbnRhaW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfc2xpZGVCdXR0b24iLCJvZmYiLCJlbWl0IiwiZGlzcG9zZSIsIm9uRGlzcG9zZUZ1bmN0aW9uIiwiaW5pdE9wdGlvbiIsImluaXQiLCJjYW52YXMiLCJfYmFzZSIsImluaXRCYXNlIiwiYmFzZSIsIl9iYXIiLCJpbml0QmFyQW5kTWFzayIsImJhciIsIl9iYXJNYXNrIiwibWFzayIsImluaXRTbGlkZXJCdXR0b24iLCJidXR0b24iLCJnZXRSb290Q29udGFpbmVyIiwiX21pblBvc2l0aW9uIiwibWluUG9zaXRpb24iLCJfbWF4UG9zaXRpb24iLCJtYXhQb3NpdGlvbiIsImNoYW5nZVJhdGUiLCJwb3MiLCJjb252ZXJ0UmF0ZVRvUGl4ZWwiLCJ1cGRhdGVQYXJ0cyIsInRhcmdldCIsImN1cnJlbnRUYXJnZXQiLCJsb2NhbFBvcyIsInRvTG9jYWwiLCJnbG9iYWwiLCJzZXQiLCJ4IiwieSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbiIsIm1vdXNlUG9zIiwibGltaXRTbGlkZXJCdXR0b25Qb3NpdGlvbiIsImNvbnZlcnRQaXhlbFRvUmF0ZSIsImV2dCIsImdldFBvaW50ZXJMb2NhbFBvc2l0aW9uIiwiY2xhbXAiLCJzdHJldGNoIiwic2V0U2l6ZSIsImdldFBvc2l0aW9uIiwic2V0UG9zaXRpb24iLCJvblByZXNzQmFzZSIsInBpeGVsIiwidmFsdWUiLCJldmVudE1vZGUiLCJhZGRDaGlsZFBhcnRzIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmVtb3ZlQ2hpbGRyZW4iLCJNQVhfUkFURSIsIlNIQVBFUyIsIl9hIiwiX2IiLCJfYyIsImNoZWNrIiwiTWF0aCIsIm1heCIsIm1pbiIsImNoZWNrUGFydHMiLCJvYmoiLCJ0YXJnZXROYW1lIiwiYm91bmRzIiwiZ2V0Q29udGVudHNCb3VuZHMiLCJ3aWR0aCIsImhlaWdodCIsInR5cGUiLCJSRUNUIiwiRXJyb3IiLCJwYXJlbnQiLCJjb25zb2xlIiwid2FybiIsIkVhc2luZyIsIlR3ZWVuIiwiVGlja2VyIiwiU2Nyb2xsQmFyVmlld1V0aWwiLCJJbmVydGlhbFNjcm9sbE1hbmFnZXIiLCJzcGVlZCIsIl9zcGVlZCIsInNjcm9sbEJhclZpZXciLCJkZWNlbGVyYXRpb25SYXRlIiwib3ZlcmZsb3dTY3JvbGxSYW5nZSIsIl9pc1N0YXJ0Iiwib25Nb3VzZURvd24iLCJ1cGRhdGVEcmFnUG9zIiwidHdlZW4iLCJkaXNwb3NlVHdlZW4iLCJhZGREcmFnTGlzdGVuZXIiLCJvbk1vdXNlTW92ZSIsImRyYWdQb3MiLCJkZWx0YSIsImdldERyYWdQb3MiLCJhZGRUYXJnZXRQb3NpdGlvbiIsImdldE92ZXJmbG93RGVjZWxlcmF0aW9uIiwib25Nb3VzZVVwIiwicmVtb3ZlRHJhZ0xpc3RlbmVyIiwib25UaWNrIiwiZ2V0TGVhdmVSYW5nZUZyb21NYXNrIiwiaXNQbGF5aW5nIiwib3ZlcmZsb3dEZWNlbGVyYXRpb24iLCJhYnMiLCJ0b09iaiIsImdldENsYW1wZWRQb3MiLCJjb250ZW50cyIsInRvIiwib25VcGRhdGUiLCJlYXNpbmciLCJDdWJpYyIsIk91dCIsInN0YXJ0Iiwic3RvcEluZXJ0aWFsIiwic3RvcCIsInVuZGVmaW5lZCIsInNjcm9sbEJhckV2ZW50RW1pdHRlciIsInNoYXJlZCIsImFkZCIsInJlbW92ZSIsInN3aXRjaERyYWdMaXN0ZW5lciIsImlzT24iLCJkcmFnVGFyZ2V0Iiwic3dpdGNoTGlzdGVuZXIiLCJldmVudCIsImxpc3RlbmVyIiwiZ2V0UG9pbnRlckV2ZW50UG9zaXRpb24iLCJjdXJyZW50UG9zIiwiZGlmUG9zIiwiY2xhbXBlZFBvcyIsImdldENsYW1wZWRUYXJnZXRQb3NpdGlvbiIsIk1vdXNlV2hlZWxTY3JvbGxNYW5hZ2VyIiwid2hlZWxIYW5kbGVyIiwic2hpZnQiLCJkZWx0YVkiLCJzY3JvbGwiLCJjbGFtcFRhcmdldFBvc2l0aW9uIiwiU2Nyb2xsQmFyQ29udGVudHMiLCJfdGFyZ2V0IiwiX21hc2siLCJjb250YWluZXIiLCJzY3JvbGxCYXJDb250ZW50cyIsImFkZFRvQ29udGFpbmVyIiwiZGlzcGxheU9iamVjdCIsInJlbW92ZUNoaWxkIiwiYWRkQ2hpbGQiLCJnZXRTY3JvbGxQb3NpdGlvbkFzUmF0ZSIsImdldFBvcyIsInplcm9Qb3MiLCJjb250ZW50c1BvcyIsImNvbnRlbnRzUG9zaXRpb25EaWYiLCJtb3ZhYmxlUmFuZ2UiLCJnZXRNb3ZhYmxlUmFuZ2UiLCJnZXRTaXplIiwidGFyZ2V0U2l6ZSIsIm1hc2tTaXplIiwiZGlmIiwiZ2V0RGlzcGxheVJhdGUiLCJjb250ZW50c1NpemUiLCJTY3JvbGxCYXJWaWV3IiwiYXV0b0hpZGUiLCJfYXV0b0hpZGUiLCJ1cGRhdGVTbGlkZXJWaXNpYmxlIiwic2Nyb2xsQ29udGVudHMiLCJ1cGRhdGVDb250ZW50c1Bvc2l0aW9uIiwidXBkYXRlQ29udGVudHNQb3NpdGlvbldpdGhSYXRlIiwidXBkYXRlU2xpZGVyIiwid2hlZWxNYW5hZ2VyIiwidXBkYXRlU2xpZGVyUG9zaXRpb24iLCJpbmVydGlhbE1hbmFnZXIiLCJyYW5nZSIsImdldFJhbmdlT2ZTbGlkZXJCdXR0b25Qb3NpdGlvbiIsImJ1dHRvblNpemUiLCJzbGlkZUJ1dHRvblNpemUiLCJyYXRpbyIsImdldFJhdGlvT2ZPcmlnaW4iLCJ1cGRhdGVTbGlkZXJTaXplIiwiaXNVcGRhdGFibGVTbGlkZXJTaXplIiwiZnVsbFNpemUiLCJkaXNwbGF5UmF0ZSIsInNsaWRlclNpemUiLCJ2aXNpYmxlIiwiaXNIaWRkZW4iLCJtaW5Qb3MiLCJwb3NpdGlvbiIsImRpc3BsYXlPYmoiLCJzaXplIiwibmFtZSIsIkZlZGVyYXRlZFBvaW50ZXJFdmVudCIsInBpeCIsIm9mZnNldFgiLCJvZmZzZXRZIiwic2NhbGUiLCJhbW91bnQiLCJudW0iLCJoaXRBcmVhIiwiZ2V0TG9jYWxCb3VuZHMiLCJnZXRMb2NhbFBvcyIsIkFwcGxpY2F0aW9uIiwiR3JhcGhpY3MiLCJSZWN0YW5nbGUiLCJUV0VFTiIsIm9uRG9tQ29udGVudHNMb2FkZWQiLCJhcHAiLCJkb2N1bWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInZpZXciLCJ1cGRhdGUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsInNjcm9sbGJhciIsImluaXRTY3JvbGxCYXIiLCJzdGFnZSIsImFkZEJ1dHRvbiIsImxhYmVsIiwiYnRuUGx1cyIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lclRleHQiLCJidG5NaW51cyIsImNoYW5nZVNpemUiLCJzY3JvbGxQb3NpdGlvbiIsIm92ZXJyaWRlQ29udGVudHMiLCJvblBsdXMiLCJvbk1pbnVzIiwiU0NST0xMQkFSX1ciLCJTQ1JPTExCQVJfSCIsIlNDUk9MTEJBUl9ZIiwiQ09OVEVOVFNfVyIsImdldFNjcm9sbEJhck9wdGlvbiIsImdldFNjcm9sbEJhckJhc2UiLCJnZXRTY3JvbGxCYXJCdXR0b24iLCJ3IiwiaCIsImNvbG9yIiwiZyIsImJlZ2luRmlsbCIsImRyYXdSZWN0IiwiZ2V0U2Nyb2xsQmFyQ29udGVudHMiLCJhbHBoYSIsImRpZkhlaWdodCIsImZpbGwiLCJjbG9uZSIsImxvZyIsImNsZWFyIiwiY29udGVudHNXIiwic2Nyb2xsQmFySCIsInRhcmdldENvbnRlbnRzIiwiY29udGVudHNNYXNrIiwicmVhZHlTdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///536\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var B=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(B.exports,B,B.exports,__webpack_require__),B.loaded=!0,B.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,B,F)=>{if(!U){var s=1/0;for(i=0;i<deferred.length;i++){for(var[U,B,F]=deferred[i],g=!0,I=0;I<U.length;I++)(!1&F||s>=F)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[I])))?U.splice(I--,1):(g=!1,F<s&&(s=F));if(g){deferred.splice(i--,1);var C=B();void 0!==C&&(Q=C)}}return Q}F=F||0;for(var i=deferred.length;i>0&&deferred[i-1][2]>F;i--)deferred[i]=deferred[i-1];deferred[i]=[U,B,F]},__webpack_require__.d=(Q,U)=>{for(var B in U)__webpack_require__.o(U,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:U[B]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),(()=>{var Q={545:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,B)=>{var F,s,[g,I,C]=B,i=0;if(g.some((U=>0!==Q[U]))){for(F in I)__webpack_require__.o(I,F)&&(__webpack_require__.m[F]=I[F]);if(C)var l=C(__webpack_require__)}for(U&&U(B);i<g.length;i++)s=g[i],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(l)},B=self.webpackChunk_masatomakino_pixijs_basic_scrollbar=self.webpackChunk_masatomakino_pixijs_basic_scrollbar||[];B.forEach(U.bind(null,0)),B.push=U.bind(null,B.push.bind(B))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(536)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();