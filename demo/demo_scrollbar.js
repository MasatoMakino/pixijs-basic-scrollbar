(()=>{"use strict";var __webpack_modules__={589:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/index.mjs + 164 modules\nvar lib = __webpack_require__(316);\n// EXTERNAL MODULE: ./node_modules/@pixi/utils/lib/index.mjs + 25 modules\nvar utils_lib = __webpack_require__(359);\n;// CONCATENATED MODULE: ./esm/SliderEvent.js\n\n/**\n * スライダーが移動した際に発行されるイベントです。\n * 現状のスライダー位置を報告します。\n */\nclass SliderEventContext {\n  constructor(rate) {\n    this.rate = rate;\n  }\n}\nclass SliderEventEmitter extends utils_lib.EventEmitter {}\n// EXTERNAL MODULE: ./node_modules/@pixi/display/lib/index.mjs + 4 modules\nvar display_lib = __webpack_require__(820);\n// EXTERNAL MODULE: ./node_modules/@pixi/events/lib/index.mjs + 7 modules\nvar events_lib = __webpack_require__(232);\n// EXTERNAL MODULE: ./node_modules/@pixi/math/lib/index.mjs + 11 modules\nvar math_lib = __webpack_require__(363);\n;// CONCATENATED MODULE: ./esm/SliderViewOption.js\n/**\n * スライダーを初期化する際のオプション\n */\n\n\nclass SliderViewOption {\n  static init(option) {\n    var _a, _b, _c;\n    if (option.rate != null) {\n      option.rate = Math.max(0, option.rate);\n      option.rate = Math.min(SliderView.MAX_RATE, option.rate);\n    }\n    (_a = option.minPosition) !== null && _a !== void 0 ? _a : option.minPosition = 0.0;\n    (_b = option.rate) !== null && _b !== void 0 ? _b : option.rate = 0.0;\n    (_c = option.isHorizontal) !== null && _c !== void 0 ? _c : option.isHorizontal = true;\n    this.check(option);\n    return option;\n  }\n  static check(option) {\n    this.checkParts(option.base, "base");\n    this.checkParts(option.button, "button");\n    this.checkParts(option.mask, "mask");\n    this.checkParts(option.bar, "bar");\n  }\n  static checkParts(obj, targetName) {\n    if (obj == null) return;\n    const bounds = SliderViewUtil.getContentsBounds(obj);\n    if (bounds.width === 0 && bounds.height === 0 && bounds.type === lib/* SHAPES.RECT */.HSM.RECT) {\n      throw new Error(`SliderView : ${targetName} 初期化オプションで指定されたDisplayObjectにバウンディングボックスが存在しません。Containerを利用する場合はhitAreaを利用してバウンディングボックスを手動で設定してください。`);\n    }\n    if (obj.parent) {\n      console.warn(`初期化オプションで指定されたパーツがすでに別の親にaddChildされています。SliderViewおよびScrollBarViewの構成パーツは同一のコンテナにaddChildされることを前提としています。`);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/SliderView.js\n\n\n\n\n\n/**\n * スライダー用クラスです\n *\n * 使用上の注意 :\n * オブジェクトのサイズの計測にgetLocalBounds関数を使用しています。\n * hitAreaでサイズをあらかじめ与えてください。\n */\nclass SliderView extends display_lib/* Container */.W2 {\n  get buttonRootContainer() {\n    return this._buttonRootContainer;\n  }\n  get isHorizontal() {\n    return this._isHorizontal;\n  }\n  get sliderEventEmitter() {\n    return this._sliderEventEmitter;\n  }\n  /**\n   * @param option\n   */\n  constructor(option) {\n    super();\n    this._isHorizontal = true;\n    this.dragStartPos = new math_lib/* Point */.E9();\n    this.isDragging = false; // 現在スライド中か否か\n    this._sliderEventEmitter = new SliderEventEmitter();\n    /**\n     * スライダーのドラッグを開始する\n     * @param {Object} e\n     */\n    this.startMove = e => {\n      this.onPressedSliderButton(e);\n    };\n    /**\n     * スライダーのドラッグ中の処理\n     * @param e\n     */\n    this.moveSlider = e => {\n      this.onMoveSlider(e);\n    };\n    /**\n     * スライダーのドラッグ終了時の処理\n     * @param\te\n     */\n    this.moveSliderFinish = e => {\n      this.isDragging = false;\n      this._buttonRootContainer.removeEventListener("pointermove", this.moveSlider);\n      this._slideButton.off("pointerup", this.moveSliderFinish);\n      this._slideButton.off("pointerupoutside", this.moveSliderFinish);\n      this._sliderEventEmitter.emit("slider_change_finished", new SliderEventContext(this.rate));\n    };\n    /**\n     * このインスタンスを破棄する。\n     * @param\te\n     */\n    this.dispose = e => {\n      this.onDisposeFunction(e);\n    };\n    this.init(option);\n  }\n  /**\n   * 初期化処理\n   * @param option\n   */\n  init(option) {\n    option = SliderViewOption.init(option);\n    this._canvas = option.canvas;\n    this.base = option.base;\n    this._bar = this.initBarAndMask(option.bar);\n    this._barMask = this.initBarAndMask(option.mask);\n    if (this._bar && this._barMask) this._bar.mask = this._barMask;\n    this.slideButton = option.button;\n    this._minPosition = option.minPosition;\n    this._maxPosition = option.maxPosition;\n    this._isHorizontal = option.isHorizontal;\n    this._rate = option.rate;\n    this.changeRate(this._rate);\n  }\n  addChildParts(obj) {\n    var _a;\n    if (!obj) return;\n    (_a = obj.parent) === null || _a === void 0 ? void 0 : _a.removeChild(obj);\n    this.addChild(obj);\n  }\n  /**\n   * スライダーの位置を変更する\n   * @param\trate\tスライダーの位置 MIN 0.0 ~ MAX 100.0\n   */\n  changeRate(rate) {\n    //ドラッグ中は外部からの操作を無視する。\n    if (this.isDragging) return;\n    this._rate = rate;\n    const pos = this.convertRateToPixel(this._rate);\n    this.updateParts(pos);\n    this._sliderEventEmitter.emit("slider_change", new SliderEventContext(this.rate));\n  }\n  onPressedSliderButton(e) {\n    this.isDragging = true;\n    const target = e.currentTarget;\n    const localPos = this.toLocal(e.global);\n    this.dragStartPos = new math_lib/* Point */.E9(localPos.x - target.x, localPos.y - target.y);\n    this._buttonRootContainer = SliderView.getRootContainer(this._canvas, this._slideButton);\n    this._buttonRootContainer.addEventListener("pointermove", this.moveSlider);\n    this._slideButton.on("pointerup", this.moveSliderFinish);\n    this._slideButton.on("pointerupoutside", this.moveSliderFinish);\n  }\n  static getRootContainer(canvas, button) {\n    if (canvas) {\n      return canvas;\n    }\n    let parent = button.parent;\n    while (parent.parent) {\n      parent = parent.parent;\n    }\n    return parent;\n  }\n  onMoveSlider(e) {\n    const mousePos = this.limitSliderButtonPosition(e);\n    this.updateParts(mousePos);\n    this._rate = this.convertPixelToRate(mousePos);\n    this._sliderEventEmitter.emit("slider_change", new SliderEventContext(this.rate));\n  }\n  /**\n   * スライダーボタンの位置を制限する関数\n   * @return 制限で切り落とされたスライダーボタンの座標値 座標の原点はSliderViewであり、ボタンやバーではない。\n   */\n  limitSliderButtonPosition(evt) {\n    const mousePos = this.getMousePosition(this, evt);\n    return SliderViewUtil.clamp(mousePos, this._maxPosition, this._minPosition);\n  }\n  /**\n   * 各MCの位置、サイズをマウスポインタの位置に合わせて更新する\n   * moveSliderの内部処理\n   * @param\tmousePos SliderViewを原点としたローカルのマウス座標、limitSliderButtonPosition関数で可動範囲に制限済み。\n   */\n  updateParts(mousePos) {\n    const stretch = target => {\n      SliderViewUtil.setSize(target, this._isHorizontal, mousePos - SliderViewUtil.getPosition(target, this._isHorizontal));\n    };\n    //バーマスクがなければ、バー自体を伸縮する\n    if (this._bar && !this._barMask) {\n      stretch(this._bar);\n    }\n    //バーマスクがあれば、マスクを伸縮する。\n    if (this._barMask) {\n      stretch(this._barMask);\n    }\n    //ボタンの位置を更新する。\n    SliderViewUtil.setPosition(this._slideButton, this._isHorizontal, mousePos);\n  }\n  /**\n   * スライダーの地をクリックした際の処理\n   * その位置までスライダーをジャンプする\n   * @param evt\n   */\n  onPressBase(evt) {\n    this.dragStartPos = new math_lib/* Point */.E9();\n    this.moveSlider(evt);\n    this._sliderEventEmitter.emit("slider_change_finished", new SliderEventContext(this.rate));\n  }\n  /**\n   * スライダーの割合から、スライダーの位置を取得する\n   * @param\trate\n   * @return\n   */\n  convertRateToPixel(rate) {\n    return SliderViewUtil.convertRateToPixel(rate, this._maxPosition, this._minPosition);\n  }\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   * @param\tpixel\n   * @return\n   */\n  convertPixelToRate(pixel) {\n    return SliderViewUtil.convertPixelToRate(pixel, this._maxPosition, this._minPosition);\n  }\n  /**\n   * ドラッグ中のマウス座標を取得する。\n   * limitSliderButtonPosition内の処理。\n   */\n  getMousePosition(displayObj, evt) {\n    let localPos;\n    if (evt instanceof events_lib/* FederatedPointerEvent */.nR) {\n      localPos = displayObj.toLocal(evt.global);\n    } else {\n      localPos = displayObj.toLocal(new math_lib/* Point */.E9(evt.offsetX, evt.offsetY));\n    }\n    if (this._isHorizontal) {\n      return localPos.x - this.dragStartPos.x;\n    } else {\n      return localPos.y - this.dragStartPos.y;\n    }\n  }\n  set base(value) {\n    this._base = value;\n    this._base.interactive = true;\n    this._base.on("pointertap", e => {\n      this.onPressBase(e);\n    });\n    this.addChildParts(value);\n  }\n  initBarAndMask(value) {\n    if (value == null) return;\n    value.interactive = false;\n    value.interactiveChildren = false;\n    this.addChildParts(value);\n    return value;\n  }\n  set slideButton(value) {\n    this._slideButton = value;\n    this._slideButton.on("pointerdown", this.startMove);\n    this._slideButton.interactive = true;\n    this._slideButton.interactiveChildren = false;\n    this.addChildParts(value);\n  }\n  get rate() {\n    return this._rate;\n  }\n  /**\n   * 全てのDisplayObjectとEventListenerを解除する。\n   * @param {Event} e\n   */\n  onDisposeFunction(e) {\n    this.removeAllListeners();\n    this._base.removeAllListeners();\n    this._slideButton.removeAllListeners();\n    this.removeChildren();\n  }\n}\nSliderView.MAX_RATE = 1.0;\nclass SliderViewUtil {\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   */\n  static convertPixelToRate(pixel, max, min) {\n    if (max <= min) {\n      return 0.0;\n    }\n    const rate = (pixel - min) / (max - min) * SliderView.MAX_RATE;\n    return SliderViewUtil.clamp(rate, SliderView.MAX_RATE, 0.0);\n  }\n  static convertRateToPixel(rate, max, min) {\n    const pix = (max - min) * rate / SliderView.MAX_RATE + min;\n    return SliderViewUtil.clamp(pix, max, min);\n  }\n  /**\n   * ディスプレイオブジェクトからスクロール方向の座標値を取り出す\n   * @return displayObjの座標値。単位ピクセル\n   */\n  static getPosition(displayObj, isHorizontal) {\n    if (isHorizontal) {\n      return displayObj.x;\n    }\n    return displayObj.y;\n  }\n  /**\n   * ディスプレイオブジェクトにスクロール方向の座標値を設定する\n   */\n  static setPosition(displayObj, isHorizontal, position) {\n    if (!displayObj) return;\n    if (isHorizontal) {\n      displayObj.x = position;\n    } else {\n      displayObj.y = position;\n    }\n  }\n  /**\n   * スクロール方向の高さ、もしくは幅を取得する。単位ピクセル\n   */\n  static getSize(displayObj, isHorizontal) {\n    const size = SliderViewUtil.getContentsBounds(displayObj);\n    if (isHorizontal) {\n      return size.width * displayObj.scale.x;\n    } else {\n      return size.height * displayObj.scale.y;\n    }\n  }\n  /**\n   * スクロール方向の高さ、もしくは幅を設定する。\n   * @param displayObj\n   * @param isHorizontal\n   * @param amount width or height, range : 0 ~ displayObj.size.width or height, unit : px\n   */\n  static setSize(displayObj, isHorizontal, amount) {\n    const size = SliderViewUtil.getContentsBounds(displayObj);\n    if (isHorizontal) {\n      displayObj.scale.x = amount / size.width;\n    } else {\n      displayObj.scale.y = amount / size.height;\n    }\n  }\n  static clamp(num, max, min) {\n    num = Math.max(num, min);\n    num = Math.min(num, max);\n    return num;\n  }\n  static getContentsBounds(displayObj) {\n    if (displayObj.hitArea) return displayObj.hitArea;\n    return displayObj.getLocalBounds();\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(471);\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarViewUtil.js\n\nclass ScrollBarViewUtil {\n  /**\n   * ターゲットコンテンツが、マスク領域内に収まる座標値を取得する。\n   * @param target\n   * @param mask\n   * @param isHorizontal\n   */\n  static getClampedTargetPosition(target, mask, isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const targetSize = getSize(target, isHorizontal);\n    const maskSize = getSize(mask, isHorizontal);\n    const minPos = Math.min(-targetSize + maskSize, 0.0);\n    const pos = SliderViewUtil.getPosition(target, isHorizontal);\n    return SliderViewUtil.clamp(pos, 0, minPos);\n  }\n  /**\n   * ターゲットコンテンツの位置を、マスク領域内に丸め込む。\n   * @param target\n   * @param mask\n   * @param position\n   * @param isHorizontal\n   */\n  static clampTargetPosition(target, mask, position, isHorizontal) {\n    SliderViewUtil.setPosition(target, isHorizontal, position);\n    const clampedPos = this.getClampedTargetPosition(target, mask, isHorizontal);\n    SliderViewUtil.setPosition(target, isHorizontal, clampedPos);\n  }\n  static getRatioOfOrigin(displayObj, isHorizontal) {\n    const bounds = SliderViewUtil.getContentsBounds(displayObj);\n    const size = isHorizontal ? bounds.width : bounds.height;\n    const position = isHorizontal ? bounds.x : bounds.y;\n    const ratio = position / size;\n    if (ratio > 0) {\n      console.warn(`${displayObj.name} : ボタンサイズが不適切です。ボタンの矩形内に原点が収まっていません。スクロールバーボタンは原点を囲む矩形としてください。`);\n    }\n    return ratio;\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/InertialScrollManager.js\n\n\n\n\n/**\n * スクロールバーエリアの慣性スクロールを処理するクラス。\n */\nclass InertialScrollManager extends lib/* utils.EventEmitter */.P6Y.EventEmitter {\n  get speed() {\n    return this._speed;\n  }\n  constructor(scrollBarView) {\n    super();\n    this.decelerationRate = 0.975;\n    this.overflowScrollRange = 180;\n    this._speed = 0.0;\n    this.isDragging = false;\n    this.onMouseDown = e => {\n      this.updateDragPos(e);\n      this.isDragging = true;\n      this._speed = 0.0;\n      if (this.tween) this.disposeTween();\n      this.addDragListener();\n    };\n    this.onMouseMove = e => {\n      const delta = this.getDragPos(e) - this.dragPos;\n      this._speed = delta;\n      this.addTargetPosition(delta * this.getOverflowDeceleration());\n      this.updateDragPos(e);\n    };\n    this.onMouseUp = e => {\n      this.removeDragListener();\n      this.isDragging = false;\n      this.onTick();\n    };\n    this.onTick = () => {\n      var _a;\n      if (this.isDragging) return;\n      if (this._speed === 0.0 && this.getLeaveRangeFromMask() === 0.0) return;\n      if ((_a = this.tween) === null || _a === void 0 ? void 0 : _a.isPlaying()) return;\n      //位置による減速率増加。マスクエリアから離れているなら減速率が大きくなる。\n      const overflowDeceleration = this.getOverflowDeceleration();\n      this._speed *= this.decelerationRate * overflowDeceleration;\n      this.addTargetPosition(this._speed);\n      if (Math.abs(this._speed) > 0.1) return;\n      //back ease\n      this._speed = 0.0;\n      const toObj = {\n        y: this.getClampedPos()\n      };\n      this.disposeTween();\n      this.tween = new tween_esm/* Tween */.kX(this.scrollBarView.contents.target).to(toObj, 666).onUpdate(() => {\n        this.emit("update_target_position");\n      }).easing(tween_esm/* Easing.Cubic.Out */.oY.Cubic.Out).start();\n    };\n    this.stopInertial = () => {\n      this._speed = 0.0;\n      this.disposeTween();\n    };\n    this.disposeTween = () => {\n      if (this.tween) {\n        this.tween.stop();\n        this.tween = null;\n      }\n    };\n    this.scrollBarView = scrollBarView;\n    scrollBarView.scrollBarEventEmitter.on("stop_inertial_tween", this.stopInertial);\n    const target = this.scrollBarView.contents.target;\n    target.interactive = true;\n    this.start();\n  }\n  start() {\n    if (this._isStart) return;\n    this._isStart = true;\n    const target = this.scrollBarView.contents.target;\n    target.on("pointerdown", this.onMouseDown);\n    lib/* Ticker.shared.add */.vB5.shared.add(this.onTick);\n  }\n  stop() {\n    if (!this._isStart) return;\n    this._isStart = false;\n    const target = this.scrollBarView.contents.target;\n    target.off("pointerdown", this.onMouseDown);\n    this.removeDragListener();\n    this.stopInertial();\n    lib/* Ticker.shared.remove */.vB5.shared.remove(this.onTick);\n  }\n  addDragListener() {\n    this.switchDragListener(true);\n  }\n  removeDragListener() {\n    this.switchDragListener(false);\n  }\n  switchDragListener(isOn) {\n    const target = this.scrollBarView.contents.target;\n    const switchListener = (isOn, event, listener) => {\n      if (isOn) {\n        target.on(event, listener);\n      } else {\n        target.off(event, listener);\n      }\n    };\n    switchListener(isOn, "pointermove", this.onMouseMove);\n    switchListener(isOn, "pointerup", this.onMouseUp);\n    switchListener(isOn, "pointerupoutside", this.onMouseUp);\n  }\n  getDragPos(e) {\n    return SliderViewUtil.getPosition(e.global, this.scrollBarView.isHorizontal);\n  }\n  updateDragPos(e) {\n    this.dragPos = this.getDragPos(e);\n  }\n  addTargetPosition(delta) {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const currentPos = SliderViewUtil.getPosition(target, isHorizontal);\n    SliderViewUtil.setPosition(target, isHorizontal, currentPos + delta);\n    this.emit("update_target_position");\n  }\n  /**\n   * スクロールのオーバーフロー量から、減退率を割り出す。\n   * overflowScrollRange以上に離れている場合は0.0\n   * スクロールエリア内にコンテンツがある場合は1.0を返す。\n   */\n  getOverflowDeceleration() {\n    const difPos = this.getLeaveRangeFromMask();\n    let overflowDeceleration = (this.overflowScrollRange - difPos) / this.overflowScrollRange;\n    if (overflowDeceleration < 0.0) overflowDeceleration = 0.0;\n    return overflowDeceleration;\n  }\n  /**\n   * ターゲットコンテンツがマスク領域からどれだけ離れているか。\n   */\n  getLeaveRangeFromMask() {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const currentPos = SliderViewUtil.getPosition(target, isHorizontal);\n    const clampedPos = this.getClampedPos();\n    return Math.abs(currentPos - clampedPos);\n  }\n  getClampedPos() {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    return ScrollBarViewUtil.getClampedTargetPosition(target, this.scrollBarView.contents.mask, isHorizontal);\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/MouseWheelScrollManager.js\n\n\n\n/**\n * ScrollBarViewを受け取り、マウスホイールによる操作を行うクラス\n */\nclass MouseWheelScrollManager extends lib/* utils.EventEmitter */.P6Y.EventEmitter {\n  constructor(scrollBarView) {\n    super();\n    this.delta = 16;\n    //TODO add support deltaX / deltaY\n    this.wheelHandler = e => {\n      const shift = e.deltaY > 0 ? -this.delta : this.delta;\n      this.scroll(shift);\n    };\n    this.scrollBarView = scrollBarView;\n    const target = this.scrollBarView.contents.target;\n    target.interactive = true;\n    this.start();\n  }\n  start() {\n    if (this._isStart) return;\n    const target = this.scrollBarView.contents.target;\n    target.on("wheel", this.wheelHandler);\n    this._isStart = true;\n  }\n  stop() {\n    const target = this.scrollBarView.contents.target;\n    target.off("wheel", this.wheelHandler);\n    this._isStart = false;\n  }\n  scroll(delta) {\n    const target = this.scrollBarView.contents.target;\n    const mask = this.scrollBarView.contents.mask;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const pos = SliderViewUtil.getPosition(target, isHorizontal) + delta;\n    ScrollBarViewUtil.clampTargetPosition(target, mask, pos, isHorizontal);\n    this.emit("update_target_position");\n    this.scrollBarView.scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarContentsEventType.js\nvar ScrollBarContentsEventType;\n(function (ScrollBarContentsEventType) {\n  ScrollBarContentsEventType["CHANGED_CONTENTS_SIZE"] = "ScrollBarContentsEventType_CHANGED_CONTENTS_SIZE";\n})(ScrollBarContentsEventType || (ScrollBarContentsEventType = {}));\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarContents.js\n\n\n\n/**\n * スクロールバーで操作するコンテンツ\n */\nclass ScrollBarContents extends utils_lib.EventEmitter {\n  get target() {\n    return this._target;\n  }\n  set target(value) {\n    this._target = value;\n    this.emit(ScrollBarContentsEventType.CHANGED_CONTENTS_SIZE);\n  }\n  get mask() {\n    return this._mask;\n  }\n  set mask(value) {\n    this._mask = value;\n    this.emit(ScrollBarContentsEventType.CHANGED_CONTENTS_SIZE);\n  }\n  /**\n   * コンストラクタ\n   *\n   * @param target スクロール操作を受けるコンテンツ\n   * @param mask targetを切り抜くマスク\n   * @param container targetおよびmaskを格納する親コンテナ\n   */\n  constructor(target, mask, container) {\n    super();\n    this.container = container;\n    this._target = target;\n    this._mask = mask;\n    ScrollBarContents.init(this);\n  }\n  static init(scrollBarContents) {\n    if (scrollBarContents._target.mask !== scrollBarContents._mask) {\n      scrollBarContents._target.mask = scrollBarContents._mask;\n    }\n    const addToContainer = displayObject => {\n      var _a;\n      if (displayObject.parent === scrollBarContents.container) return;\n      (_a = displayObject.parent) === null || _a === void 0 ? void 0 : _a.removeChild(displayObject);\n      scrollBarContents.container.addChild(displayObject);\n    };\n    addToContainer(scrollBarContents._target);\n    addToContainer(scrollBarContents._mask);\n  }\n  /**\n   * 現状のスクロール位置を取得する。単位rate\n   * 0.0でコンテンツはTOP, 1.0でBOTTOMに位置している。\n   *\n   * @param isHorizontal\n   */\n  getScrollPositionAsRate(isHorizontal) {\n    const getPos = SliderViewUtil.getPosition;\n    const zeroPos = getPos(this.mask, isHorizontal);\n    const contentsPos = getPos(this.target, isHorizontal);\n    const contentsPositionDif = zeroPos - contentsPos;\n    const movableRange = this.getMovableRange(isHorizontal);\n    return contentsPositionDif / movableRange * SliderView.MAX_RATE;\n  }\n  /**\n   * スクロールの最大可動領域を取得する。単位px\n   * もし可動域がゼロpx以下の場合、極小の正の値を返す。\n   *\n   * @param isHorizontal\n   * @private\n   */\n  getMovableRange(isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const targetSize = getSize(this._target, isHorizontal);\n    const maskSize = getSize(this._mask, isHorizontal);\n    const dif = targetSize - maskSize;\n    if (dif <= 0.0) {\n      return 1e-128;\n    }\n    return dif;\n  }\n  /**\n   * コンテンツを、指定されたrateの位置までスクロールする\n   *\n   * @param rate\n   * @param isHorizontal\n   */\n  scroll(rate, isHorizontal) {\n    const getPos = SliderViewUtil.getPosition;\n    const zeroPos = getPos(this._mask, isHorizontal);\n    const movableRange = this.getMovableRange(isHorizontal);\n    const contentsPos = zeroPos - movableRange * (rate / SliderView.MAX_RATE);\n    SliderViewUtil.setPosition(this._target, isHorizontal, contentsPos);\n  }\n  /**\n   * コンテンツが表示領域にどれだけ表示されているかの比率を取得する。\n   * この比率は、スクロールバーボタンのスケールとなる。\n   *\n   * 例 : コンテンツサイズが200、表示領域が100なら0.5\n   * コンテンツがすべて表示されているなら1.0\n   *\n   * @param isHorizontal\n   * @return 0.0 ~ 1.0\n   */\n  getDisplayRate(isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const contentsSize = getSize(this.target, isHorizontal);\n    const maskSize = getSize(this.mask, isHorizontal);\n    return SliderViewUtil.clamp(maskSize / contentsSize, SliderView.MAX_RATE, 0.0);\n  }\n  dispose() {\n    this.removeAllListeners();\n    this.container = null;\n    this._mask = null;\n    this._target = null;\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarEvent.js\n\nclass ScrollBarEventEmitter extends lib/* utils.EventEmitter */.P6Y.EventEmitter {}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarView.js\n\n\n\n\n\n\n/**\n * スクロールバーを表すクラスです。\n *\n * このクラスは、スライダーに以下の機能を追加したものです。\n *\n * \t\t1.コンテンツサイズに合わせた、スクロールバーの伸縮\n * \t\t2.スクロールバーの伸縮にあわせた、移動範囲の制限\n * \t\t3.スクロールバーの伸縮にあわせた、移動値の取得\n */\nclass ScrollBarView extends SliderView {\n  get contents() {\n    return this._contents;\n  }\n  get autoHide() {\n    return this._autoHide;\n  }\n  set autoHide(value) {\n    this._autoHide = value;\n    this.updateSliderVisible();\n  }\n  get scrollBarEventEmitter() {\n    return this._scrollBarEventEmitter;\n  }\n  constructor(option, scrollContents) {\n    super(option);\n    this._autoHide = false;\n    this._scrollBarEventEmitter = new ScrollBarEventEmitter();\n    /**\n     * スライダーイベントに応じてコンテンツをスクロールする\n     * @param {Object} e\n     */\n    this.updateContentsPosition = e => {\n      const evt = e;\n      this.updateContentsPositionWithRate(evt.rate);\n    };\n    this._contents = scrollContents;\n    this._contents.on(ScrollBarContentsEventType.CHANGED_CONTENTS_SIZE, this.updateSlider);\n    this._sliderEventEmitter.on("slider_change", this.updateContentsPosition);\n    this.changeRate(option.rate);\n    this.wheelManager = new MouseWheelScrollManager(this);\n    this.wheelManager.on("update_target_position", () => {\n      this.updateSliderPosition();\n    });\n    this.inertialManager = new InertialScrollManager(this);\n    this.inertialManager.on("update_target_position", () => {\n      this.updateSliderPosition();\n    });\n  }\n  /**\n   * スライダーボタンの位置を制限する関数\n   * @return 制限で切り落とされたスライダーボタンの座標値\n   */\n  limitSliderButtonPosition(evt) {\n    const mousePos = this.getMousePosition(this, evt);\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.clamp(mousePos, range.max, range.min);\n  }\n  /**\n   * スライダーの割合から、スライダーの位置を取得する\n   * @param\trate\n   * @return\n   */\n  convertRateToPixel(rate) {\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.convertRateToPixel(rate, range.max, range.min);\n  }\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   * @param\tpixel\n   * @return\n   */\n  convertPixelToRate(pixel) {\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.convertPixelToRate(pixel, range.max, range.min);\n  }\n  /**\n   * スライダーボタンの可動範囲を取得する。単位ピクセル\n   */\n  getRangeOfSliderButtonPosition() {\n    const buttonSize = this.slideButtonSize;\n    const ratio = ScrollBarViewUtil.getRatioOfOrigin(this._slideButton, this.isHorizontal);\n    const max = this._maxPosition - (1.0 + ratio) * buttonSize;\n    const min = this._minPosition - ratio * buttonSize;\n    return {\n      max,\n      min\n    };\n  }\n  /**\n   * スライダーボタンのサイズ。\n   * @returns {number}\n   */\n  get slideButtonSize() {\n    this.updateSliderSize();\n    return SliderViewUtil.getSize(this._slideButton, this.isHorizontal);\n  }\n  /**\n   * スクロールバーのボタンサイズ及び位置を更新する。\n   * コンテンツサイズが変更された場合の更新にも利用する。\n   */\n  updateSlider() {\n    if (!this.isUpdatableSliderSize()) return;\n    this.updateSliderSize();\n    this.updateSliderPosition();\n  }\n  /**\n   * 現状のコンテンツおよびマスク位置から、スライダーの割合を算出する。\n   * その割合でスライダーの位置を更新する。\n   */\n  updateSliderPosition() {\n    const rate = this.contents.getScrollPositionAsRate(this.isHorizontal);\n    this.changeRate(rate);\n  }\n  isUpdatableSliderSize() {\n    var _a, _b;\n    return ((_a = this._contents) === null || _a === void 0 ? void 0 : _a.target) != null && ((_b = this._contents) === null || _b === void 0 ? void 0 : _b.mask) != null && this._slideButton != null;\n  }\n  /**\n   * スライダーボタンのサイズの伸縮を行う。\n   */\n  updateSliderSize() {\n    if (!this.isUpdatableSliderSize()) return;\n    const fullSize = this._maxPosition - this._minPosition;\n    const displayRate = this._contents.getDisplayRate(this.isHorizontal);\n    const sliderSize = fullSize * displayRate;\n    SliderViewUtil.setSize(this._slideButton, this.isHorizontal, sliderSize);\n    this.updateSliderVisible();\n  }\n  /**\n   * autoHideの条件に一致するかを判定し、表示を切り替える。\n   * @private\n   */\n  updateSliderVisible() {\n    this._slideButton.visible = this._slideButton.interactive = !this.isHidden;\n  }\n  /**\n   * autoHideの条件に一致するかを判定する\n   */\n  get isHidden() {\n    //autoHideが設定されていない場合は常に表示\n    if (!this.autoHide) return false;\n    return this._contents.getDisplayRate(this.isHorizontal) === 1.0;\n  }\n  /**\n   * rate値を元にコンテンツをスクロールする。\n   * @param {number} rate\n   */\n  updateContentsPositionWithRate(rate) {\n    this._contents.scroll(rate, this.isHorizontal);\n  }\n  onPressedSliderButton(e) {\n    super.onPressedSliderButton(e);\n    this._scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n  onMoveSlider(e) {\n    super.onMoveSlider(e);\n    this._scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n  onPressBase(evt) {\n    if (this.isHidden) return;\n    super.onPressBase(evt);\n    this._scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n  onDisposeFunction(e) {\n    this._contents.dispose();\n    this._contents = null;\n    super.onDisposeFunction(e);\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/index.js\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo_scrollbar.js\n\n\n\nconst onDomContentsLoaded = () => {\n  const app = new lib/* Application */.MxU({\n    width: 800,\n    height: 800\n  });\n  document.body.appendChild(app.view);\n  lib/* Ticker.shared.add */.vB5.shared.add(e => {\n    tween_esm/* default.update */.ZP.update(performance.now());\n  });\n  const scrollbar = initScrollBar(app.stage, app.view);\n  const addButton = label => {\n    const btnPlus = document.createElement("button");\n    btnPlus.innerText = label;\n    document.body.appendChild(btnPlus);\n    return btnPlus;\n  };\n  const btnPlus = addButton("Contents Size +");\n  const btnMinus = addButton("Contents Size -");\n  const changeSize = dif => {\n    const scrollPosition = scrollbar.rate;\n    overrideContents(scrollbar.contents.target, dif);\n    scrollbar.updateSlider();\n    scrollbar.changeRate(scrollPosition);\n  };\n  const onPlus = () => {\n    changeSize(64);\n  };\n  const onMinus = () => {\n    changeSize(-64);\n  };\n  btnPlus.addEventListener("click", onPlus);\n  btnMinus.addEventListener("click", onMinus);\n};\n\n/**\n * スクロールバーの実装サンプル\n * @param stage\n */\nconst initScrollBar = (stage, view) => {\n  const SCROLLBAR_W = 16;\n  const SCROLLBAR_H = 360;\n  const SCROLLBAR_Y = 120;\n  const CONTENTS_W = 240;\n  const container = new lib/* Container */.W20();\n  stage.addChild(container);\n  container.x = 32;\n  container.y = SCROLLBAR_Y;\n  const contents = getScrollBarOption(CONTENTS_W, SCROLLBAR_H, container);\n  const scrollbar = new ScrollBarView({\n    base: getScrollBarBase(SCROLLBAR_W, SCROLLBAR_H, 0x0000ff),\n    button: getScrollBarButton(SCROLLBAR_W, 0xffff00),\n    minPosition: 0,\n    maxPosition: SCROLLBAR_H,\n    rate: 35.0,\n    isHorizontal: false,\n    canvas: view\n  }, contents);\n  stage.addChild(scrollbar);\n  scrollbar.x = container.x + CONTENTS_W;\n  scrollbar.y = SCROLLBAR_Y;\n  scrollbar.sliderEventEmitter.on("slider_change", e => {\n    // console.log(e);\n  });\n\n  /**\n   * スクロール動作を確認するために、故意にマスクを外しています。\n   */\n  contents.target.mask = null;\n  return scrollbar;\n};\nconst getScrollBarBase = (w, h, color) => {\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(color);\n  g.drawRect(0, 0, w, h);\n  g.hitArea = new lib/* Rectangle */.AeJ(0, 0, w, h);\n  return g;\n};\nconst getScrollBarButton = (width, color) => {\n  const ratio = 0.5;\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(color);\n  g.drawRect(-width / 2, -width * ratio, width, width);\n  g.hitArea = new lib/* Rectangle */.AeJ(-width / 2, -width * ratio, width, width);\n  g.x = width / 2;\n  return g;\n};\nconst getScrollBarContents = (color, w, h, container, alpha = 1.0) => {\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(color, alpha);\n  g.drawRect(0, 0, w, h);\n  g.hitArea = new lib/* Rectangle */.AeJ(0, 0, w, h);\n  container.addChild(g);\n  return g;\n};\nconst overrideContents = (g, difHeight) => {\n  const fill = g.fill.clone();\n  console.log(fill);\n  const hitArea = g.hitArea.clone();\n  hitArea.height += difHeight;\n  g.clear();\n  g.beginFill(fill.color, fill.alpha);\n  g.drawRect(hitArea.x, hitArea.y, hitArea.width, hitArea.height);\n  g.hitArea = new lib/* Rectangle */.AeJ(hitArea.x, hitArea.y, hitArea.width, hitArea.height);\n};\nconst getScrollBarOption = (contentsW, scrollBarH, container) => {\n  const targetContents = getScrollBarContents(0xff00ff, contentsW, scrollBarH * 2, container);\n  const contentsMask = getScrollBarContents(0x0000ff, contentsW, scrollBarH, container, 0.3);\n  return new ScrollBarContents(targetContents, contentsMask, container);\n};\n\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nif (document.readyState !== "loading") {\n  onDomContentsLoaded();\n} else {\n  document.addEventListener("DOMContentLoaded", onDomContentsLoaded);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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L3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vU2xpZGVyRXZlbnQuanM/NjQzZiIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vU2xpZGVyVmlld09wdGlvbi5qcz9iZTg0Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9TbGlkZXJWaWV3LmpzPzRmYzIiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL3Njcm9sbEJhci9TY3JvbGxCYXJWaWV3VXRpbC5qcz9mMmMzIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9zY3JvbGxCYXIvSW5lcnRpYWxTY3JvbGxNYW5hZ2VyLmpzPzM2YmYiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL3Njcm9sbEJhci9Nb3VzZVdoZWVsU2Nyb2xsTWFuYWdlci5qcz9iNzBjIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9zY3JvbGxCYXIvU2Nyb2xsQmFyQ29udGVudHNFdmVudFR5cGUuanM/ZjQyMyIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vc2Nyb2xsQmFyL1Njcm9sbEJhckNvbnRlbnRzLmpzPzVhZDUiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL3Njcm9sbEJhci9TY3JvbGxCYXJFdmVudC5qcz81NjNjIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9zY3JvbGxCYXIvU2Nyb2xsQmFyVmlldy5qcz9hMGZmIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9zY3JvbGxCYXIvaW5kZXguanM/ZjUyMSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vaW5kZXguanM/YjIzOSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9kZW1vU3JjL2RlbW9fc2Nyb2xsYmFyLmpzPzQ2OTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBwaXhpL3V0aWxzXCI7XG4vKipcbiAqIOOCueODqeOCpOODgOODvOOBjOenu+WLleOBl+OBn+mam+OBq+eZuuihjOOBleOCjOOCi+OCpOODmeODs+ODiOOBp+OBmeOAglxuICog54++54q244Gu44K544Op44Kk44OA44O85L2N572u44KS5aCx5ZGK44GX44G+44GZ44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBTbGlkZXJFdmVudENvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKHJhdGUpIHtcbiAgICAgICAgdGhpcy5yYXRlID0gcmF0ZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU2xpZGVyRXZlbnRFbWl0dGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbn1cbiIsIi8qKlxuICog44K544Op44Kk44OA44O844KS5Yid5pyf5YyW44GZ44KL6Zqb44Gu44Kq44OX44K344On44OzXG4gKi9cbmltcG9ydCB7IFNIQVBFUyB9IGZyb20gXCJwaXhpLmpzXCI7XG5pbXBvcnQgeyBTbGlkZXJWaWV3LCBTbGlkZXJWaWV3VXRpbCB9IGZyb20gXCIuL1NsaWRlclZpZXdcIjtcbmV4cG9ydCBjbGFzcyBTbGlkZXJWaWV3T3B0aW9uIHtcbiAgICBzdGF0aWMgaW5pdChvcHRpb24pIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGlmIChvcHRpb24ucmF0ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb24ucmF0ZSA9IE1hdGgubWF4KDAsIG9wdGlvbi5yYXRlKTtcbiAgICAgICAgICAgIG9wdGlvbi5yYXRlID0gTWF0aC5taW4oU2xpZGVyVmlldy5NQVhfUkFURSwgb3B0aW9uLnJhdGUpO1xuICAgICAgICB9XG4gICAgICAgIChfYSA9IG9wdGlvbi5taW5Qb3NpdGlvbikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKG9wdGlvbi5taW5Qb3NpdGlvbiA9IDAuMCk7XG4gICAgICAgIChfYiA9IG9wdGlvbi5yYXRlKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAob3B0aW9uLnJhdGUgPSAwLjApO1xuICAgICAgICAoX2MgPSBvcHRpb24uaXNIb3Jpem9udGFsKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAob3B0aW9uLmlzSG9yaXpvbnRhbCA9IHRydWUpO1xuICAgICAgICB0aGlzLmNoZWNrKG9wdGlvbik7XG4gICAgICAgIHJldHVybiBvcHRpb247XG4gICAgfVxuICAgIHN0YXRpYyBjaGVjayhvcHRpb24pIHtcbiAgICAgICAgdGhpcy5jaGVja1BhcnRzKG9wdGlvbi5iYXNlLCBcImJhc2VcIik7XG4gICAgICAgIHRoaXMuY2hlY2tQYXJ0cyhvcHRpb24uYnV0dG9uLCBcImJ1dHRvblwiKTtcbiAgICAgICAgdGhpcy5jaGVja1BhcnRzKG9wdGlvbi5tYXNrLCBcIm1hc2tcIik7XG4gICAgICAgIHRoaXMuY2hlY2tQYXJ0cyhvcHRpb24uYmFyLCBcImJhclwiKTtcbiAgICB9XG4gICAgc3RhdGljIGNoZWNrUGFydHMob2JqLCB0YXJnZXROYW1lKSB7XG4gICAgICAgIGlmIChvYmogPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgYm91bmRzID0gU2xpZGVyVmlld1V0aWwuZ2V0Q29udGVudHNCb3VuZHMob2JqKTtcbiAgICAgICAgaWYgKGJvdW5kcy53aWR0aCA9PT0gMCAmJlxuICAgICAgICAgICAgYm91bmRzLmhlaWdodCA9PT0gMCAmJlxuICAgICAgICAgICAgYm91bmRzLnR5cGUgPT09IFNIQVBFUy5SRUNUKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFNsaWRlclZpZXcgOiAke3RhcmdldE5hbWV9IOWIneacn+WMluOCquODl+OCt+ODp+ODs+OBp+aMh+WumuOBleOCjOOBn0Rpc3BsYXlPYmplY3Tjgavjg5Djgqbjg7Pjg4fjgqPjg7PjgrDjg5zjg4Pjgq/jgrnjgYzlrZjlnKjjgZfjgb7jgZvjgpPjgIJDb250YWluZXLjgpLliKnnlKjjgZnjgovloLTlkIjjga9oaXRBcmVh44KS5Yip55So44GX44Gm44OQ44Km44Oz44OH44Kj44Oz44Kw44Oc44OD44Kv44K544KS5omL5YuV44Gn6Kit5a6a44GX44Gm44GP44Gg44GV44GE44CCYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iai5wYXJlbnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihg5Yid5pyf5YyW44Kq44OX44K344On44Oz44Gn5oyH5a6a44GV44KM44Gf44OR44O844OE44GM44GZ44Gn44Gr5Yil44Gu6Kaq44GrYWRkQ2hpbGTjgZXjgozjgabjgYTjgb7jgZnjgIJTbGlkZXJWaWV344GK44KI44GzU2Nyb2xsQmFyVmlld+OBruani+aIkOODkeODvOODhOOBr+WQjOS4gOOBruOCs+ODs+ODhuODiuOBq2FkZENoaWxk44GV44KM44KL44GT44Go44KS5YmN5o+Q44Go44GX44Gm44GE44G+44GZ44CCYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb250YWluZXIgfSBmcm9tIFwiQHBpeGkvZGlzcGxheVwiO1xuaW1wb3J0IHsgRmVkZXJhdGVkUG9pbnRlckV2ZW50IH0gZnJvbSBcIkBwaXhpL2V2ZW50c1wiO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tIFwiQHBpeGkvbWF0aFwiO1xuaW1wb3J0IHsgU2xpZGVyRXZlbnRDb250ZXh0LCBTbGlkZXJFdmVudEVtaXR0ZXIgfSBmcm9tIFwiLi9TbGlkZXJFdmVudFwiO1xuaW1wb3J0IHsgU2xpZGVyVmlld09wdGlvbiB9IGZyb20gXCIuL1NsaWRlclZpZXdPcHRpb25cIjtcbi8qKlxuICog44K544Op44Kk44OA44O855So44Kv44Op44K544Gn44GZXG4gKlxuICog5L2/55So5LiK44Gu5rOo5oSPIDpcbiAqIOOCquODluOCuOOCp+OCr+ODiOOBruOCteOCpOOCuuOBruioiOa4rOOBq2dldExvY2FsQm91bmRz6Zai5pWw44KS5L2/55So44GX44Gm44GE44G+44GZ44CCXG4gKiBoaXRBcmVh44Gn44K144Kk44K644KS44GC44KJ44GL44GY44KB5LiO44GI44Gm44GP44Gg44GV44GE44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBTbGlkZXJWaWV3IGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgICBnZXQgYnV0dG9uUm9vdENvbnRhaW5lcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1dHRvblJvb3RDb250YWluZXI7XG4gICAgfVxuICAgIGdldCBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0hvcml6b250YWw7XG4gICAgfVxuICAgIGdldCBzbGlkZXJFdmVudEVtaXR0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zbGlkZXJFdmVudEVtaXR0ZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBvcHRpb25cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb24pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5faXNIb3Jpem9udGFsID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kcmFnU3RhcnRQb3MgPSBuZXcgUG9pbnQoKTtcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7IC8vIOePvuWcqOOCueODqeOCpOODieS4reOBi+WQpuOBi1xuICAgICAgICB0aGlzLl9zbGlkZXJFdmVudEVtaXR0ZXIgPSBuZXcgU2xpZGVyRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjgrnjg6njgqTjg4Djg7zjga7jg4njg6njg4PjgrDjgpLplovlp4vjgZnjgotcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3RhcnRNb3ZlID0gKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25QcmVzc2VkU2xpZGVyQnV0dG9uKGUpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICog44K544Op44Kk44OA44O844Gu44OJ44Op44OD44Kw5Lit44Gu5Yem55CGXG4gICAgICAgICAqIEBwYXJhbSBlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1vdmVTbGlkZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbk1vdmVTbGlkZXIoZSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjgrnjg6njgqTjg4Djg7zjga7jg4njg6njg4PjgrDntYLkuobmmYLjga7lh6bnkIZcbiAgICAgICAgICogQHBhcmFtXHRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1vdmVTbGlkZXJGaW5pc2ggPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9idXR0b25Sb290Q29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCB0aGlzLm1vdmVTbGlkZXIpO1xuICAgICAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24ub2ZmKFwicG9pbnRlcnVwXCIsIHRoaXMubW92ZVNsaWRlckZpbmlzaCk7XG4gICAgICAgICAgICB0aGlzLl9zbGlkZUJ1dHRvbi5vZmYoXCJwb2ludGVydXBvdXRzaWRlXCIsIHRoaXMubW92ZVNsaWRlckZpbmlzaCk7XG4gICAgICAgICAgICB0aGlzLl9zbGlkZXJFdmVudEVtaXR0ZXIuZW1pdChcInNsaWRlcl9jaGFuZ2VfZmluaXNoZWRcIiwgbmV3IFNsaWRlckV2ZW50Q29udGV4dCh0aGlzLnJhdGUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOOBk+OBruOCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOOBmeOCi+OAglxuICAgICAgICAgKiBAcGFyYW1cdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGlzcG9zZSA9IChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uRGlzcG9zZUZ1bmN0aW9uKGUpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmluaXQob3B0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog5Yid5pyf5YyW5Yem55CGXG4gICAgICogQHBhcmFtIG9wdGlvblxuICAgICAqL1xuICAgIGluaXQob3B0aW9uKSB7XG4gICAgICAgIG9wdGlvbiA9IFNsaWRlclZpZXdPcHRpb24uaW5pdChvcHRpb24pO1xuICAgICAgICB0aGlzLl9jYW52YXMgPSBvcHRpb24uY2FudmFzO1xuICAgICAgICB0aGlzLmJhc2UgPSBvcHRpb24uYmFzZTtcbiAgICAgICAgdGhpcy5fYmFyID0gdGhpcy5pbml0QmFyQW5kTWFzayhvcHRpb24uYmFyKTtcbiAgICAgICAgdGhpcy5fYmFyTWFzayA9IHRoaXMuaW5pdEJhckFuZE1hc2sob3B0aW9uLm1hc2spO1xuICAgICAgICBpZiAodGhpcy5fYmFyICYmIHRoaXMuX2Jhck1hc2spXG4gICAgICAgICAgICB0aGlzLl9iYXIubWFzayA9IHRoaXMuX2Jhck1hc2s7XG4gICAgICAgIHRoaXMuc2xpZGVCdXR0b24gPSBvcHRpb24uYnV0dG9uO1xuICAgICAgICB0aGlzLl9taW5Qb3NpdGlvbiA9IG9wdGlvbi5taW5Qb3NpdGlvbjtcbiAgICAgICAgdGhpcy5fbWF4UG9zaXRpb24gPSBvcHRpb24ubWF4UG9zaXRpb247XG4gICAgICAgIHRoaXMuX2lzSG9yaXpvbnRhbCA9IG9wdGlvbi5pc0hvcml6b250YWw7XG4gICAgICAgIHRoaXMuX3JhdGUgPSBvcHRpb24ucmF0ZTtcbiAgICAgICAgdGhpcy5jaGFuZ2VSYXRlKHRoaXMuX3JhdGUpO1xuICAgIH1cbiAgICBhZGRDaGlsZFBhcnRzKG9iaikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghb2JqKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAoX2EgPSBvYmoucGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlQ2hpbGQob2JqKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZChvYmopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjga7kvY3nva7jgpLlpInmm7TjgZnjgotcbiAgICAgKiBAcGFyYW1cdHJhdGVcdOOCueODqeOCpOODgOODvOOBruS9jee9riBNSU4gMC4wIH4gTUFYIDEwMC4wXG4gICAgICovXG4gICAgY2hhbmdlUmF0ZShyYXRlKSB7XG4gICAgICAgIC8v44OJ44Op44OD44Kw5Lit44Gv5aSW6YOo44GL44KJ44Gu5pON5L2c44KS54Sh6KaW44GZ44KL44CCXG4gICAgICAgIGlmICh0aGlzLmlzRHJhZ2dpbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX3JhdGUgPSByYXRlO1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLmNvbnZlcnRSYXRlVG9QaXhlbCh0aGlzLl9yYXRlKTtcbiAgICAgICAgdGhpcy51cGRhdGVQYXJ0cyhwb3MpO1xuICAgICAgICB0aGlzLl9zbGlkZXJFdmVudEVtaXR0ZXIuZW1pdChcInNsaWRlcl9jaGFuZ2VcIiwgbmV3IFNsaWRlckV2ZW50Q29udGV4dCh0aGlzLnJhdGUpKTtcbiAgICB9XG4gICAgb25QcmVzc2VkU2xpZGVyQnV0dG9uKGUpIHtcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0O1xuICAgICAgICBjb25zdCBsb2NhbFBvcyA9IHRoaXMudG9Mb2NhbChlLmdsb2JhbCk7XG4gICAgICAgIHRoaXMuZHJhZ1N0YXJ0UG9zID0gbmV3IFBvaW50KGxvY2FsUG9zLnggLSB0YXJnZXQueCwgbG9jYWxQb3MueSAtIHRhcmdldC55KTtcbiAgICAgICAgdGhpcy5fYnV0dG9uUm9vdENvbnRhaW5lciA9IFNsaWRlclZpZXcuZ2V0Um9vdENvbnRhaW5lcih0aGlzLl9jYW52YXMsIHRoaXMuX3NsaWRlQnV0dG9uKTtcbiAgICAgICAgdGhpcy5fYnV0dG9uUm9vdENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5tb3ZlU2xpZGVyKTtcbiAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24ub24oXCJwb2ludGVydXBcIiwgdGhpcy5tb3ZlU2xpZGVyRmluaXNoKTtcbiAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24ub24oXCJwb2ludGVydXBvdXRzaWRlXCIsIHRoaXMubW92ZVNsaWRlckZpbmlzaCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRSb290Q29udGFpbmVyKGNhbnZhcywgYnV0dG9uKSB7XG4gICAgICAgIGlmIChjYW52YXMpIHtcbiAgICAgICAgICAgIHJldHVybiBjYW52YXM7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBhcmVudCA9IGJ1dHRvbi5wYXJlbnQ7XG4gICAgICAgIHdoaWxlIChwYXJlbnQucGFyZW50KSB7XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuICAgIG9uTW92ZVNsaWRlcihlKSB7XG4gICAgICAgIGNvbnN0IG1vdXNlUG9zID0gdGhpcy5saW1pdFNsaWRlckJ1dHRvblBvc2l0aW9uKGUpO1xuICAgICAgICB0aGlzLnVwZGF0ZVBhcnRzKG1vdXNlUG9zKTtcbiAgICAgICAgdGhpcy5fcmF0ZSA9IHRoaXMuY29udmVydFBpeGVsVG9SYXRlKG1vdXNlUG9zKTtcbiAgICAgICAgdGhpcy5fc2xpZGVyRXZlbnRFbWl0dGVyLmVtaXQoXCJzbGlkZXJfY2hhbmdlXCIsIG5ldyBTbGlkZXJFdmVudENvbnRleHQodGhpcy5yYXRlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOODnOOCv+ODs+OBruS9jee9ruOCkuWItumZkOOBmeOCi+mWouaVsFxuICAgICAqIEByZXR1cm4g5Yi26ZmQ44Gn5YiH44KK6JC944Go44GV44KM44Gf44K544Op44Kk44OA44O844Oc44K/44Oz44Gu5bqn5qiZ5YCkIOW6p+aomeOBruWOn+eCueOBr1NsaWRlclZpZXfjgafjgYLjgorjgIHjg5zjgr/jg7PjgoTjg5Djg7zjgafjga/jgarjgYTjgIJcbiAgICAgKi9cbiAgICBsaW1pdFNsaWRlckJ1dHRvblBvc2l0aW9uKGV2dCkge1xuICAgICAgICBjb25zdCBtb3VzZVBvcyA9IHRoaXMuZ2V0TW91c2VQb3NpdGlvbih0aGlzLCBldnQpO1xuICAgICAgICByZXR1cm4gU2xpZGVyVmlld1V0aWwuY2xhbXAobW91c2VQb3MsIHRoaXMuX21heFBvc2l0aW9uLCB0aGlzLl9taW5Qb3NpdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOWQhE1D44Gu5L2N572u44CB44K144Kk44K644KS44Oe44Km44K544Od44Kk44Oz44K/44Gu5L2N572u44Gr5ZCI44KP44Gb44Gm5pu05paw44GZ44KLXG4gICAgICogbW92ZVNsaWRlcuOBruWGhemDqOWHpueQhlxuICAgICAqIEBwYXJhbVx0bW91c2VQb3MgU2xpZGVyVmlld+OCkuWOn+eCueOBqOOBl+OBn+ODreODvOOCq+ODq+OBruODnuOCpuOCueW6p+aomeOAgWxpbWl0U2xpZGVyQnV0dG9uUG9zaXRpb27plqLmlbDjgaflj6/li5Xnr4Tlm7LjgavliLbpmZDmuIjjgb/jgIJcbiAgICAgKi9cbiAgICB1cGRhdGVQYXJ0cyhtb3VzZVBvcykge1xuICAgICAgICBjb25zdCBzdHJldGNoID0gKHRhcmdldCkgPT4ge1xuICAgICAgICAgICAgU2xpZGVyVmlld1V0aWwuc2V0U2l6ZSh0YXJnZXQsIHRoaXMuX2lzSG9yaXpvbnRhbCwgbW91c2VQb3MgLSBTbGlkZXJWaWV3VXRpbC5nZXRQb3NpdGlvbih0YXJnZXQsIHRoaXMuX2lzSG9yaXpvbnRhbCkpO1xuICAgICAgICB9O1xuICAgICAgICAvL+ODkOODvOODnuOCueOCr+OBjOOBquOBkeOCjOOBsOOAgeODkOODvOiHquS9k+OCkuS8uOe4ruOBmeOCi1xuICAgICAgICBpZiAodGhpcy5fYmFyICYmICF0aGlzLl9iYXJNYXNrKSB7XG4gICAgICAgICAgICBzdHJldGNoKHRoaXMuX2Jhcik7XG4gICAgICAgIH1cbiAgICAgICAgLy/jg5Djg7zjg57jgrnjgq/jgYzjgYLjgozjgbDjgIHjg57jgrnjgq/jgpLkvLjnuK7jgZnjgovjgIJcbiAgICAgICAgaWYgKHRoaXMuX2Jhck1hc2spIHtcbiAgICAgICAgICAgIHN0cmV0Y2godGhpcy5fYmFyTWFzayk7XG4gICAgICAgIH1cbiAgICAgICAgLy/jg5zjgr/jg7Pjga7kvY3nva7jgpLmm7TmlrDjgZnjgovjgIJcbiAgICAgICAgU2xpZGVyVmlld1V0aWwuc2V0UG9zaXRpb24odGhpcy5fc2xpZGVCdXR0b24sIHRoaXMuX2lzSG9yaXpvbnRhbCwgbW91c2VQb3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjga7lnLDjgpLjgq/jg6rjg4Pjgq/jgZfjgZ/pmpvjga7lh6bnkIZcbiAgICAgKiDjgZ3jga7kvY3nva7jgb7jgafjgrnjg6njgqTjg4Djg7zjgpLjgrjjg6Pjg7Pjg5fjgZnjgotcbiAgICAgKiBAcGFyYW0gZXZ0XG4gICAgICovXG4gICAgb25QcmVzc0Jhc2UoZXZ0KSB7XG4gICAgICAgIHRoaXMuZHJhZ1N0YXJ0UG9zID0gbmV3IFBvaW50KCk7XG4gICAgICAgIHRoaXMubW92ZVNsaWRlcihldnQpO1xuICAgICAgICB0aGlzLl9zbGlkZXJFdmVudEVtaXR0ZXIuZW1pdChcInNsaWRlcl9jaGFuZ2VfZmluaXNoZWRcIiwgbmV3IFNsaWRlckV2ZW50Q29udGV4dCh0aGlzLnJhdGUpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Gu5Ymy5ZCI44GL44KJ44CB44K544Op44Kk44OA44O844Gu5L2N572u44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtXHRyYXRlXG4gICAgICogQHJldHVyblxuICAgICAqL1xuICAgIGNvbnZlcnRSYXRlVG9QaXhlbChyYXRlKSB7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jb252ZXJ0UmF0ZVRvUGl4ZWwocmF0ZSwgdGhpcy5fbWF4UG9zaXRpb24sIHRoaXMuX21pblBvc2l0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Gu5bqn5qiZ44GL44KJ44CB44K544Op44Kk44OA44O844Gu5Ymy5ZCI44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtXHRwaXhlbFxuICAgICAqIEByZXR1cm5cbiAgICAgKi9cbiAgICBjb252ZXJ0UGl4ZWxUb1JhdGUocGl4ZWwpIHtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmNvbnZlcnRQaXhlbFRvUmF0ZShwaXhlbCwgdGhpcy5fbWF4UG9zaXRpb24sIHRoaXMuX21pblBvc2l0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44OJ44Op44OD44Kw5Lit44Gu44Oe44Km44K55bqn5qiZ44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICogbGltaXRTbGlkZXJCdXR0b25Qb3NpdGlvbuWGheOBruWHpueQhuOAglxuICAgICAqL1xuICAgIGdldE1vdXNlUG9zaXRpb24oZGlzcGxheU9iaiwgZXZ0KSB7XG4gICAgICAgIGxldCBsb2NhbFBvcztcbiAgICAgICAgaWYgKGV2dCBpbnN0YW5jZW9mIEZlZGVyYXRlZFBvaW50ZXJFdmVudCkge1xuICAgICAgICAgICAgbG9jYWxQb3MgPSBkaXNwbGF5T2JqLnRvTG9jYWwoZXZ0Lmdsb2JhbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2NhbFBvcyA9IGRpc3BsYXlPYmoudG9Mb2NhbChuZXcgUG9pbnQoZXZ0Lm9mZnNldFgsIGV2dC5vZmZzZXRZKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsUG9zLnggLSB0aGlzLmRyYWdTdGFydFBvcy54O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsUG9zLnkgLSB0aGlzLmRyYWdTdGFydFBvcy55O1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldCBiYXNlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2Jhc2UgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fYmFzZS5pbnRlcmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2Jhc2Uub24oXCJwb2ludGVydGFwXCIsIChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uUHJlc3NCYXNlKGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZFBhcnRzKHZhbHVlKTtcbiAgICB9XG4gICAgaW5pdEJhckFuZE1hc2sodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhbHVlLmludGVyYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHZhbHVlLmludGVyYWN0aXZlQ2hpbGRyZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZFBhcnRzKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzZXQgc2xpZGVCdXR0b24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24ub24oXCJwb2ludGVyZG93blwiLCB0aGlzLnN0YXJ0TW92ZSk7XG4gICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uLmludGVyYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24uaW50ZXJhY3RpdmVDaGlsZHJlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFkZENoaWxkUGFydHModmFsdWUpO1xuICAgIH1cbiAgICBnZXQgcmF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JhdGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOWFqOOBpuOBrkRpc3BsYXlPYmplY3TjgahFdmVudExpc3RlbmVy44KS6Kej6Zmk44GZ44KL44CCXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIG9uRGlzcG9zZUZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5fYmFzZS5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24ucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMucmVtb3ZlQ2hpbGRyZW4oKTtcbiAgICB9XG59XG5TbGlkZXJWaWV3Lk1BWF9SQVRFID0gMS4wO1xuZXhwb3J0IGNsYXNzIFNsaWRlclZpZXdVdGlsIHtcbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjga7luqfmqJnjgYvjgonjgIHjgrnjg6njgqTjg4Djg7zjga7libLlkIjjgpLlj5blvpfjgZnjgotcbiAgICAgKi9cbiAgICBzdGF0aWMgY29udmVydFBpeGVsVG9SYXRlKHBpeGVsLCBtYXgsIG1pbikge1xuICAgICAgICBpZiAobWF4IDw9IG1pbikge1xuICAgICAgICAgICAgcmV0dXJuIDAuMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByYXRlID0gKChwaXhlbCAtIG1pbikgLyAobWF4IC0gbWluKSkgKiBTbGlkZXJWaWV3Lk1BWF9SQVRFO1xuICAgICAgICByZXR1cm4gU2xpZGVyVmlld1V0aWwuY2xhbXAocmF0ZSwgU2xpZGVyVmlldy5NQVhfUkFURSwgMC4wKTtcbiAgICB9XG4gICAgc3RhdGljIGNvbnZlcnRSYXRlVG9QaXhlbChyYXRlLCBtYXgsIG1pbikge1xuICAgICAgICBjb25zdCBwaXggPSAoKG1heCAtIG1pbikgKiByYXRlKSAvIFNsaWRlclZpZXcuTUFYX1JBVEUgKyBtaW47XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jbGFtcChwaXgsIG1heCwgbWluKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44OH44Kj44K544OX44Os44Kk44Kq44OW44K444Kn44Kv44OI44GL44KJ44K544Kv44Ot44O844Or5pa55ZCR44Gu5bqn5qiZ5YCk44KS5Y+W44KK5Ye644GZXG4gICAgICogQHJldHVybiBkaXNwbGF5T2Jq44Gu5bqn5qiZ5YCk44CC5Y2Y5L2N44OU44Kv44K744OrXG4gICAgICovXG4gICAgc3RhdGljIGdldFBvc2l0aW9uKGRpc3BsYXlPYmosIGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlzcGxheU9iai54O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaXNwbGF5T2JqLnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODh+OCo+OCueODl+ODrOOCpOOCquODluOCuOOCp+OCr+ODiOOBq+OCueOCr+ODreODvOODq+aWueWQkeOBruW6p+aomeWApOOCkuioreWumuOBmeOCi1xuICAgICAqL1xuICAgIHN0YXRpYyBzZXRQb3NpdGlvbihkaXNwbGF5T2JqLCBpc0hvcml6b250YWwsIHBvc2l0aW9uKSB7XG4gICAgICAgIGlmICghZGlzcGxheU9iailcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgZGlzcGxheU9iai54ID0gcG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkaXNwbGF5T2JqLnkgPSBwb3NpdGlvbjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjgq/jg63jg7zjg6vmlrnlkJHjga7pq5jjgZXjgIHjgoLjgZfjgY/jga/luYXjgpLlj5blvpfjgZnjgovjgILljZjkvY3jg5Tjgq/jgrvjg6tcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0U2l6ZShkaXNwbGF5T2JqLCBpc0hvcml6b250YWwpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IFNsaWRlclZpZXdVdGlsLmdldENvbnRlbnRzQm91bmRzKGRpc3BsYXlPYmopO1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICByZXR1cm4gc2l6ZS53aWR0aCAqIGRpc3BsYXlPYmouc2NhbGUueDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzaXplLmhlaWdodCAqIGRpc3BsYXlPYmouc2NhbGUueTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjgq/jg63jg7zjg6vmlrnlkJHjga7pq5jjgZXjgIHjgoLjgZfjgY/jga/luYXjgpLoqK3lrprjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gZGlzcGxheU9ialxuICAgICAqIEBwYXJhbSBpc0hvcml6b250YWxcbiAgICAgKiBAcGFyYW0gYW1vdW50IHdpZHRoIG9yIGhlaWdodCwgcmFuZ2UgOiAwIH4gZGlzcGxheU9iai5zaXplLndpZHRoIG9yIGhlaWdodCwgdW5pdCA6IHB4XG4gICAgICovXG4gICAgc3RhdGljIHNldFNpemUoZGlzcGxheU9iaiwgaXNIb3Jpem9udGFsLCBhbW91bnQpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IFNsaWRlclZpZXdVdGlsLmdldENvbnRlbnRzQm91bmRzKGRpc3BsYXlPYmopO1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICBkaXNwbGF5T2JqLnNjYWxlLnggPSBhbW91bnQgLyBzaXplLndpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGlzcGxheU9iai5zY2FsZS55ID0gYW1vdW50IC8gc2l6ZS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGNsYW1wKG51bSwgbWF4LCBtaW4pIHtcbiAgICAgICAgbnVtID0gTWF0aC5tYXgobnVtLCBtaW4pO1xuICAgICAgICBudW0gPSBNYXRoLm1pbihudW0sIG1heCk7XG4gICAgICAgIHJldHVybiBudW07XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDb250ZW50c0JvdW5kcyhkaXNwbGF5T2JqKSB7XG4gICAgICAgIGlmIChkaXNwbGF5T2JqLmhpdEFyZWEpXG4gICAgICAgICAgICByZXR1cm4gZGlzcGxheU9iai5oaXRBcmVhO1xuICAgICAgICByZXR1cm4gZGlzcGxheU9iai5nZXRMb2NhbEJvdW5kcygpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNsaWRlclZpZXdVdGlsIH0gZnJvbSBcIi4uL1NsaWRlclZpZXdcIjtcbmV4cG9ydCBjbGFzcyBTY3JvbGxCYXJWaWV3VXRpbCB7XG4gICAgLyoqXG4gICAgICog44K/44O844Ky44OD44OI44Kz44Oz44OG44Oz44OE44GM44CB44Oe44K544Kv6aCY5Z+f5YaF44Gr5Y+O44G+44KL5bqn5qiZ5YCk44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICogQHBhcmFtIHRhcmdldFxuICAgICAqIEBwYXJhbSBtYXNrXG4gICAgICogQHBhcmFtIGlzSG9yaXpvbnRhbFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRDbGFtcGVkVGFyZ2V0UG9zaXRpb24odGFyZ2V0LCBtYXNrLCBpc0hvcml6b250YWwpIHtcbiAgICAgICAgY29uc3QgZ2V0U2l6ZSA9IFNsaWRlclZpZXdVdGlsLmdldFNpemU7XG4gICAgICAgIGNvbnN0IHRhcmdldFNpemUgPSBnZXRTaXplKHRhcmdldCwgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgbWFza1NpemUgPSBnZXRTaXplKG1hc2ssIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IG1pblBvcyA9IE1hdGgubWluKC10YXJnZXRTaXplICsgbWFza1NpemUsIDAuMCk7XG4gICAgICAgIGNvbnN0IHBvcyA9IFNsaWRlclZpZXdVdGlsLmdldFBvc2l0aW9uKHRhcmdldCwgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmNsYW1wKHBvcywgMCwgbWluUG9zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K/44O844Ky44OD44OI44Kz44Oz44OG44Oz44OE44Gu5L2N572u44KS44CB44Oe44K544Kv6aCY5Z+f5YaF44Gr5Li444KB6L6844KA44CCXG4gICAgICogQHBhcmFtIHRhcmdldFxuICAgICAqIEBwYXJhbSBtYXNrXG4gICAgICogQHBhcmFtIHBvc2l0aW9uXG4gICAgICogQHBhcmFtIGlzSG9yaXpvbnRhbFxuICAgICAqL1xuICAgIHN0YXRpYyBjbGFtcFRhcmdldFBvc2l0aW9uKHRhcmdldCwgbWFzaywgcG9zaXRpb24sIGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBTbGlkZXJWaWV3VXRpbC5zZXRQb3NpdGlvbih0YXJnZXQsIGlzSG9yaXpvbnRhbCwgcG9zaXRpb24pO1xuICAgICAgICBjb25zdCBjbGFtcGVkUG9zID0gdGhpcy5nZXRDbGFtcGVkVGFyZ2V0UG9zaXRpb24odGFyZ2V0LCBtYXNrLCBpc0hvcml6b250YWwpO1xuICAgICAgICBTbGlkZXJWaWV3VXRpbC5zZXRQb3NpdGlvbih0YXJnZXQsIGlzSG9yaXpvbnRhbCwgY2xhbXBlZFBvcyk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRSYXRpb09mT3JpZ2luKGRpc3BsYXlPYmosIGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBjb25zdCBib3VuZHMgPSBTbGlkZXJWaWV3VXRpbC5nZXRDb250ZW50c0JvdW5kcyhkaXNwbGF5T2JqKTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGlzSG9yaXpvbnRhbCA/IGJvdW5kcy53aWR0aCA6IGJvdW5kcy5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gaXNIb3Jpem9udGFsID8gYm91bmRzLnggOiBib3VuZHMueTtcbiAgICAgICAgY29uc3QgcmF0aW8gPSBwb3NpdGlvbiAvIHNpemU7XG4gICAgICAgIGlmIChyYXRpbyA+IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHtkaXNwbGF5T2JqLm5hbWV9IDog44Oc44K/44Oz44K144Kk44K644GM5LiN6YGp5YiH44Gn44GZ44CC44Oc44K/44Oz44Gu55+p5b2i5YaF44Gr5Y6f54K544GM5Y+O44G+44Gj44Gm44GE44G+44Gb44KT44CC44K544Kv44Ot44O844Or44OQ44O844Oc44K/44Oz44Gv5Y6f54K544KS5Zuy44KA55+p5b2i44Go44GX44Gm44GP44Gg44GV44GE44CCYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhdGlvO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEVhc2luZywgVHdlZW4gfSBmcm9tIFwiQHR3ZWVuanMvdHdlZW4uanNcIjtcbmltcG9ydCB7IFRpY2tlciwgdXRpbHMsIH0gZnJvbSBcInBpeGkuanNcIjtcbmltcG9ydCB7IFNsaWRlclZpZXdVdGlsIH0gZnJvbSBcIi4uL1NsaWRlclZpZXdcIjtcbmltcG9ydCB7IFNjcm9sbEJhclZpZXdVdGlsIH0gZnJvbSBcIi4vU2Nyb2xsQmFyVmlld1V0aWxcIjtcbi8qKlxuICog44K544Kv44Ot44O844Or44OQ44O844Ko44Oq44Ki44Gu5oWj5oCn44K544Kv44Ot44O844Or44KS5Yem55CG44GZ44KL44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBJbmVydGlhbFNjcm9sbE1hbmFnZXIgZXh0ZW5kcyB1dGlscy5FdmVudEVtaXR0ZXIge1xuICAgIGdldCBzcGVlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NwZWVkO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzY3JvbGxCYXJWaWV3KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZGVjZWxlcmF0aW9uUmF0ZSA9IDAuOTc1O1xuICAgICAgICB0aGlzLm92ZXJmbG93U2Nyb2xsUmFuZ2UgPSAxODA7XG4gICAgICAgIHRoaXMuX3NwZWVkID0gMC4wO1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbk1vdXNlRG93biA9IChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURyYWdQb3MoZSk7XG4gICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fc3BlZWQgPSAwLjA7XG4gICAgICAgICAgICBpZiAodGhpcy50d2VlbilcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2VUd2VlbigpO1xuICAgICAgICAgICAgdGhpcy5hZGREcmFnTGlzdGVuZXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbk1vdXNlTW92ZSA9IChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IHRoaXMuZ2V0RHJhZ1BvcyhlKSAtIHRoaXMuZHJhZ1BvcztcbiAgICAgICAgICAgIHRoaXMuX3NwZWVkID0gZGVsdGE7XG4gICAgICAgICAgICB0aGlzLmFkZFRhcmdldFBvc2l0aW9uKGRlbHRhICogdGhpcy5nZXRPdmVyZmxvd0RlY2VsZXJhdGlvbigpKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRHJhZ1BvcyhlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbk1vdXNlVXAgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVEcmFnTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5vblRpY2soKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vblRpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zcGVlZCA9PT0gMC4wICYmIHRoaXMuZ2V0TGVhdmVSYW5nZUZyb21NYXNrKCkgPT09IDAuMClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAoKF9hID0gdGhpcy50d2VlbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlzUGxheWluZygpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8v5L2N572u44Gr44KI44KL5rib6YCf546H5aKX5Yqg44CC44Oe44K544Kv44Ko44Oq44Ki44GL44KJ6Zui44KM44Gm44GE44KL44Gq44KJ5rib6YCf546H44GM5aSn44GN44GP44Gq44KL44CCXG4gICAgICAgICAgICBjb25zdCBvdmVyZmxvd0RlY2VsZXJhdGlvbiA9IHRoaXMuZ2V0T3ZlcmZsb3dEZWNlbGVyYXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMuX3NwZWVkICo9IHRoaXMuZGVjZWxlcmF0aW9uUmF0ZSAqIG92ZXJmbG93RGVjZWxlcmF0aW9uO1xuICAgICAgICAgICAgdGhpcy5hZGRUYXJnZXRQb3NpdGlvbih0aGlzLl9zcGVlZCk7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnModGhpcy5fc3BlZWQpID4gMC4xKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vYmFjayBlYXNlXG4gICAgICAgICAgICB0aGlzLl9zcGVlZCA9IDAuMDtcbiAgICAgICAgICAgIGNvbnN0IHRvT2JqID0geyB5OiB0aGlzLmdldENsYW1wZWRQb3MoKSB9O1xuICAgICAgICAgICAgdGhpcy5kaXNwb3NlVHdlZW4oKTtcbiAgICAgICAgICAgIHRoaXMudHdlZW4gPSBuZXcgVHdlZW4odGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldClcbiAgICAgICAgICAgICAgICAudG8odG9PYmosIDY2NilcbiAgICAgICAgICAgICAgICAub25VcGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInVwZGF0ZV90YXJnZXRfcG9zaXRpb25cIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5lYXNpbmcoRWFzaW5nLkN1YmljLk91dClcbiAgICAgICAgICAgICAgICAuc3RhcnQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdG9wSW5lcnRpYWwgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zcGVlZCA9IDAuMDtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZVR3ZWVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGlzcG9zZVR3ZWVuID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMudHdlZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnR3ZWVuLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnR3ZWVuID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zY3JvbGxCYXJWaWV3ID0gc2Nyb2xsQmFyVmlldztcbiAgICAgICAgc2Nyb2xsQmFyVmlldy5zY3JvbGxCYXJFdmVudEVtaXR0ZXIub24oXCJzdG9wX2luZXJ0aWFsX3R3ZWVuXCIsIHRoaXMuc3RvcEluZXJ0aWFsKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgdGFyZ2V0LmludGVyYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzU3RhcnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX2lzU3RhcnQgPSB0cnVlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnNjcm9sbEJhclZpZXcuY29udGVudHMudGFyZ2V0O1xuICAgICAgICB0YXJnZXQub24oXCJwb2ludGVyZG93blwiLCB0aGlzLm9uTW91c2VEb3duKTtcbiAgICAgICAgVGlja2VyLnNoYXJlZC5hZGQodGhpcy5vblRpY2spO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzU3RhcnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX2lzU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgdGFyZ2V0Lm9mZihcInBvaW50ZXJkb3duXCIsIHRoaXMub25Nb3VzZURvd24pO1xuICAgICAgICB0aGlzLnJlbW92ZURyYWdMaXN0ZW5lcigpO1xuICAgICAgICB0aGlzLnN0b3BJbmVydGlhbCgpO1xuICAgICAgICBUaWNrZXIuc2hhcmVkLnJlbW92ZSh0aGlzLm9uVGljayk7XG4gICAgfVxuICAgIGFkZERyYWdMaXN0ZW5lcigpIHtcbiAgICAgICAgdGhpcy5zd2l0Y2hEcmFnTGlzdGVuZXIodHJ1ZSk7XG4gICAgfVxuICAgIHJlbW92ZURyYWdMaXN0ZW5lcigpIHtcbiAgICAgICAgdGhpcy5zd2l0Y2hEcmFnTGlzdGVuZXIoZmFsc2UpO1xuICAgIH1cbiAgICBzd2l0Y2hEcmFnTGlzdGVuZXIoaXNPbikge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnNjcm9sbEJhclZpZXcuY29udGVudHMudGFyZ2V0O1xuICAgICAgICBjb25zdCBzd2l0Y2hMaXN0ZW5lciA9IChpc09uLCBldmVudCwgbGlzdGVuZXIpID0+IHtcbiAgICAgICAgICAgIGlmIChpc09uKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Lm9uKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQub2ZmKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHN3aXRjaExpc3RlbmVyKGlzT24sIFwicG9pbnRlcm1vdmVcIiwgdGhpcy5vbk1vdXNlTW92ZSk7XG4gICAgICAgIHN3aXRjaExpc3RlbmVyKGlzT24sIFwicG9pbnRlcnVwXCIsIHRoaXMub25Nb3VzZVVwKTtcbiAgICAgICAgc3dpdGNoTGlzdGVuZXIoaXNPbiwgXCJwb2ludGVydXBvdXRzaWRlXCIsIHRoaXMub25Nb3VzZVVwKTtcbiAgICB9XG4gICAgZ2V0RHJhZ1BvcyhlKSB7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5nZXRQb3NpdGlvbihlLmdsb2JhbCwgdGhpcy5zY3JvbGxCYXJWaWV3LmlzSG9yaXpvbnRhbCk7XG4gICAgfVxuICAgIHVwZGF0ZURyYWdQb3MoZSkge1xuICAgICAgICB0aGlzLmRyYWdQb3MgPSB0aGlzLmdldERyYWdQb3MoZSk7XG4gICAgfVxuICAgIGFkZFRhcmdldFBvc2l0aW9uKGRlbHRhKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQ7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5pc0hvcml6b250YWw7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQb3MgPSBTbGlkZXJWaWV3VXRpbC5nZXRQb3NpdGlvbih0YXJnZXQsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIFNsaWRlclZpZXdVdGlsLnNldFBvc2l0aW9uKHRhcmdldCwgaXNIb3Jpem9udGFsLCBjdXJyZW50UG9zICsgZGVsdGEpO1xuICAgICAgICB0aGlzLmVtaXQoXCJ1cGRhdGVfdGFyZ2V0X3Bvc2l0aW9uXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjgq/jg63jg7zjg6vjga7jgqrjg7zjg5Djg7zjg5Xjg63jg7zph4/jgYvjgonjgIHmuJvpgIDnjofjgpLlibLjgorlh7rjgZnjgIJcbiAgICAgKiBvdmVyZmxvd1Njcm9sbFJhbmdl5Lul5LiK44Gr6Zui44KM44Gm44GE44KL5aC05ZCI44GvMC4wXG4gICAgICog44K544Kv44Ot44O844Or44Ko44Oq44Ki5YaF44Gr44Kz44Oz44OG44Oz44OE44GM44GC44KL5aC05ZCI44GvMS4w44KS6L+U44GZ44CCXG4gICAgICovXG4gICAgZ2V0T3ZlcmZsb3dEZWNlbGVyYXRpb24oKSB7XG4gICAgICAgIGNvbnN0IGRpZlBvcyA9IHRoaXMuZ2V0TGVhdmVSYW5nZUZyb21NYXNrKCk7XG4gICAgICAgIGxldCBvdmVyZmxvd0RlY2VsZXJhdGlvbiA9ICh0aGlzLm92ZXJmbG93U2Nyb2xsUmFuZ2UgLSBkaWZQb3MpIC8gdGhpcy5vdmVyZmxvd1Njcm9sbFJhbmdlO1xuICAgICAgICBpZiAob3ZlcmZsb3dEZWNlbGVyYXRpb24gPCAwLjApXG4gICAgICAgICAgICBvdmVyZmxvd0RlY2VsZXJhdGlvbiA9IDAuMDtcbiAgICAgICAgcmV0dXJuIG92ZXJmbG93RGVjZWxlcmF0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgr/jg7zjgrLjg4Pjg4jjgrPjg7Pjg4bjg7Pjg4TjgYzjg57jgrnjgq/poJjln5/jgYvjgonjganjgozjgaDjgZHpm6LjgozjgabjgYTjgovjgYvjgIJcbiAgICAgKi9cbiAgICBnZXRMZWF2ZVJhbmdlRnJvbU1hc2soKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQ7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5pc0hvcml6b250YWw7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQb3MgPSBTbGlkZXJWaWV3VXRpbC5nZXRQb3NpdGlvbih0YXJnZXQsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IGNsYW1wZWRQb3MgPSB0aGlzLmdldENsYW1wZWRQb3MoKTtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGN1cnJlbnRQb3MgLSBjbGFtcGVkUG9zKTtcbiAgICB9XG4gICAgZ2V0Q2xhbXBlZFBvcygpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5zY3JvbGxCYXJWaWV3LmlzSG9yaXpvbnRhbDtcbiAgICAgICAgcmV0dXJuIFNjcm9sbEJhclZpZXdVdGlsLmdldENsYW1wZWRUYXJnZXRQb3NpdGlvbih0YXJnZXQsIHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy5tYXNrLCBpc0hvcml6b250YWwpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHV0aWxzIH0gZnJvbSBcInBpeGkuanNcIjtcbmltcG9ydCB7IFNsaWRlclZpZXdVdGlsIH0gZnJvbSBcIi4uL1NsaWRlclZpZXdcIjtcbmltcG9ydCB7IFNjcm9sbEJhclZpZXdVdGlsIH0gZnJvbSBcIi4vU2Nyb2xsQmFyVmlld1V0aWxcIjtcbi8qKlxuICogU2Nyb2xsQmFyVmlld+OCkuWPl+OBkeWPluOCiuOAgeODnuOCpuOCueODm+OCpOODvOODq+OBq+OCiOOCi+aTjeS9nOOCkuihjOOBhuOCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgTW91c2VXaGVlbFNjcm9sbE1hbmFnZXIgZXh0ZW5kcyB1dGlscy5FdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHNjcm9sbEJhclZpZXcpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5kZWx0YSA9IDE2O1xuICAgICAgICAvL1RPRE8gYWRkIHN1cHBvcnQgZGVsdGFYIC8gZGVsdGFZXG4gICAgICAgIHRoaXMud2hlZWxIYW5kbGVyID0gKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNoaWZ0ID0gZS5kZWx0YVkgPiAwID8gLXRoaXMuZGVsdGEgOiB0aGlzLmRlbHRhO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGwoc2hpZnQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNjcm9sbEJhclZpZXcgPSBzY3JvbGxCYXJWaWV3O1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnNjcm9sbEJhclZpZXcuY29udGVudHMudGFyZ2V0O1xuICAgICAgICB0YXJnZXQuaW50ZXJhY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICBpZiAodGhpcy5faXNTdGFydClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgdGFyZ2V0Lm9uKFwid2hlZWxcIiwgdGhpcy53aGVlbEhhbmRsZXIpO1xuICAgICAgICB0aGlzLl9pc1N0YXJ0ID0gdHJ1ZTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgdGFyZ2V0Lm9mZihcIndoZWVsXCIsIHRoaXMud2hlZWxIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5faXNTdGFydCA9IGZhbHNlO1xuICAgIH1cbiAgICBzY3JvbGwoZGVsdGEpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgY29uc3QgbWFzayA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy5tYXNrO1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLnNjcm9sbEJhclZpZXcuaXNIb3Jpem9udGFsO1xuICAgICAgICBjb25zdCBwb3MgPSBTbGlkZXJWaWV3VXRpbC5nZXRQb3NpdGlvbih0YXJnZXQsIGlzSG9yaXpvbnRhbCkgKyBkZWx0YTtcbiAgICAgICAgU2Nyb2xsQmFyVmlld1V0aWwuY2xhbXBUYXJnZXRQb3NpdGlvbih0YXJnZXQsIG1hc2ssIHBvcywgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgdGhpcy5lbWl0KFwidXBkYXRlX3RhcmdldF9wb3NpdGlvblwiKTtcbiAgICAgICAgdGhpcy5zY3JvbGxCYXJWaWV3LnNjcm9sbEJhckV2ZW50RW1pdHRlci5lbWl0KFwic3RvcF9pbmVydGlhbF90d2VlblwiKTtcbiAgICB9XG59XG4iLCJleHBvcnQgdmFyIFNjcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlO1xuKGZ1bmN0aW9uIChTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZSkge1xuICAgIFNjcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlW1wiQ0hBTkdFRF9DT05URU5UU19TSVpFXCJdID0gXCJTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZV9DSEFOR0VEX0NPTlRFTlRTX1NJWkVcIjtcbn0pKFNjcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlIHx8IChTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZSA9IHt9KSk7XG4iLCJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiQHBpeGkvdXRpbHNcIjtcbmltcG9ydCB7IFNsaWRlclZpZXcsIFNsaWRlclZpZXdVdGlsIH0gZnJvbSBcIi4uL1NsaWRlclZpZXdcIjtcbmltcG9ydCB7IFNjcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlIH0gZnJvbSBcIi4vU2Nyb2xsQmFyQ29udGVudHNFdmVudFR5cGVcIjtcbi8qKlxuICog44K544Kv44Ot44O844Or44OQ44O844Gn5pON5L2c44GZ44KL44Kz44Oz44OG44Oz44OEXG4gKi9cbmV4cG9ydCBjbGFzcyBTY3JvbGxCYXJDb250ZW50cyBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgZ2V0IHRhcmdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldDtcbiAgICB9XG4gICAgc2V0IHRhcmdldCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl90YXJnZXQgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lbWl0KFNjcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlLkNIQU5HRURfQ09OVEVOVFNfU0laRSk7XG4gICAgfVxuICAgIGdldCBtYXNrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFzaztcbiAgICB9XG4gICAgc2V0IG1hc2sodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbWFzayA9IHZhbHVlO1xuICAgICAgICB0aGlzLmVtaXQoU2Nyb2xsQmFyQ29udGVudHNFdmVudFR5cGUuQ0hBTkdFRF9DT05URU5UU19TSVpFKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IOOCueOCr+ODreODvOODq+aTjeS9nOOCkuWPl+OBkeOCi+OCs+ODs+ODhuODs+ODhFxuICAgICAqIEBwYXJhbSBtYXNrIHRhcmdldOOCkuWIh+OCiuaKnOOBj+ODnuOCueOCr1xuICAgICAqIEBwYXJhbSBjb250YWluZXIgdGFyZ2V044GK44KI44GzbWFza+OCkuagvOe0jeOBmeOCi+imquOCs+ODs+ODhuODilxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgbWFzaywgY29udGFpbmVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMuX21hc2sgPSBtYXNrO1xuICAgICAgICBTY3JvbGxCYXJDb250ZW50cy5pbml0KHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgaW5pdChzY3JvbGxCYXJDb250ZW50cykge1xuICAgICAgICBpZiAoc2Nyb2xsQmFyQ29udGVudHMuX3RhcmdldC5tYXNrICE9PSBzY3JvbGxCYXJDb250ZW50cy5fbWFzaykge1xuICAgICAgICAgICAgc2Nyb2xsQmFyQ29udGVudHMuX3RhcmdldC5tYXNrID0gc2Nyb2xsQmFyQ29udGVudHMuX21hc2s7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWRkVG9Db250YWluZXIgPSAoZGlzcGxheU9iamVjdCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKGRpc3BsYXlPYmplY3QucGFyZW50ID09PSBzY3JvbGxCYXJDb250ZW50cy5jb250YWluZXIpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgKF9hID0gZGlzcGxheU9iamVjdC5wYXJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdmVDaGlsZChkaXNwbGF5T2JqZWN0KTtcbiAgICAgICAgICAgIHNjcm9sbEJhckNvbnRlbnRzLmNvbnRhaW5lci5hZGRDaGlsZChkaXNwbGF5T2JqZWN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgYWRkVG9Db250YWluZXIoc2Nyb2xsQmFyQ29udGVudHMuX3RhcmdldCk7XG4gICAgICAgIGFkZFRvQ29udGFpbmVyKHNjcm9sbEJhckNvbnRlbnRzLl9tYXNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog54++54q244Gu44K544Kv44Ot44O844Or5L2N572u44KS5Y+W5b6X44GZ44KL44CC5Y2Y5L2NcmF0ZVxuICAgICAqIDAuMOOBp+OCs+ODs+ODhuODs+ODhOOBr1RPUCwgMS4w44GnQk9UVE9N44Gr5L2N572u44GX44Gm44GE44KL44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaXNIb3Jpem9udGFsXG4gICAgICovXG4gICAgZ2V0U2Nyb2xsUG9zaXRpb25Bc1JhdGUoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGNvbnN0IGdldFBvcyA9IFNsaWRlclZpZXdVdGlsLmdldFBvc2l0aW9uO1xuICAgICAgICBjb25zdCB6ZXJvUG9zID0gZ2V0UG9zKHRoaXMubWFzaywgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgY29udGVudHNQb3MgPSBnZXRQb3ModGhpcy50YXJnZXQsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRzUG9zaXRpb25EaWYgPSB6ZXJvUG9zIC0gY29udGVudHNQb3M7XG4gICAgICAgIGNvbnN0IG1vdmFibGVSYW5nZSA9IHRoaXMuZ2V0TW92YWJsZVJhbmdlKGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIHJldHVybiAoY29udGVudHNQb3NpdGlvbkRpZiAvIG1vdmFibGVSYW5nZSkgKiBTbGlkZXJWaWV3Lk1BWF9SQVRFO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjgq/jg63jg7zjg6vjga7mnIDlpKflj6/li5XpoJjln5/jgpLlj5blvpfjgZnjgovjgILljZjkvY1weFxuICAgICAqIOOCguOBl+WPr+WLleWfn+OBjOOCvOODrXB45Lul5LiL44Gu5aC05ZCI44CB5qW15bCP44Gu5q2j44Gu5YCk44KS6L+U44GZ44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaXNIb3Jpem9udGFsXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXRNb3ZhYmxlUmFuZ2UoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGNvbnN0IGdldFNpemUgPSBTbGlkZXJWaWV3VXRpbC5nZXRTaXplO1xuICAgICAgICBjb25zdCB0YXJnZXRTaXplID0gZ2V0U2l6ZSh0aGlzLl90YXJnZXQsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IG1hc2tTaXplID0gZ2V0U2l6ZSh0aGlzLl9tYXNrLCBpc0hvcml6b250YWwpO1xuICAgICAgICBjb25zdCBkaWYgPSB0YXJnZXRTaXplIC0gbWFza1NpemU7XG4gICAgICAgIGlmIChkaWYgPD0gMC4wKSB7XG4gICAgICAgICAgICByZXR1cm4gMWUtMTI4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWY7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCs+ODs+ODhuODs+ODhOOCkuOAgeaMh+WumuOBleOCjOOBn3JhdGXjga7kvY3nva7jgb7jgafjgrnjgq/jg63jg7zjg6vjgZnjgotcbiAgICAgKlxuICAgICAqIEBwYXJhbSByYXRlXG4gICAgICogQHBhcmFtIGlzSG9yaXpvbnRhbFxuICAgICAqL1xuICAgIHNjcm9sbChyYXRlLCBpc0hvcml6b250YWwpIHtcbiAgICAgICAgY29uc3QgZ2V0UG9zID0gU2xpZGVyVmlld1V0aWwuZ2V0UG9zaXRpb247XG4gICAgICAgIGNvbnN0IHplcm9Qb3MgPSBnZXRQb3ModGhpcy5fbWFzaywgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgbW92YWJsZVJhbmdlID0gdGhpcy5nZXRNb3ZhYmxlUmFuZ2UoaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgY29udGVudHNQb3MgPSB6ZXJvUG9zIC0gbW92YWJsZVJhbmdlICogKHJhdGUgLyBTbGlkZXJWaWV3Lk1BWF9SQVRFKTtcbiAgICAgICAgU2xpZGVyVmlld1V0aWwuc2V0UG9zaXRpb24odGhpcy5fdGFyZ2V0LCBpc0hvcml6b250YWwsIGNvbnRlbnRzUG9zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Kz44Oz44OG44Oz44OE44GM6KGo56S66aCY5Z+f44Gr44Gp44KM44Gg44GR6KGo56S644GV44KM44Gm44GE44KL44GL44Gu5q+U546H44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICog44GT44Gu5q+U546H44Gv44CB44K544Kv44Ot44O844Or44OQ44O844Oc44K/44Oz44Gu44K544Kx44O844Or44Go44Gq44KL44CCXG4gICAgICpcbiAgICAgKiDkvosgOiDjgrPjg7Pjg4bjg7Pjg4TjgrXjgqTjgrrjgYwyMDDjgIHooajnpLrpoJjln5/jgYwxMDDjgarjgokwLjVcbiAgICAgKiDjgrPjg7Pjg4bjg7Pjg4TjgYzjgZnjgbnjgabooajnpLrjgZXjgozjgabjgYTjgovjgarjgokxLjBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpc0hvcml6b250YWxcbiAgICAgKiBAcmV0dXJuIDAuMCB+IDEuMFxuICAgICAqL1xuICAgIGdldERpc3BsYXlSYXRlKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBjb25zdCBnZXRTaXplID0gU2xpZGVyVmlld1V0aWwuZ2V0U2l6ZTtcbiAgICAgICAgY29uc3QgY29udGVudHNTaXplID0gZ2V0U2l6ZSh0aGlzLnRhcmdldCwgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgbWFza1NpemUgPSBnZXRTaXplKHRoaXMubWFzaywgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmNsYW1wKG1hc2tTaXplIC8gY29udGVudHNTaXplLCBTbGlkZXJWaWV3Lk1BWF9SQVRFLCAwLjApO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG51bGw7XG4gICAgICAgIHRoaXMuX21hc2sgPSBudWxsO1xuICAgICAgICB0aGlzLl90YXJnZXQgPSBudWxsO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHV0aWxzIH0gZnJvbSBcInBpeGkuanNcIjtcbmV4cG9ydCBjbGFzcyBTY3JvbGxCYXJFdmVudEVtaXR0ZXIgZXh0ZW5kcyB1dGlscy5FdmVudEVtaXR0ZXIge1xufVxuIiwiaW1wb3J0IHsgU2xpZGVyVmlldywgU2xpZGVyVmlld1V0aWwgfSBmcm9tIFwiLi4vU2xpZGVyVmlld1wiO1xuaW1wb3J0IHsgSW5lcnRpYWxTY3JvbGxNYW5hZ2VyIH0gZnJvbSBcIi4vSW5lcnRpYWxTY3JvbGxNYW5hZ2VyXCI7XG5pbXBvcnQgeyBNb3VzZVdoZWVsU2Nyb2xsTWFuYWdlciB9IGZyb20gXCIuL01vdXNlV2hlZWxTY3JvbGxNYW5hZ2VyXCI7XG5pbXBvcnQgeyBTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZSB9IGZyb20gXCIuL1Njcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlXCI7XG5pbXBvcnQgeyBTY3JvbGxCYXJFdmVudEVtaXR0ZXIgfSBmcm9tIFwiLi9TY3JvbGxCYXJFdmVudFwiO1xuaW1wb3J0IHsgU2Nyb2xsQmFyVmlld1V0aWwgfSBmcm9tIFwiLi9TY3JvbGxCYXJWaWV3VXRpbFwiO1xuLyoqXG4gKiDjgrnjgq/jg63jg7zjg6vjg5Djg7zjgpLooajjgZnjgq/jg6njgrnjgafjgZnjgIJcbiAqXG4gKiDjgZPjga7jgq/jg6njgrnjga/jgIHjgrnjg6njgqTjg4Djg7zjgavku6XkuIvjga7mqZ/og73jgpLov73liqDjgZfjgZ/jgoLjga7jgafjgZnjgIJcbiAqXG4gKiBcdFx0MS7jgrPjg7Pjg4bjg7Pjg4TjgrXjgqTjgrrjgavlkIjjgo/jgZvjgZ/jgIHjgrnjgq/jg63jg7zjg6vjg5Djg7zjga7kvLjnuK5cbiAqIFx0XHQyLuOCueOCr+ODreODvOODq+ODkOODvOOBruS8uOe4ruOBq+OBguOCj+OBm+OBn+OAgeenu+WLleevhOWbsuOBruWItumZkFxuICogXHRcdDMu44K544Kv44Ot44O844Or44OQ44O844Gu5Ly457iu44Gr44GC44KP44Gb44Gf44CB56e75YuV5YCk44Gu5Y+W5b6XXG4gKi9cbmV4cG9ydCBjbGFzcyBTY3JvbGxCYXJWaWV3IGV4dGVuZHMgU2xpZGVyVmlldyB7XG4gICAgZ2V0IGNvbnRlbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudHM7XG4gICAgfVxuICAgIGdldCBhdXRvSGlkZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9IaWRlO1xuICAgIH1cbiAgICBzZXQgYXV0b0hpZGUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYXV0b0hpZGUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJWaXNpYmxlKCk7XG4gICAgfVxuICAgIGdldCBzY3JvbGxCYXJFdmVudEVtaXR0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxCYXJFdmVudEVtaXR0ZXI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbiwgc2Nyb2xsQ29udGVudHMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9uKTtcbiAgICAgICAgdGhpcy5fYXV0b0hpZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc2Nyb2xsQmFyRXZlbnRFbWl0dGVyID0gbmV3IFNjcm9sbEJhckV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICog44K544Op44Kk44OA44O844Kk44OZ44Oz44OI44Gr5b+c44GY44Gm44Kz44Oz44OG44Oz44OE44KS44K544Kv44Ot44O844Or44GZ44KLXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnRzUG9zaXRpb24gPSAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXZ0ID0gZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29udGVudHNQb3NpdGlvbldpdGhSYXRlKGV2dC5yYXRlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fY29udGVudHMgPSBzY3JvbGxDb250ZW50cztcbiAgICAgICAgdGhpcy5fY29udGVudHMub24oU2Nyb2xsQmFyQ29udGVudHNFdmVudFR5cGUuQ0hBTkdFRF9DT05URU5UU19TSVpFLCB0aGlzLnVwZGF0ZVNsaWRlcik7XG4gICAgICAgIHRoaXMuX3NsaWRlckV2ZW50RW1pdHRlci5vbihcInNsaWRlcl9jaGFuZ2VcIiwgdGhpcy51cGRhdGVDb250ZW50c1Bvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VSYXRlKG9wdGlvbi5yYXRlKTtcbiAgICAgICAgdGhpcy53aGVlbE1hbmFnZXIgPSBuZXcgTW91c2VXaGVlbFNjcm9sbE1hbmFnZXIodGhpcyk7XG4gICAgICAgIHRoaXMud2hlZWxNYW5hZ2VyLm9uKFwidXBkYXRlX3RhcmdldF9wb3NpdGlvblwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclBvc2l0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmluZXJ0aWFsTWFuYWdlciA9IG5ldyBJbmVydGlhbFNjcm9sbE1hbmFnZXIodGhpcyk7XG4gICAgICAgIHRoaXMuaW5lcnRpYWxNYW5hZ2VyLm9uKFwidXBkYXRlX3RhcmdldF9wb3NpdGlvblwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclBvc2l0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjg5zjgr/jg7Pjga7kvY3nva7jgpLliLbpmZDjgZnjgovplqLmlbBcbiAgICAgKiBAcmV0dXJuIOWItumZkOOBp+WIh+OCiuiQveOBqOOBleOCjOOBn+OCueODqeOCpOODgOODvOODnOOCv+ODs+OBruW6p+aomeWApFxuICAgICAqL1xuICAgIGxpbWl0U2xpZGVyQnV0dG9uUG9zaXRpb24oZXZ0KSB7XG4gICAgICAgIGNvbnN0IG1vdXNlUG9zID0gdGhpcy5nZXRNb3VzZVBvc2l0aW9uKHRoaXMsIGV2dCk7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRSYW5nZU9mU2xpZGVyQnV0dG9uUG9zaXRpb24oKTtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmNsYW1wKG1vdXNlUG9zLCByYW5nZS5tYXgsIHJhbmdlLm1pbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOOBruWJsuWQiOOBi+OCieOAgeOCueODqeOCpOODgOODvOOBruS9jee9ruOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbVx0cmF0ZVxuICAgICAqIEByZXR1cm5cbiAgICAgKi9cbiAgICBjb252ZXJ0UmF0ZVRvUGl4ZWwocmF0ZSkge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPZlNsaWRlckJ1dHRvblBvc2l0aW9uKCk7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jb252ZXJ0UmF0ZVRvUGl4ZWwocmF0ZSwgcmFuZ2UubWF4LCByYW5nZS5taW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjga7luqfmqJnjgYvjgonjgIHjgrnjg6njgqTjg4Djg7zjga7libLlkIjjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW1cdHBpeGVsXG4gICAgICogQHJldHVyblxuICAgICAqL1xuICAgIGNvbnZlcnRQaXhlbFRvUmF0ZShwaXhlbCkge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPZlNsaWRlckJ1dHRvblBvc2l0aW9uKCk7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jb252ZXJ0UGl4ZWxUb1JhdGUocGl4ZWwsIHJhbmdlLm1heCwgcmFuZ2UubWluKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Oc44K/44Oz44Gu5Y+v5YuV56+E5Zuy44KS5Y+W5b6X44GZ44KL44CC5Y2Y5L2N44OU44Kv44K744OrXG4gICAgICovXG4gICAgZ2V0UmFuZ2VPZlNsaWRlckJ1dHRvblBvc2l0aW9uKCkge1xuICAgICAgICBjb25zdCBidXR0b25TaXplID0gdGhpcy5zbGlkZUJ1dHRvblNpemU7XG4gICAgICAgIGNvbnN0IHJhdGlvID0gU2Nyb2xsQmFyVmlld1V0aWwuZ2V0UmF0aW9PZk9yaWdpbih0aGlzLl9zbGlkZUJ1dHRvbiwgdGhpcy5pc0hvcml6b250YWwpO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLl9tYXhQb3NpdGlvbiAtICgxLjAgKyByYXRpbykgKiBidXR0b25TaXplO1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLl9taW5Qb3NpdGlvbiAtIHJhdGlvICogYnV0dG9uU2l6ZTtcbiAgICAgICAgcmV0dXJuIHsgbWF4LCBtaW4gfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Oc44K/44Oz44Gu44K144Kk44K644CCXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgc2xpZGVCdXR0b25TaXplKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclNpemUoKTtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmdldFNpemUodGhpcy5fc2xpZGVCdXR0b24sIHRoaXMuaXNIb3Jpem9udGFsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Kv44Ot44O844Or44OQ44O844Gu44Oc44K/44Oz44K144Kk44K65Y+K44Gz5L2N572u44KS5pu05paw44GZ44KL44CCXG4gICAgICog44Kz44Oz44OG44Oz44OE44K144Kk44K644GM5aSJ5pu044GV44KM44Gf5aC05ZCI44Gu5pu05paw44Gr44KC5Yip55So44GZ44KL44CCXG4gICAgICovXG4gICAgdXBkYXRlU2xpZGVyKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNVcGRhdGFibGVTbGlkZXJTaXplKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMudXBkYXRlU2xpZGVyU2l6ZSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclBvc2l0aW9uKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOePvueKtuOBruOCs+ODs+ODhuODs+ODhOOBiuOCiOOBs+ODnuOCueOCr+S9jee9ruOBi+OCieOAgeOCueODqeOCpOODgOODvOOBruWJsuWQiOOCkueul+WHuuOBmeOCi+OAglxuICAgICAqIOOBneOBruWJsuWQiOOBp+OCueODqeOCpOODgOODvOOBruS9jee9ruOCkuabtOaWsOOBmeOCi+OAglxuICAgICAqL1xuICAgIHVwZGF0ZVNsaWRlclBvc2l0aW9uKCkge1xuICAgICAgICBjb25zdCByYXRlID0gdGhpcy5jb250ZW50cy5nZXRTY3JvbGxQb3NpdGlvbkFzUmF0ZSh0aGlzLmlzSG9yaXpvbnRhbCk7XG4gICAgICAgIHRoaXMuY2hhbmdlUmF0ZShyYXRlKTtcbiAgICB9XG4gICAgaXNVcGRhdGFibGVTbGlkZXJTaXplKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gKCgoX2EgPSB0aGlzLl9jb250ZW50cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRhcmdldCkgIT0gbnVsbCAmJlxuICAgICAgICAgICAgKChfYiA9IHRoaXMuX2NvbnRlbnRzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubWFzaykgIT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24gIT0gbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOODnOOCv+ODs+OBruOCteOCpOOCuuOBruS8uOe4ruOCkuihjOOBhuOAglxuICAgICAqL1xuICAgIHVwZGF0ZVNsaWRlclNpemUoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1VwZGF0YWJsZVNsaWRlclNpemUoKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgZnVsbFNpemUgPSB0aGlzLl9tYXhQb3NpdGlvbiAtIHRoaXMuX21pblBvc2l0aW9uO1xuICAgICAgICBjb25zdCBkaXNwbGF5UmF0ZSA9IHRoaXMuX2NvbnRlbnRzLmdldERpc3BsYXlSYXRlKHRoaXMuaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3Qgc2xpZGVyU2l6ZSA9IGZ1bGxTaXplICogZGlzcGxheVJhdGU7XG4gICAgICAgIFNsaWRlclZpZXdVdGlsLnNldFNpemUodGhpcy5fc2xpZGVCdXR0b24sIHRoaXMuaXNIb3Jpem9udGFsLCBzbGlkZXJTaXplKTtcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJWaXNpYmxlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGF1dG9IaWRl44Gu5p2h5Lu244Gr5LiA6Ie044GZ44KL44GL44KS5Yik5a6a44GX44CB6KGo56S644KS5YiH44KK5pu/44GI44KL44CCXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB1cGRhdGVTbGlkZXJWaXNpYmxlKCkge1xuICAgICAgICB0aGlzLl9zbGlkZUJ1dHRvbi52aXNpYmxlID0gdGhpcy5fc2xpZGVCdXR0b24uaW50ZXJhY3RpdmUgPSAhdGhpcy5pc0hpZGRlbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogYXV0b0hpZGXjga7mnaHku7bjgavkuIDoh7TjgZnjgovjgYvjgpLliKTlrprjgZnjgotcbiAgICAgKi9cbiAgICBnZXQgaXNIaWRkZW4oKSB7XG4gICAgICAgIC8vYXV0b0hpZGXjgYzoqK3lrprjgZXjgozjgabjgYTjgarjgYTloLTlkIjjga/luLjjgavooajnpLpcbiAgICAgICAgaWYgKCF0aGlzLmF1dG9IaWRlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudHMuZ2V0RGlzcGxheVJhdGUodGhpcy5pc0hvcml6b250YWwpID09PSAxLjA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHJhdGXlgKTjgpLlhYPjgavjgrPjg7Pjg4bjg7Pjg4TjgpLjgrnjgq/jg63jg7zjg6vjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmF0ZVxuICAgICAqL1xuICAgIHVwZGF0ZUNvbnRlbnRzUG9zaXRpb25XaXRoUmF0ZShyYXRlKSB7XG4gICAgICAgIHRoaXMuX2NvbnRlbnRzLnNjcm9sbChyYXRlLCB0aGlzLmlzSG9yaXpvbnRhbCk7XG4gICAgfVxuICAgIG9uUHJlc3NlZFNsaWRlckJ1dHRvbihlKSB7XG4gICAgICAgIHN1cGVyLm9uUHJlc3NlZFNsaWRlckJ1dHRvbihlKTtcbiAgICAgICAgdGhpcy5fc2Nyb2xsQmFyRXZlbnRFbWl0dGVyLmVtaXQoXCJzdG9wX2luZXJ0aWFsX3R3ZWVuXCIpO1xuICAgIH1cbiAgICBvbk1vdmVTbGlkZXIoZSkge1xuICAgICAgICBzdXBlci5vbk1vdmVTbGlkZXIoZSk7XG4gICAgICAgIHRoaXMuX3Njcm9sbEJhckV2ZW50RW1pdHRlci5lbWl0KFwic3RvcF9pbmVydGlhbF90d2VlblwiKTtcbiAgICB9XG4gICAgb25QcmVzc0Jhc2UoZXZ0KSB7XG4gICAgICAgIGlmICh0aGlzLmlzSGlkZGVuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzdXBlci5vblByZXNzQmFzZShldnQpO1xuICAgICAgICB0aGlzLl9zY3JvbGxCYXJFdmVudEVtaXR0ZXIuZW1pdChcInN0b3BfaW5lcnRpYWxfdHdlZW5cIik7XG4gICAgfVxuICAgIG9uRGlzcG9zZUZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdGhpcy5fY29udGVudHMuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9jb250ZW50cyA9IG51bGw7XG4gICAgICAgIHN1cGVyLm9uRGlzcG9zZUZ1bmN0aW9uKGUpO1xuICAgIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL0luZXJ0aWFsU2Nyb2xsTWFuYWdlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vTW91c2VXaGVlbFNjcm9sbE1hbmFnZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1Njcm9sbEJhckNvbnRlbnRzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2Nyb2xsQmFyRXZlbnRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1Njcm9sbEJhclZpZXdcIjtcbiIsImV4cG9ydCAqIGZyb20gXCIuL1NsaWRlckV2ZW50XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TbGlkZXJWaWV3XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TbGlkZXJWaWV3T3B0aW9uXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zY3JvbGxCYXJcIjtcbiIsImltcG9ydCB7IEFwcGxpY2F0aW9uLCBDb250YWluZXIsIEdyYXBoaWNzLCBSZWN0YW5nbGUsIFRpY2tlciB9IGZyb20gXCJwaXhpLmpzXCI7XG5pbXBvcnQgeyBTY3JvbGxCYXJWaWV3LCBTY3JvbGxCYXJDb250ZW50cyB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IFRXRUVOIGZyb20gXCJAdHdlZW5qcy90d2Vlbi5qc1wiO1xuXG5jb25zdCBvbkRvbUNvbnRlbnRzTG9hZGVkID0gKCkgPT4ge1xuICBjb25zdCBhcHAgPSBuZXcgQXBwbGljYXRpb24oeyB3aWR0aDogODAwLCBoZWlnaHQ6IDgwMCB9KTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhcHAudmlldyk7XG5cbiAgVGlja2VyLnNoYXJlZC5hZGQoKGUpID0+IHtcbiAgICBUV0VFTi51cGRhdGUocGVyZm9ybWFuY2Uubm93KCkpO1xuICB9KTtcblxuICBjb25zdCBzY3JvbGxiYXIgPSBpbml0U2Nyb2xsQmFyKGFwcC5zdGFnZSwgYXBwLnZpZXcpO1xuXG4gIGNvbnN0IGFkZEJ1dHRvbiA9IChsYWJlbCkgPT4ge1xuICAgIGNvbnN0IGJ0blBsdXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGJ0blBsdXMuaW5uZXJUZXh0ID0gbGFiZWw7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChidG5QbHVzKTtcbiAgICByZXR1cm4gYnRuUGx1cztcbiAgfTtcbiAgY29uc3QgYnRuUGx1cyA9IGFkZEJ1dHRvbihcIkNvbnRlbnRzIFNpemUgK1wiKTtcbiAgY29uc3QgYnRuTWludXMgPSBhZGRCdXR0b24oXCJDb250ZW50cyBTaXplIC1cIik7XG4gIGNvbnN0IGNoYW5nZVNpemUgPSAoZGlmKSA9PiB7XG4gICAgY29uc3Qgc2Nyb2xsUG9zaXRpb24gPSBzY3JvbGxiYXIucmF0ZTtcbiAgICBvdmVycmlkZUNvbnRlbnRzKHNjcm9sbGJhci5jb250ZW50cy50YXJnZXQsIGRpZik7XG4gICAgc2Nyb2xsYmFyLnVwZGF0ZVNsaWRlcigpO1xuICAgIHNjcm9sbGJhci5jaGFuZ2VSYXRlKHNjcm9sbFBvc2l0aW9uKTtcbiAgfTtcbiAgY29uc3Qgb25QbHVzID0gKCkgPT4ge1xuICAgIGNoYW5nZVNpemUoNjQpO1xuICB9O1xuICBjb25zdCBvbk1pbnVzID0gKCkgPT4ge1xuICAgIGNoYW5nZVNpemUoLTY0KTtcbiAgfTtcbiAgYnRuUGx1cy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgb25QbHVzKTtcbiAgYnRuTWludXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG9uTWludXMpO1xufTtcblxuLyoqXG4gKiDjgrnjgq/jg63jg7zjg6vjg5Djg7zjga7lrp/oo4XjgrXjg7Pjg5fjg6tcbiAqIEBwYXJhbSBzdGFnZVxuICovXG5jb25zdCBpbml0U2Nyb2xsQmFyID0gKHN0YWdlLCB2aWV3KSA9PiB7XG4gIGNvbnN0IFNDUk9MTEJBUl9XID0gMTY7XG4gIGNvbnN0IFNDUk9MTEJBUl9IID0gMzYwO1xuICBjb25zdCBTQ1JPTExCQVJfWSA9IDEyMDtcbiAgY29uc3QgQ09OVEVOVFNfVyA9IDI0MDtcblxuICBjb25zdCBjb250YWluZXIgPSBuZXcgQ29udGFpbmVyKCk7XG4gIHN0YWdlLmFkZENoaWxkKGNvbnRhaW5lcik7XG4gIGNvbnRhaW5lci54ID0gMzI7XG4gIGNvbnRhaW5lci55ID0gU0NST0xMQkFSX1k7XG5cbiAgY29uc3QgY29udGVudHMgPSBnZXRTY3JvbGxCYXJPcHRpb24oQ09OVEVOVFNfVywgU0NST0xMQkFSX0gsIGNvbnRhaW5lcik7XG4gIGNvbnN0IHNjcm9sbGJhciA9IG5ldyBTY3JvbGxCYXJWaWV3KFxuICAgIHtcbiAgICAgIGJhc2U6IGdldFNjcm9sbEJhckJhc2UoU0NST0xMQkFSX1csIFNDUk9MTEJBUl9ILCAweDAwMDBmZiksXG4gICAgICBidXR0b246IGdldFNjcm9sbEJhckJ1dHRvbihTQ1JPTExCQVJfVywgMHhmZmZmMDApLFxuICAgICAgbWluUG9zaXRpb246IDAsXG4gICAgICBtYXhQb3NpdGlvbjogU0NST0xMQkFSX0gsXG4gICAgICByYXRlOiAzNS4wLFxuICAgICAgaXNIb3Jpem9udGFsOiBmYWxzZSxcbiAgICAgIGNhbnZhczogdmlldyxcbiAgICB9LFxuICAgIGNvbnRlbnRzXG4gICk7XG5cbiAgc3RhZ2UuYWRkQ2hpbGQoc2Nyb2xsYmFyKTtcbiAgc2Nyb2xsYmFyLnggPSBjb250YWluZXIueCArIENPTlRFTlRTX1c7XG4gIHNjcm9sbGJhci55ID0gU0NST0xMQkFSX1k7XG5cbiAgc2Nyb2xsYmFyLnNsaWRlckV2ZW50RW1pdHRlci5vbihcInNsaWRlcl9jaGFuZ2VcIiwgKGUpID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZyhlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIOOCueOCr+ODreODvOODq+WLleS9nOOCkueiuuiqjeOBmeOCi+OBn+OCgeOBq+OAgeaVheaEj+OBq+ODnuOCueOCr+OCkuWkluOBl+OBpuOBhOOBvuOBmeOAglxuICAgKi9cbiAgY29udGVudHMudGFyZ2V0Lm1hc2sgPSBudWxsO1xuICByZXR1cm4gc2Nyb2xsYmFyO1xufTtcblxuY29uc3QgZ2V0U2Nyb2xsQmFyQmFzZSA9ICh3LCBoLCBjb2xvcikgPT4ge1xuICBjb25zdCBnID0gbmV3IEdyYXBoaWNzKCk7XG4gIGcuYmVnaW5GaWxsKGNvbG9yKTtcbiAgZy5kcmF3UmVjdCgwLCAwLCB3LCBoKTtcbiAgZy5oaXRBcmVhID0gbmV3IFJlY3RhbmdsZSgwLCAwLCB3LCBoKTtcbiAgcmV0dXJuIGc7XG59O1xuXG5jb25zdCBnZXRTY3JvbGxCYXJCdXR0b24gPSAod2lkdGgsIGNvbG9yKSA9PiB7XG4gIGNvbnN0IHJhdGlvID0gMC41O1xuICBjb25zdCBnID0gbmV3IEdyYXBoaWNzKCk7XG4gIGcuYmVnaW5GaWxsKGNvbG9yKTtcbiAgZy5kcmF3UmVjdCgtd2lkdGggLyAyLCAtd2lkdGggKiByYXRpbywgd2lkdGgsIHdpZHRoKTtcbiAgZy5oaXRBcmVhID0gbmV3IFJlY3RhbmdsZSgtd2lkdGggLyAyLCAtd2lkdGggKiByYXRpbywgd2lkdGgsIHdpZHRoKTtcbiAgZy54ID0gd2lkdGggLyAyO1xuICByZXR1cm4gZztcbn07XG5cbmNvbnN0IGdldFNjcm9sbEJhckNvbnRlbnRzID0gKGNvbG9yLCB3LCBoLCBjb250YWluZXIsIGFscGhhID0gMS4wKSA9PiB7XG4gIGNvbnN0IGcgPSBuZXcgR3JhcGhpY3MoKTtcbiAgZy5iZWdpbkZpbGwoY29sb3IsIGFscGhhKTtcbiAgZy5kcmF3UmVjdCgwLCAwLCB3LCBoKTtcbiAgZy5oaXRBcmVhID0gbmV3IFJlY3RhbmdsZSgwLCAwLCB3LCBoKTtcbiAgY29udGFpbmVyLmFkZENoaWxkKGcpO1xuICByZXR1cm4gZztcbn07XG5cbmNvbnN0IG92ZXJyaWRlQ29udGVudHMgPSAoZywgZGlmSGVpZ2h0KSA9PiB7XG4gIGNvbnN0IGZpbGwgPSBnLmZpbGwuY2xvbmUoKTtcbiAgY29uc29sZS5sb2coZmlsbCk7XG4gIGNvbnN0IGhpdEFyZWEgPSBnLmhpdEFyZWEuY2xvbmUoKTtcbiAgaGl0QXJlYS5oZWlnaHQgKz0gZGlmSGVpZ2h0O1xuICBnLmNsZWFyKCk7XG4gIGcuYmVnaW5GaWxsKGZpbGwuY29sb3IsIGZpbGwuYWxwaGEpO1xuICBnLmRyYXdSZWN0KGhpdEFyZWEueCwgaGl0QXJlYS55LCBoaXRBcmVhLndpZHRoLCBoaXRBcmVhLmhlaWdodCk7XG4gIGcuaGl0QXJlYSA9IG5ldyBSZWN0YW5nbGUoXG4gICAgaGl0QXJlYS54LFxuICAgIGhpdEFyZWEueSxcbiAgICBoaXRBcmVhLndpZHRoLFxuICAgIGhpdEFyZWEuaGVpZ2h0XG4gICk7XG59O1xuXG5jb25zdCBnZXRTY3JvbGxCYXJPcHRpb24gPSAoY29udGVudHNXLCBzY3JvbGxCYXJILCBjb250YWluZXIpID0+IHtcbiAgY29uc3QgdGFyZ2V0Q29udGVudHMgPSBnZXRTY3JvbGxCYXJDb250ZW50cyhcbiAgICAweGZmMDBmZixcbiAgICBjb250ZW50c1csXG4gICAgc2Nyb2xsQmFySCAqIDIsXG4gICAgY29udGFpbmVyXG4gICk7XG4gIGNvbnN0IGNvbnRlbnRzTWFzayA9IGdldFNjcm9sbEJhckNvbnRlbnRzKFxuICAgIDB4MDAwMGZmLFxuICAgIGNvbnRlbnRzVyxcbiAgICBzY3JvbGxCYXJILFxuICAgIGNvbnRhaW5lcixcbiAgICAwLjNcbiAgKTtcbiAgcmV0dXJuIG5ldyBTY3JvbGxCYXJDb250ZW50cyh0YXJnZXRDb250ZW50cywgY29udGVudHNNYXNrLCBjb250YWluZXIpO1xufTtcblxuLyoqXG4gKiBET01Db250ZW50TG9hZGVk5Lul6ZmN44Gr5Yid5pyf5YyW5Yem55CG44KS5a6f6KGM44GZ44KLXG4gKi9cbmlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIikge1xuICBvbkRvbUNvbnRlbnRzTG9hZGVkKCk7XG59IGVsc2Uge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBvbkRvbUNvbnRlbnRzTG9hZGVkKTtcbn1cbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJTbGlkZXJFdmVudENvbnRleHQiLCJjb25zdHJ1Y3RvciIsInJhdGUiLCJTbGlkZXJFdmVudEVtaXR0ZXIiLCJTSEFQRVMiLCJTbGlkZXJWaWV3IiwiU2xpZGVyVmlld1V0aWwiLCJTbGlkZXJWaWV3T3B0aW9uIiwiaW5pdCIsIm9wdGlvbiIsIl9hIiwiX2IiLCJfYyIsIk1hdGgiLCJtYXgiLCJtaW4iLCJNQVhfUkFURSIsIm1pblBvc2l0aW9uIiwiaXNIb3Jpem9udGFsIiwiY2hlY2siLCJjaGVja1BhcnRzIiwiYmFzZSIsImJ1dHRvbiIsIm1hc2siLCJiYXIiLCJvYmoiLCJ0YXJnZXROYW1lIiwiYm91bmRzIiwiZ2V0Q29udGVudHNCb3VuZHMiLCJ3aWR0aCIsImhlaWdodCIsInR5cGUiLCJSRUNUIiwiRXJyb3IiLCJwYXJlbnQiLCJjb25zb2xlIiwid2FybiIsIkNvbnRhaW5lciIsIkZlZGVyYXRlZFBvaW50ZXJFdmVudCIsIlBvaW50IiwiYnV0dG9uUm9vdENvbnRhaW5lciIsIl9idXR0b25Sb290Q29udGFpbmVyIiwiX2lzSG9yaXpvbnRhbCIsInNsaWRlckV2ZW50RW1pdHRlciIsIl9zbGlkZXJFdmVudEVtaXR0ZXIiLCJkcmFnU3RhcnRQb3MiLCJpc0RyYWdnaW5nIiwic3RhcnRNb3ZlIiwiZSIsIm9uUHJlc3NlZFNsaWRlckJ1dHRvbiIsIm1vdmVTbGlkZXIiLCJvbk1vdmVTbGlkZXIiLCJtb3ZlU2xpZGVyRmluaXNoIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9zbGlkZUJ1dHRvbiIsIm9mZiIsImVtaXQiLCJkaXNwb3NlIiwib25EaXNwb3NlRnVuY3Rpb24iLCJfY2FudmFzIiwiY2FudmFzIiwiX2JhciIsImluaXRCYXJBbmRNYXNrIiwiX2Jhck1hc2siLCJzbGlkZUJ1dHRvbiIsIl9taW5Qb3NpdGlvbiIsIl9tYXhQb3NpdGlvbiIsIm1heFBvc2l0aW9uIiwiX3JhdGUiLCJjaGFuZ2VSYXRlIiwiYWRkQ2hpbGRQYXJ0cyIsInJlbW92ZUNoaWxkIiwiYWRkQ2hpbGQiLCJwb3MiLCJjb252ZXJ0UmF0ZVRvUGl4ZWwiLCJ1cGRhdGVQYXJ0cyIsInRhcmdldCIsImN1cnJlbnRUYXJnZXQiLCJsb2NhbFBvcyIsInRvTG9jYWwiLCJnbG9iYWwiLCJ4IiwieSIsImdldFJvb3RDb250YWluZXIiLCJhZGRFdmVudExpc3RlbmVyIiwib24iLCJtb3VzZVBvcyIsImxpbWl0U2xpZGVyQnV0dG9uUG9zaXRpb24iLCJjb252ZXJ0UGl4ZWxUb1JhdGUiLCJldnQiLCJnZXRNb3VzZVBvc2l0aW9uIiwiY2xhbXAiLCJzdHJldGNoIiwic2V0U2l6ZSIsImdldFBvc2l0aW9uIiwic2V0UG9zaXRpb24iLCJvblByZXNzQmFzZSIsInBpeGVsIiwiZGlzcGxheU9iaiIsIm9mZnNldFgiLCJvZmZzZXRZIiwidmFsdWUiLCJfYmFzZSIsImludGVyYWN0aXZlIiwiaW50ZXJhY3RpdmVDaGlsZHJlbiIsInJlbW92ZUFsbExpc3RlbmVycyIsInJlbW92ZUNoaWxkcmVuIiwicGl4IiwicG9zaXRpb24iLCJnZXRTaXplIiwic2l6ZSIsInNjYWxlIiwiYW1vdW50IiwibnVtIiwiaGl0QXJlYSIsImdldExvY2FsQm91bmRzIiwiU2Nyb2xsQmFyVmlld1V0aWwiLCJnZXRDbGFtcGVkVGFyZ2V0UG9zaXRpb24iLCJ0YXJnZXRTaXplIiwibWFza1NpemUiLCJtaW5Qb3MiLCJjbGFtcFRhcmdldFBvc2l0aW9uIiwiY2xhbXBlZFBvcyIsImdldFJhdGlvT2ZPcmlnaW4iLCJyYXRpbyIsIm5hbWUiLCJFYXNpbmciLCJUd2VlbiIsIlRpY2tlciIsInV0aWxzIiwiSW5lcnRpYWxTY3JvbGxNYW5hZ2VyIiwic3BlZWQiLCJfc3BlZWQiLCJzY3JvbGxCYXJWaWV3IiwiZGVjZWxlcmF0aW9uUmF0ZSIsIm92ZXJmbG93U2Nyb2xsUmFuZ2UiLCJvbk1vdXNlRG93biIsInVwZGF0ZURyYWdQb3MiLCJ0d2VlbiIsImRpc3Bvc2VUd2VlbiIsImFkZERyYWdMaXN0ZW5lciIsIm9uTW91c2VNb3ZlIiwiZGVsdGEiLCJnZXREcmFnUG9zIiwiZHJhZ1BvcyIsImFkZFRhcmdldFBvc2l0aW9uIiwiZ2V0T3ZlcmZsb3dEZWNlbGVyYXRpb24iLCJvbk1vdXNlVXAiLCJyZW1vdmVEcmFnTGlzdGVuZXIiLCJvblRpY2siLCJnZXRMZWF2ZVJhbmdlRnJvbU1hc2siLCJpc1BsYXlpbmciLCJvdmVyZmxvd0RlY2VsZXJhdGlvbiIsImFicyIsInRvT2JqIiwiZ2V0Q2xhbXBlZFBvcyIsImNvbnRlbnRzIiwidG8iLCJvblVwZGF0ZSIsImVhc2luZyIsIkN1YmljIiwiT3V0Iiwic3RhcnQiLCJzdG9wSW5lcnRpYWwiLCJzdG9wIiwic2Nyb2xsQmFyRXZlbnRFbWl0dGVyIiwiX2lzU3RhcnQiLCJzaGFyZWQiLCJhZGQiLCJyZW1vdmUiLCJzd2l0Y2hEcmFnTGlzdGVuZXIiLCJpc09uIiwic3dpdGNoTGlzdGVuZXIiLCJldmVudCIsImxpc3RlbmVyIiwiY3VycmVudFBvcyIsImRpZlBvcyIsIk1vdXNlV2hlZWxTY3JvbGxNYW5hZ2VyIiwid2hlZWxIYW5kbGVyIiwic2hpZnQiLCJkZWx0YVkiLCJzY3JvbGwiLCJTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZSIsIlNjcm9sbEJhckNvbnRlbnRzIiwiX3RhcmdldCIsIkNIQU5HRURfQ09OVEVOVFNfU0laRSIsIl9tYXNrIiwiY29udGFpbmVyIiwic2Nyb2xsQmFyQ29udGVudHMiLCJhZGRUb0NvbnRhaW5lciIsImRpc3BsYXlPYmplY3QiLCJnZXRTY3JvbGxQb3NpdGlvbkFzUmF0ZSIsImdldFBvcyIsInplcm9Qb3MiLCJjb250ZW50c1BvcyIsImNvbnRlbnRzUG9zaXRpb25EaWYiLCJtb3ZhYmxlUmFuZ2UiLCJnZXRNb3ZhYmxlUmFuZ2UiLCJkaWYiLCJnZXREaXNwbGF5UmF0ZSIsImNvbnRlbnRzU2l6ZSIsIlNjcm9sbEJhckV2ZW50RW1pdHRlciIsIlNjcm9sbEJhclZpZXciLCJfY29udGVudHMiLCJhdXRvSGlkZSIsIl9hdXRvSGlkZSIsInVwZGF0ZVNsaWRlclZpc2libGUiLCJfc2Nyb2xsQmFyRXZlbnRFbWl0dGVyIiwic2Nyb2xsQ29udGVudHMiLCJ1cGRhdGVDb250ZW50c1Bvc2l0aW9uIiwidXBkYXRlQ29udGVudHNQb3NpdGlvbldpdGhSYXRlIiwidXBkYXRlU2xpZGVyIiwid2hlZWxNYW5hZ2VyIiwidXBkYXRlU2xpZGVyUG9zaXRpb24iLCJpbmVydGlhbE1hbmFnZXIiLCJyYW5nZSIsImdldFJhbmdlT2ZTbGlkZXJCdXR0b25Qb3NpdGlvbiIsImJ1dHRvblNpemUiLCJzbGlkZUJ1dHRvblNpemUiLCJ1cGRhdGVTbGlkZXJTaXplIiwiaXNVcGRhdGFibGVTbGlkZXJTaXplIiwiZnVsbFNpemUiLCJkaXNwbGF5UmF0ZSIsInNsaWRlclNpemUiLCJ2aXNpYmxlIiwiaXNIaWRkZW4iLCJBcHBsaWNhdGlvbiIsIkdyYXBoaWNzIiwiUmVjdGFuZ2xlIiwiVFdFRU4iLCJvbkRvbUNvbnRlbnRzTG9hZGVkIiwiYXBwIiwiZG9jdW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJ2aWV3IiwidXBkYXRlIiwicGVyZm9ybWFuY2UiLCJub3ciLCJzY3JvbGxiYXIiLCJpbml0U2Nyb2xsQmFyIiwic3RhZ2UiLCJhZGRCdXR0b24iLCJsYWJlbCIsImJ0blBsdXMiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJUZXh0IiwiYnRuTWludXMiLCJjaGFuZ2VTaXplIiwic2Nyb2xsUG9zaXRpb24iLCJvdmVycmlkZUNvbnRlbnRzIiwib25QbHVzIiwib25NaW51cyIsIlNDUk9MTEJBUl9XIiwiU0NST0xMQkFSX0giLCJTQ1JPTExCQVJfWSIsIkNPTlRFTlRTX1ciLCJnZXRTY3JvbGxCYXJPcHRpb24iLCJnZXRTY3JvbGxCYXJCYXNlIiwiZ2V0U2Nyb2xsQmFyQnV0dG9uIiwidyIsImgiLCJjb2xvciIsImciLCJiZWdpbkZpbGwiLCJkcmF3UmVjdCIsImdldFNjcm9sbEJhckNvbnRlbnRzIiwiYWxwaGEiLCJkaWZIZWlnaHQiLCJmaWxsIiwiY2xvbmUiLCJsb2ciLCJjbGVhciIsImNvbnRlbnRzVyIsInNjcm9sbEJhckgiLCJ0YXJnZXRDb250ZW50cyIsImNvbnRlbnRzTWFzayIsInJlYWR5U3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///589\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var g=1/0;for(i=0;i<deferred.length;i++){for(var[U,F,B]=deferred[i],s=!0,I=0;I<U.length;I++)(!1&B||g>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[I])))?U.splice(I--,1):(s=!1,B<g&&(g=B));if(s){deferred.splice(i--,1);var C=F();void 0!==C&&(Q=C)}}return Q}B=B||0;for(var i=deferred.length;i>0&&deferred[i-1][2]>B;i--)deferred[i]=deferred[i-1];deferred[i]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),__webpack_require__.j=545,(()=>{var Q={545:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,g,[s,I,C]=F,i=0;if(s.some((U=>0!==Q[U]))){for(B in I)__webpack_require__.o(I,B)&&(__webpack_require__.m[B]=I[B]);if(C)var l=C(__webpack_require__)}for(U&&U(F);i<s.length;i++)g=s[i],__webpack_require__.o(Q,g)&&Q[g]&&Q[g][0](),Q[g]=0;return __webpack_require__.O(l)},F=self.webpackChunk_masatomakino_pixijs_basic_scrollbar=self.webpackChunk_masatomakino_pixijs_basic_scrollbar||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(589)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();