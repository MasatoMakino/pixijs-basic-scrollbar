"use strict";(self.webpackChunk_masatomakino_pixijs_basic_scrollbar=self.webpackChunk_masatomakino_pixijs_basic_scrollbar||[]).push([[172],{2172:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  WebGLRenderer: () => (/* binding */ WebGLRenderer)\n});\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/extensions/Extensions.mjs\nvar Extensions = __webpack_require__(3489);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/maths/matrix/Matrix.mjs\nvar Matrix = __webpack_require__(5321);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/batcher/shared/const.mjs\nvar shared_const = __webpack_require__(4589);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compileHighShaderToProgram.mjs + 8 modules\nvar compileHighShaderToProgram = __webpack_require__(8157);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/colorBit.mjs\nvar colorBit = __webpack_require__(2110);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/generateTextureBatchBit.mjs\nvar generateTextureBatchBit = __webpack_require__(6600);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/localUniformBit.mjs\nvar localUniformBit = __webpack_require__(8070);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/roundPixelsBit.mjs\nvar roundPixelsBit = __webpack_require__(9637);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/batchSamplersUniformGroup.mjs\nvar batchSamplersUniformGroup = __webpack_require__(5774);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/Shader.mjs\nvar Shader = __webpack_require__(2267);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/UniformGroup.mjs + 1 modules\nvar UniformGroup = __webpack_require__(3870);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/graphics/gl/GlGraphicsAdaptor.mjs\n\n\n\n\n\n\n\n\n\n\n\n\n"use strict";\nclass GlGraphicsAdaptor {\n  init() {\n    const uniforms = new UniformGroup/* UniformGroup */.o({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: "vec4<f32>" },\n      uTransformMatrix: { value: new Matrix/* Matrix */.y(), type: "mat3x3<f32>" },\n      uRound: { value: 0, type: "f32" }\n    });\n    const glProgram = (0,compileHighShaderToProgram/* compileHighShaderGlProgram */.o)({\n      name: "graphics",\n      bits: [\n        colorBit/* colorBitGl */.T,\n        (0,generateTextureBatchBit/* generateTextureBatchBitGl */.h)(shared_const/* MAX_TEXTURES */.A),\n        localUniformBit/* localUniformBitGl */.$g,\n        roundPixelsBit/* roundPixelsBitGl */.X\n      ]\n    });\n    this.shader = new Shader/* Shader */.e({\n      glProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: batchSamplersUniformGroup/* batchSamplersUniformGroup */.y\n      }\n    });\n  }\n  execute(graphicsPipe, renderable) {\n    const context = renderable.context;\n    const shader = context.customShader || this.shader;\n    const renderer = graphicsPipe.renderer;\n    const contextSystem = renderer.graphicsContext;\n    const {\n      geometry,\n      instructions\n    } = contextSystem.getContextRenderData(context);\n    shader.groups[0] = renderer.globalUniforms.bindGroup;\n    renderer.shader.bind(shader);\n    renderer.geometry.bind(geometry, shader.glProgram);\n    const batches = instructions.instructions;\n    for (let i = 0; i < instructions.instructionSize; i++) {\n      const batch = batches[i];\n      if (batch.size) {\n        for (let j = 0; j < batch.textures.textures.length; j++) {\n          renderer.texture.bind(batch.textures.textures[j], j);\n        }\n        renderer.geometry.draw("triangle-list", batch.size, batch.start);\n      }\n    }\n  }\n  destroy() {\n    this.shader.destroy(true);\n    this.shader = null;\n  }\n}\n/** @ignore */\nGlGraphicsAdaptor.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLPipesAdaptor\n  ],\n  name: "graphics"\n};\n\n\n//# sourceMappingURL=GlGraphicsAdaptor.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/textureBit.mjs\nvar textureBit = __webpack_require__(9054);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/Texture.mjs + 2 modules\nvar Texture = __webpack_require__(9853);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/utils/logging/warn.mjs\nvar warn = __webpack_require__(4796);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/mesh/gl/GlMeshAdaptor.mjs\n\n\n\n\n\n\n\n\n\n"use strict";\nclass GlMeshAdaptor {\n  init() {\n    const glProgram = (0,compileHighShaderToProgram/* compileHighShaderGlProgram */.o)({\n      name: "mesh",\n      bits: [\n        localUniformBit/* localUniformBitGl */.$g,\n        textureBit/* textureBitGl */.e,\n        roundPixelsBit/* roundPixelsBitGl */.X\n      ]\n    });\n    this._shader = new Shader/* Shader */.e({\n      glProgram,\n      resources: {\n        uTexture: Texture/* Texture */.x.EMPTY.source\n      }\n    });\n  }\n  execute(meshPipe, mesh) {\n    const renderer = meshPipe.renderer;\n    let shader = mesh._shader;\n    if (!shader) {\n      shader = this._shader;\n      const source = mesh.texture.source;\n      shader.resources.uTexture = source;\n      shader.resources.uSampler = source.style;\n    } else if (!shader.glProgram) {\n      (0,warn/* warn */.Z)("Mesh shader has no glProgram", mesh.shader);\n      return;\n    }\n    shader.groups[100] = renderer.globalUniforms.bindGroup;\n    shader.groups[101] = meshPipe.localUniformsBindGroup;\n    renderer.encoder.draw({\n      geometry: mesh._geometry,\n      shader,\n      state: mesh.state\n    });\n  }\n  destroy() {\n    this._shader.destroy(true);\n    this._shader = null;\n  }\n}\nGlMeshAdaptor.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLPipesAdaptor\n  ],\n  name: "mesh"\n};\n\n\n//# sourceMappingURL=GlMeshAdaptor.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs\nvar State = __webpack_require__(6798);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/batcher/gl/GlBatchAdaptor.mjs\n\n\n\n\n\n\n\n\n\n\n"use strict";\nclass GlBatchAdaptor {\n  constructor() {\n    this._didUpload = false;\n    this._tempState = State/* State */.Z.for2d();\n  }\n  init(batcherPipe) {\n    const glProgram = (0,compileHighShaderToProgram/* compileHighShaderGlProgram */.o)({\n      name: "batch",\n      bits: [\n        colorBit/* colorBitGl */.T,\n        (0,generateTextureBatchBit/* generateTextureBatchBitGl */.h)(shared_const/* MAX_TEXTURES */.A),\n        roundPixelsBit/* roundPixelsBitGl */.X\n      ]\n    });\n    this._shader = new Shader/* Shader */.e({\n      glProgram,\n      resources: {\n        batchSamplers: batchSamplersUniformGroup/* batchSamplersUniformGroup */.y\n      }\n    });\n    batcherPipe.renderer.runners.contextChange.add(this);\n  }\n  contextChange() {\n    this._didUpload = false;\n  }\n  start(batchPipe, geometry) {\n    const renderer = batchPipe.renderer;\n    renderer.shader.bind(this._shader, this._didUpload);\n    renderer.shader.updateUniformGroup(renderer.globalUniforms.uniformGroup);\n    renderer.geometry.bind(geometry, this._shader.glProgram);\n  }\n  execute(batchPipe, batch) {\n    const renderer = batchPipe.renderer;\n    this._didUpload = true;\n    this._tempState.blendMode = batch.blendMode;\n    renderer.state.set(this._tempState);\n    const textures = batch.textures.textures;\n    for (let i = 0; i < textures.length; i++) {\n      renderer.texture.bind(textures[i], i);\n    }\n    renderer.geometry.draw("triangle-list", batch.size, batch.start);\n  }\n  destroy() {\n    this._shader.destroy(true);\n    this._shader = null;\n  }\n}\n/** @ignore */\nGlBatchAdaptor.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLPipesAdaptor\n  ],\n  name: "batch"\n};\n\n\n//# sourceMappingURL=GlBatchAdaptor.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/system/AbstractRenderer.mjs\nvar AbstractRenderer = __webpack_require__(7199);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/system/SharedSystems.mjs + 28 modules\nvar SharedSystems = __webpack_require__(6687);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/types.mjs\nvar types = __webpack_require__(5765);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/buffer/const.mjs\nvar buffer_const = __webpack_require__(5324);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/buffer/const.mjs\n\nvar BUFFER_TYPE = /* @__PURE__ */ ((BUFFER_TYPE2) => {\n  BUFFER_TYPE2[BUFFER_TYPE2["ELEMENT_ARRAY_BUFFER"] = 34963] = "ELEMENT_ARRAY_BUFFER";\n  BUFFER_TYPE2[BUFFER_TYPE2["ARRAY_BUFFER"] = 34962] = "ARRAY_BUFFER";\n  BUFFER_TYPE2[BUFFER_TYPE2["UNIFORM_BUFFER"] = 35345] = "UNIFORM_BUFFER";\n  return BUFFER_TYPE2;\n})(BUFFER_TYPE || {});\n\n\n//# sourceMappingURL=const.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/buffer/GlBuffer.mjs\n\nclass GlBuffer {\n  constructor(buffer, type) {\n    this.buffer = buffer || null;\n    this.updateID = -1;\n    this.byteLength = -1;\n    this.type = type;\n  }\n}\n\n\n//# sourceMappingURL=GlBuffer.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/buffer/GlBufferSystem.mjs\n\n\n\n\n\n"use strict";\nclass GlBufferSystem {\n  /**\n   * @param {Renderer} renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this._gpuBuffers = /* @__PURE__ */ Object.create(null);\n    /** Cache keeping track of the base bound buffer bases */\n    this._boundBufferBases = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  /**\n   * @ignore\n   */\n  destroy() {\n    this._renderer = null;\n    this._gl = null;\n    this._gpuBuffers = null;\n    this._boundBufferBases = null;\n  }\n  /** Sets up the renderer context and necessary buffers. */\n  contextChange() {\n    this._gpuBuffers = /* @__PURE__ */ Object.create(null);\n    this._gl = this._renderer.gl;\n  }\n  getGlBuffer(buffer) {\n    return this._gpuBuffers[buffer.uid] || this.createGLBuffer(buffer);\n  }\n  /**\n   * This binds specified buffer. On first run, it will create the webGL buffers for the context too\n   * @param buffer - the buffer to bind to the renderer\n   */\n  bind(buffer) {\n    const { _gl: gl } = this;\n    const glBuffer = this.getGlBuffer(buffer);\n    gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n  }\n  /**\n   * Binds an uniform buffer to at the given index.\n   *\n   * A cache is used so a buffer will not be bound again if already bound.\n   * @param buffer - the buffer to bind\n   * @param index - the base index to bind it to.\n   */\n  bindBufferBase(buffer, index) {\n    const { _gl: gl } = this;\n    if (this._boundBufferBases[index] !== buffer) {\n      const glBuffer = this.getGlBuffer(buffer);\n      this._boundBufferBases[index] = buffer;\n      gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);\n    }\n  }\n  /**\n   * Binds a buffer whilst also binding its range.\n   * This will make the buffer start from the offset supplied rather than 0 when it is read.\n   * @param buffer - the buffer to bind\n   * @param index - the base index to bind at, defaults to 0\n   * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc\n   */\n  bindBufferRange(buffer, index, offset) {\n    const { _gl: gl } = this;\n    offset = offset || 0;\n    const glBuffer = this.getGlBuffer(buffer);\n    gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, 256);\n  }\n  /**\n   * Will ensure the data in the buffer is uploaded to the GPU.\n   * @param {Buffer} buffer - the buffer to update\n   */\n  updateBuffer(buffer) {\n    const { _gl: gl } = this;\n    const glBuffer = this.getGlBuffer(buffer);\n    if (buffer._updateID === glBuffer.updateID) {\n      return glBuffer;\n    }\n    glBuffer.updateID = buffer._updateID;\n    gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n    const data = buffer.data;\n    if (glBuffer.byteLength >= buffer.data.byteLength) {\n      gl.bufferSubData(glBuffer.type, 0, data, 0, buffer._updateSize / data.BYTES_PER_ELEMENT);\n    } else {\n      const drawType = buffer.descriptor.usage & buffer_const/* BufferUsage */.F.STATIC ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;\n      glBuffer.byteLength = data.byteLength;\n      gl.bufferData(glBuffer.type, data, drawType);\n    }\n    return glBuffer;\n  }\n  /** dispose all WebGL resources of all managed buffers */\n  destroyAll() {\n    const gl = this._gl;\n    for (const id in this._gpuBuffers) {\n      gl.deleteBuffer(this._gpuBuffers[id].buffer);\n    }\n    this._gpuBuffers = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Disposes buffer\n   * @param {Buffer} buffer - buffer with data\n   * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n   */\n  onBufferDestroy(buffer, contextLost) {\n    const glBuffer = this._gpuBuffers[buffer.uid];\n    const gl = this._gl;\n    if (!contextLost) {\n      gl.deleteBuffer(glBuffer.buffer);\n    }\n    this._gpuBuffers[buffer.uid] = null;\n  }\n  /**\n   * creates and attaches a GLBuffer object tied to the current context.\n   * @param buffer\n   * @protected\n   */\n  createGLBuffer(buffer) {\n    const { _gl: gl } = this;\n    let type = BUFFER_TYPE.ARRAY_BUFFER;\n    if (buffer.descriptor.usage & buffer_const/* BufferUsage */.F.INDEX) {\n      type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n    } else if (buffer.descriptor.usage & buffer_const/* BufferUsage */.F.UNIFORM) {\n      type = BUFFER_TYPE.UNIFORM_BUFFER;\n    }\n    const glBuffer = new GlBuffer(gl.createBuffer(), type);\n    this._gpuBuffers[buffer.uid] = glBuffer;\n    buffer.on("destroy", this.onBufferDestroy, this);\n    return glBuffer;\n  }\n}\n/** @ignore */\nGlBufferSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem\n  ],\n  name: "buffer"\n};\n\n\n//# sourceMappingURL=GlBufferSystem.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/context/GlContextSystem.mjs\n\n\n\n"use strict";\nconst _GlContextSystem = class _GlContextSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    /**\n     * Features supported by current renderer.\n     * @type {object}\n     * @readonly\n     */\n    this.supports = {\n      /** Support for 32-bit indices buffer. */\n      uint32Indices: true,\n      /** Support for UniformBufferObjects */\n      uniformBufferObject: true,\n      /** Support for VertexArrayObjects */\n      vertexArrayObject: true,\n      /** Support for SRGB texture format */\n      srgbTextures: true,\n      /** Support for wrapping modes if a texture is non-power of two */\n      nonPowOf2wrapping: true,\n      /** Support for MSAA (antialiasing of dynamic textures) */\n      msaa: true,\n      /** Support for mipmaps if a texture is non-power of two */\n      nonPowOf2mipmaps: true\n    };\n    this._renderer = renderer;\n    this.extensions = /* @__PURE__ */ Object.create(null);\n    this.handleContextLost = this.handleContextLost.bind(this);\n    this.handleContextRestored = this.handleContextRestored.bind(this);\n  }\n  /**\n   * `true` if the context is lost\n   * @readonly\n   */\n  get isLost() {\n    return !this.gl || this.gl.isContextLost();\n  }\n  /**\n   * Handles the context change event.\n   * @param {WebGLRenderingContext} gl - New WebGL context.\n   */\n  contextChange(gl) {\n    this.gl = gl;\n    this._renderer.gl = gl;\n  }\n  init(options) {\n    options = { ..._GlContextSystem.defaultOptions, ...options };\n    if (options.context) {\n      this.initFromContext(options.context);\n    } else {\n      const alpha = this._renderer.background.alpha < 1;\n      const premultipliedAlpha = options.premultipliedAlpha ?? true;\n      const antialias = options.antialias && !this._renderer.backBuffer.useBackBuffer;\n      this.createContext(options.preferWebGLVersion, {\n        alpha,\n        premultipliedAlpha,\n        antialias,\n        stencil: true,\n        preserveDrawingBuffer: options.preserveDrawingBuffer,\n        powerPreference: options.powerPreference ?? "default"\n      });\n    }\n  }\n  /**\n   * Initializes the context.\n   * @protected\n   * @param {WebGLRenderingContext} gl - WebGL context\n   */\n  initFromContext(gl) {\n    this.gl = gl;\n    this.webGLVersion = gl instanceof WebGL2RenderingContext ? 2 : 1;\n    this.getExtensions();\n    this.validateContext(gl);\n    this._renderer.runners.contextChange.emit(gl);\n    const element = this._renderer.view.canvas;\n    element.addEventListener("webglcontextlost", this.handleContextLost, false);\n    element.addEventListener("webglcontextrestored", this.handleContextRestored, false);\n  }\n  /**\n   * Initialize from context options\n   * @protected\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n   * @param preferWebGLVersion\n   * @param {object} options - context attributes\n   */\n  createContext(preferWebGLVersion, options) {\n    let gl;\n    const canvas = this._renderer.view.canvas;\n    if (preferWebGLVersion === 2) {\n      gl = canvas.getContext("webgl2", options);\n    }\n    if (!gl) {\n      gl = canvas.getContext("webgl", options);\n      if (!gl) {\n        throw new Error("This browser does not support WebGL. Try using the canvas renderer");\n      }\n    }\n    this.gl = gl;\n    this.initFromContext(this.gl);\n  }\n  /** Auto-populate the {@link GlContextSystem.extensions extensions}. */\n  getExtensions() {\n    const { gl } = this;\n    const common = {\n      anisotropicFiltering: gl.getExtension("EXT_texture_filter_anisotropic"),\n      floatTextureLinear: gl.getExtension("OES_texture_float_linear"),\n      s3tc: gl.getExtension("WEBGL_compressed_texture_s3tc"),\n      s3tc_sRGB: gl.getExtension("WEBGL_compressed_texture_s3tc_srgb"),\n      // eslint-disable-line camelcase\n      etc: gl.getExtension("WEBGL_compressed_texture_etc"),\n      etc1: gl.getExtension("WEBGL_compressed_texture_etc1"),\n      pvrtc: gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),\n      atc: gl.getExtension("WEBGL_compressed_texture_atc"),\n      astc: gl.getExtension("WEBGL_compressed_texture_astc"),\n      bptc: gl.getExtension("EXT_texture_compression_bptc"),\n      rgtc: gl.getExtension("EXT_texture_compression_rgtc"),\n      loseContext: gl.getExtension("WEBGL_lose_context")\n    };\n    if (this.webGLVersion === 1) {\n      this.extensions = {\n        ...common,\n        drawBuffers: gl.getExtension("WEBGL_draw_buffers"),\n        depthTexture: gl.getExtension("WEBGL_depth_texture"),\n        vertexArrayObject: gl.getExtension("OES_vertex_array_object") || gl.getExtension("MOZ_OES_vertex_array_object") || gl.getExtension("WEBKIT_OES_vertex_array_object"),\n        uint32ElementIndex: gl.getExtension("OES_element_index_uint"),\n        // Floats and half-floats\n        floatTexture: gl.getExtension("OES_texture_float"),\n        floatTextureLinear: gl.getExtension("OES_texture_float_linear"),\n        textureHalfFloat: gl.getExtension("OES_texture_half_float"),\n        textureHalfFloatLinear: gl.getExtension("OES_texture_half_float_linear"),\n        vertexAttribDivisorANGLE: gl.getExtension("ANGLE_instanced_arrays"),\n        srgb: gl.getExtension("EXT_sRGB")\n      };\n    } else {\n      this.extensions = {\n        ...common,\n        colorBufferFloat: gl.getExtension("EXT_color_buffer_float")\n      };\n    }\n  }\n  /**\n   * Handles a lost webgl context\n   * @param {WebGLContextEvent} event - The context lost event.\n   */\n  handleContextLost(event) {\n    event.preventDefault();\n    if (this._contextLossForced) {\n      this._contextLossForced = false;\n      setTimeout(() => {\n        if (this.gl.isContextLost()) {\n          this.extensions.loseContext?.restoreContext();\n        }\n      }, 0);\n    }\n  }\n  /** Handles a restored webgl context. */\n  handleContextRestored() {\n    this._renderer.runners.contextChange.emit(this.gl);\n  }\n  destroy() {\n    const element = this._renderer.view.canvas;\n    this._renderer = null;\n    element.removeEventListener("webglcontextlost", this.handleContextLost);\n    element.removeEventListener("webglcontextrestored", this.handleContextRestored);\n    this.gl.useProgram(null);\n    this.extensions.loseContext?.loseContext();\n  }\n  /**\n   * this function can be called to force a webGL context loss\n   * this will release all resources on the GPU.\n   * Useful if you need to put Pixi to sleep, and save some GPU memory\n   *\n   * As soon as render is called - all resources will be created again.\n   */\n  forceContextLoss() {\n    this.extensions.loseContext?.loseContext();\n    this._contextLossForced = true;\n  }\n  /**\n   * Validate context.\n   * @param {WebGLRenderingContext} gl - Render context.\n   */\n  validateContext(gl) {\n    const attributes = gl.getContextAttributes();\n    if (attributes && !attributes.stencil) {\n      (0,warn/* warn */.Z)("Provided WebGL context does not have a stencil buffer, masks may not render correctly");\n    }\n    const supports = this.supports;\n    const isWebGl2 = this.webGLVersion === 2;\n    const extensions = this.extensions;\n    supports.uint32Indices = isWebGl2 || !!extensions.uint32ElementIndex;\n    supports.uniformBufferObject = isWebGl2;\n    supports.vertexArrayObject = isWebGl2 || !!extensions.vertexArrayObject;\n    supports.srgbTextures = isWebGl2 || !!extensions.srgb;\n    supports.nonPowOf2wrapping = isWebGl2;\n    supports.nonPowOf2mipmaps = isWebGl2;\n    supports.msaa = isWebGl2;\n    if (!supports.uint32Indices) {\n      (0,warn/* warn */.Z)("Provided WebGL context does not support 32 index buffer, large scenes may not render correctly");\n    }\n  }\n};\n/** @ignore */\n_GlContextSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem\n  ],\n  name: "context"\n};\n/** @ignore */\n_GlContextSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.context}\n   * @default null\n   */\n  context: null,\n  /**\n   * {@link WebGLOptions.premultipliedAlpha}\n   * @default true\n   */\n  premultipliedAlpha: true,\n  /**\n   * {@link WebGLOptions.preserveDrawingBuffer}\n   * @default false\n   */\n  preserveDrawingBuffer: false,\n  /**\n   * {@link WebGLOptions.powerPreference}\n   * @default default\n   */\n  powerPreference: void 0,\n  /**\n   * {@link WebGLOptions.webGLVersion}\n   * @default 2\n   */\n  preferWebGLVersion: 2\n};\nlet GlContextSystem = _GlContextSystem;\n\n\n//# sourceMappingURL=GlContextSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs\nvar getAttributeInfoFromFormat = __webpack_require__(9824);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/ensureAttributes.mjs\nvar ensureAttributes = __webpack_require__(6546);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/texture/const.mjs\n\nvar GL_FORMATS = /* @__PURE__ */ ((GL_FORMATS2) => {\n  GL_FORMATS2[GL_FORMATS2["RGBA"] = 6408] = "RGBA";\n  GL_FORMATS2[GL_FORMATS2["RGB"] = 6407] = "RGB";\n  GL_FORMATS2[GL_FORMATS2["RG"] = 33319] = "RG";\n  GL_FORMATS2[GL_FORMATS2["RED"] = 6403] = "RED";\n  GL_FORMATS2[GL_FORMATS2["RGBA_INTEGER"] = 36249] = "RGBA_INTEGER";\n  GL_FORMATS2[GL_FORMATS2["RGB_INTEGER"] = 36248] = "RGB_INTEGER";\n  GL_FORMATS2[GL_FORMATS2["RG_INTEGER"] = 33320] = "RG_INTEGER";\n  GL_FORMATS2[GL_FORMATS2["RED_INTEGER"] = 36244] = "RED_INTEGER";\n  GL_FORMATS2[GL_FORMATS2["ALPHA"] = 6406] = "ALPHA";\n  GL_FORMATS2[GL_FORMATS2["LUMINANCE"] = 6409] = "LUMINANCE";\n  GL_FORMATS2[GL_FORMATS2["LUMINANCE_ALPHA"] = 6410] = "LUMINANCE_ALPHA";\n  GL_FORMATS2[GL_FORMATS2["DEPTH_COMPONENT"] = 6402] = "DEPTH_COMPONENT";\n  GL_FORMATS2[GL_FORMATS2["DEPTH_STENCIL"] = 34041] = "DEPTH_STENCIL";\n  return GL_FORMATS2;\n})(GL_FORMATS || {});\nvar GL_TARGETS = /* @__PURE__ */ ((GL_TARGETS2) => {\n  GL_TARGETS2[GL_TARGETS2["TEXTURE_2D"] = 3553] = "TEXTURE_2D";\n  GL_TARGETS2[GL_TARGETS2["TEXTURE_CUBE_MAP"] = 34067] = "TEXTURE_CUBE_MAP";\n  GL_TARGETS2[GL_TARGETS2["TEXTURE_2D_ARRAY"] = 35866] = "TEXTURE_2D_ARRAY";\n  GL_TARGETS2[GL_TARGETS2["TEXTURE_CUBE_MAP_POSITIVE_X"] = 34069] = "TEXTURE_CUBE_MAP_POSITIVE_X";\n  GL_TARGETS2[GL_TARGETS2["TEXTURE_CUBE_MAP_NEGATIVE_X"] = 34070] = "TEXTURE_CUBE_MAP_NEGATIVE_X";\n  GL_TARGETS2[GL_TARGETS2["TEXTURE_CUBE_MAP_POSITIVE_Y"] = 34071] = "TEXTURE_CUBE_MAP_POSITIVE_Y";\n  GL_TARGETS2[GL_TARGETS2["TEXTURE_CUBE_MAP_NEGATIVE_Y"] = 34072] = "TEXTURE_CUBE_MAP_NEGATIVE_Y";\n  GL_TARGETS2[GL_TARGETS2["TEXTURE_CUBE_MAP_POSITIVE_Z"] = 34073] = "TEXTURE_CUBE_MAP_POSITIVE_Z";\n  GL_TARGETS2[GL_TARGETS2["TEXTURE_CUBE_MAP_NEGATIVE_Z"] = 34074] = "TEXTURE_CUBE_MAP_NEGATIVE_Z";\n  return GL_TARGETS2;\n})(GL_TARGETS || {});\nvar GL_WRAP_MODES = /* @__PURE__ */ ((GL_WRAP_MODES2) => {\n  GL_WRAP_MODES2[GL_WRAP_MODES2["CLAMP"] = 33071] = "CLAMP";\n  GL_WRAP_MODES2[GL_WRAP_MODES2["REPEAT"] = 10497] = "REPEAT";\n  GL_WRAP_MODES2[GL_WRAP_MODES2["MIRRORED_REPEAT"] = 33648] = "MIRRORED_REPEAT";\n  return GL_WRAP_MODES2;\n})(GL_WRAP_MODES || {});\nvar GL_TYPES = /* @__PURE__ */ ((GL_TYPES2) => {\n  GL_TYPES2[GL_TYPES2["UNSIGNED_BYTE"] = 5121] = "UNSIGNED_BYTE";\n  GL_TYPES2[GL_TYPES2["UNSIGNED_SHORT"] = 5123] = "UNSIGNED_SHORT";\n  GL_TYPES2[GL_TYPES2["UNSIGNED_SHORT_5_6_5"] = 33635] = "UNSIGNED_SHORT_5_6_5";\n  GL_TYPES2[GL_TYPES2["UNSIGNED_SHORT_4_4_4_4"] = 32819] = "UNSIGNED_SHORT_4_4_4_4";\n  GL_TYPES2[GL_TYPES2["UNSIGNED_SHORT_5_5_5_1"] = 32820] = "UNSIGNED_SHORT_5_5_5_1";\n  GL_TYPES2[GL_TYPES2["UNSIGNED_INT"] = 5125] = "UNSIGNED_INT";\n  GL_TYPES2[GL_TYPES2["UNSIGNED_INT_10F_11F_11F_REV"] = 35899] = "UNSIGNED_INT_10F_11F_11F_REV";\n  GL_TYPES2[GL_TYPES2["UNSIGNED_INT_2_10_10_10_REV"] = 33640] = "UNSIGNED_INT_2_10_10_10_REV";\n  GL_TYPES2[GL_TYPES2["UNSIGNED_INT_24_8"] = 34042] = "UNSIGNED_INT_24_8";\n  GL_TYPES2[GL_TYPES2["UNSIGNED_INT_5_9_9_9_REV"] = 35902] = "UNSIGNED_INT_5_9_9_9_REV";\n  GL_TYPES2[GL_TYPES2["BYTE"] = 5120] = "BYTE";\n  GL_TYPES2[GL_TYPES2["SHORT"] = 5122] = "SHORT";\n  GL_TYPES2[GL_TYPES2["INT"] = 5124] = "INT";\n  GL_TYPES2[GL_TYPES2["FLOAT"] = 5126] = "FLOAT";\n  GL_TYPES2[GL_TYPES2["FLOAT_32_UNSIGNED_INT_24_8_REV"] = 36269] = "FLOAT_32_UNSIGNED_INT_24_8_REV";\n  GL_TYPES2[GL_TYPES2["HALF_FLOAT"] = 36193] = "HALF_FLOAT";\n  return GL_TYPES2;\n})(GL_TYPES || {});\n\n\n//# sourceMappingURL=const.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/geometry/utils/getGlTypeFromFormat.mjs\n\n\n"use strict";\nconst infoMap = {\n  uint8x2: GL_TYPES.UNSIGNED_BYTE,\n  uint8x4: GL_TYPES.UNSIGNED_BYTE,\n  sint8x2: GL_TYPES.BYTE,\n  sint8x4: GL_TYPES.BYTE,\n  unorm8x2: GL_TYPES.UNSIGNED_BYTE,\n  unorm8x4: GL_TYPES.UNSIGNED_BYTE,\n  snorm8x2: GL_TYPES.BYTE,\n  snorm8x4: GL_TYPES.BYTE,\n  uint16x2: GL_TYPES.UNSIGNED_SHORT,\n  uint16x4: GL_TYPES.UNSIGNED_SHORT,\n  sint16x2: GL_TYPES.SHORT,\n  sint16x4: GL_TYPES.SHORT,\n  unorm16x2: GL_TYPES.UNSIGNED_SHORT,\n  unorm16x4: GL_TYPES.UNSIGNED_SHORT,\n  snorm16x2: GL_TYPES.SHORT,\n  snorm16x4: GL_TYPES.SHORT,\n  float16x2: GL_TYPES.HALF_FLOAT,\n  float16x4: GL_TYPES.HALF_FLOAT,\n  float32: GL_TYPES.FLOAT,\n  float32x2: GL_TYPES.FLOAT,\n  float32x3: GL_TYPES.FLOAT,\n  float32x4: GL_TYPES.FLOAT,\n  uint32: GL_TYPES.UNSIGNED_INT,\n  uint32x2: GL_TYPES.UNSIGNED_INT,\n  uint32x3: GL_TYPES.UNSIGNED_INT,\n  uint32x4: GL_TYPES.UNSIGNED_INT,\n  sint32: GL_TYPES.INT,\n  sint32x2: GL_TYPES.INT,\n  sint32x3: GL_TYPES.INT,\n  sint32x4: GL_TYPES.INT\n};\nfunction getGlTypeFromFormat(format) {\n  return infoMap[format] ?? infoMap.float32;\n}\n\n\n//# sourceMappingURL=getGlTypeFromFormat.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/geometry/GlGeometrySystem.mjs\n\n\n\n\n\n"use strict";\nconst topologyToGlMap = {\n  "point-list": 0,\n  "line-list": 1,\n  "line-strip": 3,\n  "triangle-list": 4,\n  "triangle-strip": 5\n};\nclass GlGeometrySystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._geometryVaoHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._activeGeometry = null;\n    this._activeVao = null;\n    this.hasVao = true;\n    this.hasInstance = true;\n  }\n  /** Sets up the renderer context and necessary buffers. */\n  contextChange() {\n    const gl = this.gl = this._renderer.gl;\n    if (!this._renderer.context.supports.vertexArrayObject) {\n      throw new Error("[PixiJS] Vertex Array Objects are not supported on this device");\n    }\n    const nativeVaoExtension = this._renderer.context.extensions.vertexArrayObject;\n    if (nativeVaoExtension) {\n      gl.createVertexArray = () => nativeVaoExtension.createVertexArrayOES();\n      gl.bindVertexArray = (vao) => nativeVaoExtension.bindVertexArrayOES(vao);\n      gl.deleteVertexArray = (vao) => nativeVaoExtension.deleteVertexArrayOES(vao);\n    }\n    const nativeInstancedExtension = this._renderer.context.extensions.vertexAttribDivisorANGLE;\n    if (nativeInstancedExtension) {\n      gl.drawArraysInstanced = (a, b, c, d) => {\n        nativeInstancedExtension.drawArraysInstancedANGLE(a, b, c, d);\n      };\n      gl.drawElementsInstanced = (a, b, c, d, e) => {\n        nativeInstancedExtension.drawElementsInstancedANGLE(a, b, c, d, e);\n      };\n      gl.vertexAttribDivisor = (a, b) => nativeInstancedExtension.vertexAttribDivisorANGLE(a, b);\n    }\n    this._activeGeometry = null;\n    this._activeVao = null;\n    this._geometryVaoHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Binds geometry so that is can be drawn. Creating a Vao if required\n   * @param geometry - Instance of geometry to bind.\n   * @param program - Instance of program to use vao for.\n   */\n  bind(geometry, program) {\n    const gl = this.gl;\n    this._activeGeometry = geometry;\n    const vao = this.getVao(geometry, program);\n    if (this._activeVao !== vao) {\n      this._activeVao = vao;\n      gl.bindVertexArray(vao);\n    }\n    this.updateBuffers();\n  }\n  /** Reset and unbind any active VAO and geometry. */\n  reset() {\n    this.unbind();\n  }\n  /** Update buffers of the currently bound geometry. */\n  updateBuffers() {\n    const geometry = this._activeGeometry;\n    const bufferSystem = this._renderer.buffer;\n    for (let i = 0; i < geometry.buffers.length; i++) {\n      const buffer = geometry.buffers[i];\n      bufferSystem.updateBuffer(buffer);\n    }\n  }\n  /**\n   * Check compatibility between a geometry and a program\n   * @param geometry - Geometry instance.\n   * @param program - Program instance.\n   */\n  checkCompatibility(geometry, program) {\n    const geometryAttributes = geometry.attributes;\n    const shaderAttributes = program._attributeData;\n    for (const j in shaderAttributes) {\n      if (!geometryAttributes[j]) {\n        throw new Error(`shader and geometry incompatible, geometry missing the "${j}" attribute`);\n      }\n    }\n  }\n  /**\n   * Takes a geometry and program and generates a unique signature for them.\n   * @param geometry - To get signature from.\n   * @param program - To test geometry against.\n   * @returns - Unique signature of the geometry and program\n   */\n  getSignature(geometry, program) {\n    const attribs = geometry.attributes;\n    const shaderAttributes = program._attributeData;\n    const strings = ["g", geometry.uid];\n    for (const i in attribs) {\n      if (shaderAttributes[i]) {\n        strings.push(i, shaderAttributes[i].location);\n      }\n    }\n    return strings.join("-");\n  }\n  getVao(geometry, program) {\n    return this._geometryVaoHash[geometry.uid]?.[program._key] || this.initGeometryVao(geometry, program);\n  }\n  /**\n   * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\n   * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the\n   * attribute locations.\n   * @param geometry - Instance of geometry to to generate Vao for.\n   * @param program\n   * @param _incRefCount - Increment refCount of all geometry buffers.\n   */\n  initGeometryVao(geometry, program, _incRefCount = true) {\n    const gl = this._renderer.gl;\n    const bufferSystem = this._renderer.buffer;\n    this._renderer.shader._getProgramData(program);\n    this.checkCompatibility(geometry, program);\n    const signature = this.getSignature(geometry, program);\n    if (!this._geometryVaoHash[geometry.uid]) {\n      this._geometryVaoHash[geometry.uid] = /* @__PURE__ */ Object.create(null);\n      geometry.on("destroy", this.onGeometryDestroy, this);\n    }\n    const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n    let vao = vaoObjectHash[signature];\n    if (vao) {\n      vaoObjectHash[program._key] = vao;\n      return vao;\n    }\n    (0,ensureAttributes/* ensureAttributes */.B)(geometry, program._attributeData);\n    const buffers = geometry.buffers;\n    vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    for (let i = 0; i < buffers.length; i++) {\n      const buffer = buffers[i];\n      bufferSystem.bind(buffer);\n    }\n    this.activateVao(geometry, program);\n    vaoObjectHash[program._key] = vao;\n    vaoObjectHash[signature] = vao;\n    gl.bindVertexArray(null);\n    return vao;\n  }\n  /**\n   * Disposes geometry.\n   * @param geometry - Geometry with buffers. Only VAO will be disposed\n   * @param [contextLost=false] - If context was lost, we suppress deleteVertexArray\n   */\n  onGeometryDestroy(geometry, contextLost) {\n    const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n    const gl = this.gl;\n    if (vaoObjectHash) {\n      if (contextLost) {\n        for (const i in vaoObjectHash) {\n          if (this._activeVao !== vaoObjectHash[i]) {\n            this.unbind();\n          }\n          gl.deleteVertexArray(vaoObjectHash[i]);\n        }\n      }\n      this._geometryVaoHash[geometry.uid] = null;\n    }\n  }\n  /**\n   * Dispose all WebGL resources of all managed geometries.\n   * @param [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n   */\n  destroyAll(contextLost = false) {\n    const gl = this.gl;\n    for (const i in this._geometryVaoHash) {\n      if (contextLost) {\n        for (const j in this._geometryVaoHash[i]) {\n          const vaoObjectHash = this._geometryVaoHash[i];\n          if (this._activeVao !== vaoObjectHash) {\n            this.unbind();\n          }\n          gl.deleteVertexArray(vaoObjectHash[j]);\n        }\n      }\n      this._geometryVaoHash[i] = null;\n    }\n  }\n  /**\n   * Activate vertex array object.\n   * @param geometry - Geometry instance.\n   * @param program - Shader program instance.\n   */\n  activateVao(geometry, program) {\n    const gl = this._renderer.gl;\n    const bufferSystem = this._renderer.buffer;\n    const attributes = geometry.attributes;\n    if (geometry.indexBuffer) {\n      bufferSystem.bind(geometry.indexBuffer);\n    }\n    let lastBuffer = null;\n    for (const j in attributes) {\n      const attribute = attributes[j];\n      const buffer = attribute.buffer;\n      const glBuffer = bufferSystem.getGlBuffer(buffer);\n      if (program._attributeData[j]) {\n        if (lastBuffer !== glBuffer) {\n          bufferSystem.bind(buffer);\n          lastBuffer = glBuffer;\n        }\n        const location = attribute.location;\n        gl.enableVertexAttribArray(location);\n        const attributeInfo = (0,getAttributeInfoFromFormat/* getAttributeInfoFromFormat */.v)(attribute.format);\n        gl.vertexAttribPointer(\n          location,\n          attributeInfo.size,\n          getGlTypeFromFormat(attribute.format),\n          attributeInfo.normalised,\n          attribute.stride,\n          attribute.offset\n        );\n        if (attribute.instance) {\n          if (this.hasInstance) {\n            gl.vertexAttribDivisor(location, 1);\n          } else {\n            throw new Error("geometry error, GPU Instancing is not supported on this device");\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Draws the currently bound geometry.\n   * @param topology - The type primitive to render.\n   * @param size - The number of elements to be rendered. If not specified, all vertices after the\n   *  starting vertex will be drawn.\n   * @param start - The starting vertex in the geometry to start drawing from. If not specified,\n   *  drawing will start from the first vertex.\n   * @param instanceCount - The number of instances of the set of elements to execute. If not specified,\n   *  all instances will be drawn.\n   */\n  draw(topology, size, start, instanceCount) {\n    const { gl } = this._renderer;\n    const geometry = this._activeGeometry;\n    const glTopology = topologyToGlMap[geometry.topology || topology];\n    instanceCount || (instanceCount = geometry.instanceCount);\n    if (geometry.indexBuffer) {\n      const byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n      const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n      if (instanceCount > 1) {\n        gl.drawElementsInstanced(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount);\n      } else {\n        gl.drawElements(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize);\n      }\n    } else if (instanceCount > 1) {\n      gl.drawArraysInstanced(glTopology, start || 0, size || geometry.getSize(), instanceCount);\n    } else {\n      gl.drawArrays(glTopology, start || 0, size || geometry.getSize());\n    }\n    return this;\n  }\n  /** Unbind/reset everything. */\n  unbind() {\n    this.gl.bindVertexArray(null);\n    this._activeVao = null;\n    this._activeGeometry = null;\n  }\n  destroy() {\n    this._renderer = null;\n    this.gl = null;\n    this._activeVao = null;\n    this._activeGeometry = null;\n  }\n}\n/** @ignore */\nGlGeometrySystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem\n  ],\n  name: "geometry"\n};\n\n\n//# sourceMappingURL=GlGeometrySystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/geometry/Geometry.mjs + 2 modules\nvar Geometry = __webpack_require__(1980);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/TextureSource.mjs + 2 modules\nvar TextureSource = __webpack_require__(5206);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgram.mjs + 7 modules\nvar GlProgram = __webpack_require__(5196);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/GlBackBufferSystem.mjs\n\n\n\n\n\n\n\n\n\n"use strict";\nconst bigTriangleGeometry = new Geometry/* Geometry */.Z({\n  attributes: {\n    aPosition: [\n      -1,\n      -1,\n      // Bottom left corner\n      3,\n      -1,\n      // Bottom right corner, extending beyond right edge\n      -1,\n      3\n      // Top left corner, extending beyond top edge\n    ]\n  }\n});\nconst _GlBackBufferSystem = class _GlBackBufferSystem {\n  constructor(renderer) {\n    /** if true, the back buffer is used */\n    this.useBackBuffer = false;\n    this._useBackBufferThisRender = false;\n    this._renderer = renderer;\n  }\n  init(options = {}) {\n    const { useBackBuffer, antialias } = { ..._GlBackBufferSystem.defaultOptions, ...options };\n    this.useBackBuffer = useBackBuffer;\n    this._antialias = antialias;\n    if (!this._renderer.context.supports.msaa) {\n      (0,warn/* warn */.Z)("antialiasing, is not supported on when using the back buffer");\n      this._antialias = false;\n    }\n    this._state = State/* State */.Z.for2d();\n    const bigTriangleProgram = new GlProgram/* GlProgram */.J({\n      vertex: `\n                attribute vec2 aPosition;\n                out vec2 vUv;\n\n                void main() {\n                    gl_Position = gl_Position = vec4(aPosition, 0.0, 1.0);\n\n                    vUv = (aPosition + 1.0) / 2.0;\n\n                    // flip dem UVs\n                    vUv.y = 1.0 - vUv.y;\n                }`,\n      fragment: `\n                in vec2 vUv;\n                out vec4 finalColor;\n\n                uniform sampler2D uTexture;\n\n                void main() {\n                    finalColor = texture(uTexture, vUv);\n                }`,\n      name: "big-triangle"\n    });\n    this._bigTriangleShader = new Shader/* Shader */.e({\n      glProgram: bigTriangleProgram,\n      resources: {\n        uTexture: Texture/* Texture */.x.WHITE.source\n      }\n    });\n  }\n  /**\n   * This is called before the RenderTargetSystem is started. This is where\n   * we replace the target with the back buffer if required.\n   * @param options - The options for this render.\n   */\n  renderStart(options) {\n    const renderTarget = this._renderer.renderTarget.getRenderTarget(options.target);\n    this._useBackBufferThisRender = this.useBackBuffer && !!renderTarget.isRoot;\n    if (this._useBackBufferThisRender) {\n      const renderTarget2 = this._renderer.renderTarget.getRenderTarget(options.target);\n      this._targetTexture = renderTarget2.colorTexture;\n      options.target = this._getBackBufferTexture(renderTarget2.colorTexture);\n    }\n  }\n  renderEnd() {\n    this._presentBackBuffer();\n  }\n  _presentBackBuffer() {\n    const renderer = this._renderer;\n    renderer.renderTarget.finishRenderPass();\n    if (!this._useBackBufferThisRender)\n      return;\n    renderer.renderTarget.bind(this._targetTexture, false);\n    this._bigTriangleShader.resources.uTexture = this._backBufferTexture.source;\n    renderer.encoder.draw({\n      geometry: bigTriangleGeometry,\n      shader: this._bigTriangleShader,\n      state: this._state\n    });\n  }\n  _getBackBufferTexture(targetSourceTexture) {\n    this._backBufferTexture = this._backBufferTexture || new Texture/* Texture */.x({\n      source: new TextureSource/* TextureSource */.p({\n        width: targetSourceTexture.width,\n        height: targetSourceTexture.height,\n        resolution: targetSourceTexture._resolution,\n        antialias: this._antialias\n      })\n    });\n    this._backBufferTexture.source.resize(\n      targetSourceTexture.width,\n      targetSourceTexture.height,\n      targetSourceTexture._resolution\n    );\n    return this._backBufferTexture;\n  }\n  /** destroys the back buffer */\n  destroy() {\n    if (this._backBufferTexture) {\n      this._backBufferTexture.destroy();\n      this._backBufferTexture = null;\n    }\n  }\n};\n/** @ignore */\n_GlBackBufferSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem\n  ],\n  name: "backBuffer",\n  priority: 1\n};\n/** default options for the back buffer system */\n_GlBackBufferSystem.defaultOptions = {\n  useBackBuffer: false\n};\nlet GlBackBufferSystem = _GlBackBufferSystem;\n\n\n//# sourceMappingURL=GlBackBufferSystem.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/GlColorMaskSystem.mjs\n\n\n"use strict";\nclass GlColorMaskSystem {\n  constructor(renderer) {\n    this._colorMaskCache = 15;\n    this._renderer = renderer;\n  }\n  setMask(colorMask) {\n    if (this._colorMaskCache === colorMask)\n      return;\n    this._colorMaskCache = colorMask;\n    this._renderer.gl.colorMask(\n      !!(colorMask & 8),\n      !!(colorMask & 4),\n      !!(colorMask & 2),\n      !!(colorMask & 1)\n    );\n  }\n}\n/** @ignore */\nGlColorMaskSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem\n  ],\n  name: "colorMask"\n};\n\n\n//# sourceMappingURL=GlColorMaskSystem.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/GlEncoderSystem.mjs\n\n\n"use strict";\nclass GlEncoderSystem {\n  constructor(renderer) {\n    this.commandFinished = Promise.resolve();\n    this._renderer = renderer;\n  }\n  setGeometry(geometry, shader) {\n    this._renderer.geometry.bind(geometry, shader.glProgram);\n  }\n  finishRenderPass() {\n  }\n  draw(options) {\n    const renderer = this._renderer;\n    const { geometry, shader, state, skipSync, topology: type, size, start, instanceCount } = options;\n    renderer.shader.bind(shader, skipSync);\n    renderer.geometry.bind(geometry, renderer.shader._activeProgram);\n    if (state) {\n      renderer.state.set(state);\n    }\n    renderer.geometry.draw(type, size, start, instanceCount ?? geometry.instanceCount);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGlEncoderSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem\n  ],\n  name: "encoder"\n};\n\n\n//# sourceMappingURL=GlEncoderSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuStencilModesToPixi.mjs\nvar GpuStencilModesToPixi = __webpack_require__(647);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/state/const.mjs\nvar state_const = __webpack_require__(2475);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/GlStencilSystem.mjs\n\n\n\n\n"use strict";\nclass GlStencilSystem {\n  constructor(renderer) {\n    this._stencilCache = {\n      enabled: false,\n      stencilReference: 0,\n      stencilMode: state_const/* STENCIL_MODES */.D.NONE\n    };\n    this._renderTargetStencilState = /* @__PURE__ */ Object.create(null);\n    renderer.renderTarget.onRenderTargetChange.add(this);\n  }\n  contextChange(gl) {\n    this._gl = gl;\n    this._comparisonFuncMapping = {\n      always: gl.ALWAYS,\n      never: gl.NEVER,\n      equal: gl.EQUAL,\n      "not-equal": gl.NOTEQUAL,\n      less: gl.LESS,\n      "less-equal": gl.LEQUAL,\n      greater: gl.GREATER,\n      "greater-equal": gl.GEQUAL\n    };\n    this._stencilOpsMapping = {\n      keep: gl.KEEP,\n      zero: gl.ZERO,\n      replace: gl.REPLACE,\n      invert: gl.INVERT,\n      "increment-clamp": gl.INCR,\n      "decrement-clamp": gl.DECR,\n      "increment-wrap": gl.INCR_WRAP,\n      "decrement-wrap": gl.DECR_WRAP\n    };\n  }\n  onRenderTargetChange(renderTarget) {\n    if (this._activeRenderTarget === renderTarget)\n      return;\n    this._activeRenderTarget = renderTarget;\n    let stencilState = this._renderTargetStencilState[renderTarget.uid];\n    if (!stencilState) {\n      stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n        stencilMode: state_const/* STENCIL_MODES */.D.DISABLED,\n        stencilReference: 0\n      };\n    }\n    this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n  }\n  setStencilMode(stencilMode, stencilReference) {\n    const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n    const gl = this._gl;\n    const mode = GpuStencilModesToPixi/* GpuStencilModesToPixi */.L[stencilMode];\n    const _stencilCache = this._stencilCache;\n    stencilState.stencilMode = stencilMode;\n    stencilState.stencilReference = stencilReference;\n    if (stencilMode === state_const/* STENCIL_MODES */.D.DISABLED) {\n      if (this._stencilCache.enabled) {\n        this._stencilCache.enabled = false;\n        gl.disable(gl.STENCIL_TEST);\n      }\n      return;\n    }\n    if (!this._stencilCache.enabled) {\n      this._stencilCache.enabled = true;\n      gl.enable(gl.STENCIL_TEST);\n    }\n    if (stencilMode !== _stencilCache.stencilMode || _stencilCache.stencilReference !== stencilReference) {\n      _stencilCache.stencilMode = stencilMode;\n      _stencilCache.stencilReference = stencilReference;\n      gl.stencilFunc(this._comparisonFuncMapping[mode.stencilBack.compare], stencilReference, 255);\n      gl.stencilOp(gl.KEEP, gl.KEEP, this._stencilOpsMapping[mode.stencilBack.passOp]);\n    }\n  }\n}\n/** @ignore */\nGlStencilSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem\n  ],\n  name: "stencil"\n};\n\n\n//# sourceMappingURL=GlStencilSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/UboSystem.mjs\nvar UboSystem = __webpack_require__(8809);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/utils/createUboElementsSTD40.mjs\n\nconst WGSL_TO_STD40_SIZE = {\n  f32: 4,\n  "vec2<f32>": 8,\n  "vec3<f32>": 12,\n  "vec4<f32>": 16,\n  "mat2x2<f32>": 16 * 2,\n  "mat3x3<f32>": 16 * 3,\n  "mat4x4<f32>": 16 * 4\n  // TODO - not essential for now but support these in the future\n  // int:      4,\n  // ivec2:    8,\n  // ivec3:    12,\n  // ivec4:    16,\n  // uint:     4,\n  // uvec2:    8,\n  // uvec3:    12,\n  // uvec4:    16,\n  // bool:     4,\n  // bvec2:    8,\n  // bvec3:    12,\n  // bvec4:    16,\n  // mat2:     16 * 2,\n  // mat3:     16 * 3,\n  // mat4:     16 * 4,\n};\nfunction createUboElementsSTD40(uniformData) {\n  const uboElements = uniformData.map((data) => ({\n    data,\n    offset: 0,\n    size: 0\n  }));\n  let size = 0;\n  let chunkSize = 0;\n  let offset = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    size = WGSL_TO_STD40_SIZE[uboElement.data.type];\n    if (!size) {\n      throw new Error(`Unknown type ${uboElement.data.type}`);\n    }\n    if (uboElement.data.size > 1) {\n      size = Math.max(size, 16) * uboElement.data.size;\n    }\n    uboElement.size = size;\n    if (chunkSize % size !== 0 && chunkSize < 16) {\n      const lineUpValue = chunkSize % size % 16;\n      chunkSize += lineUpValue;\n      offset += lineUpValue;\n    }\n    if (chunkSize + size > 16) {\n      offset = Math.ceil(offset / 16) * 16;\n      uboElement.offset = offset;\n      offset += size;\n      chunkSize = size;\n    } else {\n      uboElement.offset = offset;\n      chunkSize += size;\n      offset += size;\n    }\n  }\n  offset = Math.ceil(offset / 16) * 16;\n  return { uboElements, size: offset };\n}\n\n\n//# sourceMappingURL=createUboElementsSTD40.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/createUboSyncFunction.mjs\nvar createUboSyncFunction = __webpack_require__(9758);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uboSyncFunctions.mjs\nvar uboSyncFunctions = __webpack_require__(5746);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/utils/generateArraySyncSTD40.mjs\n\n\n"use strict";\nfunction generateArraySyncSTD40(uboElement, offsetToAdd) {\n  const rowSize = Math.max(WGSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);\n  const elementSize = uboElement.data.value.length / uboElement.data.size;\n  const remainder = (4 - elementSize % 4) % 4;\n  return `\n        v = uv.${uboElement.data.name};\n        offset += ${offsetToAdd};\n\n        arrayOffset = offset;\n\n        t = 0;\n\n        for(var i=0; i < ${uboElement.data.size * rowSize}; i++)\n        {\n            for(var j = 0; j < ${elementSize}; j++)\n            {\n                data[arrayOffset++] = v[t++];\n            }\n            ${remainder !== 0 ? `arrayOffset += ${remainder};` : ""}\n        }\n    `;\n}\n\n\n//# sourceMappingURL=generateArraySyncSTD40.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/utils/createUboSyncSTD40.mjs\n\n\n\n\n"use strict";\nfunction createUboSyncFunctionSTD40(uboElements) {\n  return (0,createUboSyncFunction/* createUboSyncFunction */.S)(\n    uboElements,\n    "uboStd40",\n    generateArraySyncSTD40,\n    uboSyncFunctions/* uboSyncFunctionsSTD40 */.d\n  );\n}\n\n\n//# sourceMappingURL=createUboSyncSTD40.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/GlUboSystem.mjs\n\n\n\n\n\n"use strict";\nclass GlUboSystem extends UboSystem/* UboSystem */.L {\n  constructor() {\n    super({\n      createUboElements: createUboElementsSTD40,\n      generateUboSync: createUboSyncFunctionSTD40\n    });\n  }\n}\n/** @ignore */\nGlUboSystem.extension = {\n  type: [Extensions/* ExtensionType */.nw.WebGLSystem],\n  name: "ubo"\n};\n\n\n//# sourceMappingURL=GlUboSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTargetSystem.mjs + 2 modules\nvar RenderTargetSystem = __webpack_require__(2028);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/maths/shapes/Rectangle.mjs\nvar Rectangle = __webpack_require__(3904);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/CanvasSource.mjs\nvar CanvasSource = __webpack_require__(6914);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/const.mjs\nvar gl_const = __webpack_require__(6582);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/GlRenderTarget.mjs\n\nclass GlRenderTarget {\n  constructor() {\n    this.width = -1;\n    this.height = -1;\n    this.msaa = false;\n    this.msaaRenderBuffer = [];\n  }\n}\n\n\n//# sourceMappingURL=GlRenderTarget.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/renderTarget/GlRenderTargetAdaptor.mjs\n\n\n\n\n\n\n"use strict";\nclass GlRenderTargetAdaptor {\n  constructor() {\n    this._clearColorCache = [0, 0, 0, 0];\n    this._viewPortCache = new Rectangle/* Rectangle */.A();\n  }\n  init(renderer, renderTargetSystem) {\n    this._renderer = renderer;\n    this._renderTargetSystem = renderTargetSystem;\n    renderer.runners.contextChange.add(this);\n  }\n  contextChange() {\n    this._clearColorCache = [0, 0, 0, 0];\n    this._viewPortCache = new Rectangle/* Rectangle */.A();\n  }\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    const renderTargetSystem = this._renderTargetSystem;\n    const renderer = this._renderer;\n    const glRenderTarget = renderTargetSystem.getGpuRenderTarget(sourceRenderSurfaceTexture);\n    const gl = renderer.gl;\n    this.finishRenderPass(sourceRenderSurfaceTexture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n    renderer.texture.bind(destinationTexture, 0);\n    gl.copyTexSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      originDest.x,\n      originDest.y,\n      originSrc.x,\n      originSrc.y,\n      size.width,\n      size.height\n    );\n    return destinationTexture;\n  }\n  startRenderPass(renderTarget, clear = true, clearColor, viewport) {\n    const renderTargetSystem = this._renderTargetSystem;\n    const source = renderTarget.colorTexture;\n    const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    let viewPortY = viewport.y;\n    if (renderTarget.isRoot) {\n      viewPortY = source.pixelHeight - viewport.height;\n    }\n    renderTarget.colorTextures.forEach((texture) => {\n      this._renderer.texture.unbind(texture);\n    });\n    const gl = this._renderer.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, gpuRenderTarget.framebuffer);\n    const viewPortCache = this._viewPortCache;\n    if (viewPortCache.x !== viewport.x || viewPortCache.y !== viewPortY || viewPortCache.width !== viewport.width || viewPortCache.height !== viewport.height) {\n      viewPortCache.x = viewport.x;\n      viewPortCache.y = viewPortY;\n      viewPortCache.width = viewport.width;\n      viewPortCache.height = viewport.height;\n      gl.viewport(\n        viewport.x,\n        viewPortY,\n        viewport.width,\n        viewport.height\n      );\n    }\n    if (!gpuRenderTarget.depthStencilRenderBuffer && (renderTarget.stencil || renderTarget.depth)) {\n      this._initStencil(gpuRenderTarget);\n    }\n    this.clear(renderTarget, clear, clearColor);\n  }\n  finishRenderPass(renderTarget) {\n    const renderTargetSystem = this._renderTargetSystem;\n    const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    if (!glRenderTarget.msaa)\n      return;\n    const gl = this._renderer.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, glRenderTarget.framebuffer);\n    gl.blitFramebuffer(\n      0,\n      0,\n      glRenderTarget.width,\n      glRenderTarget.height,\n      0,\n      0,\n      glRenderTarget.width,\n      glRenderTarget.height,\n      gl.COLOR_BUFFER_BIT,\n      gl.NEAREST\n    );\n    gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.framebuffer);\n  }\n  initGpuRenderTarget(renderTarget) {\n    const renderer = this._renderer;\n    const gl = renderer.gl;\n    const glRenderTarget = new GlRenderTarget();\n    if (CanvasSource/* CanvasSource */.D.test(renderTarget.colorTexture.resource)) {\n      glRenderTarget.framebuffer = null;\n      return glRenderTarget;\n    }\n    this._initColor(renderTarget, glRenderTarget);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    return glRenderTarget;\n  }\n  clear(_renderTarget, clear, clearColor) {\n    if (!clear)\n      return;\n    const renderTargetSystem = this._renderTargetSystem;\n    if (typeof clear === "boolean") {\n      clear = clear ? gl_const/* CLEAR */.E.ALL : gl_const/* CLEAR */.E.NONE;\n    }\n    const gl = this._renderer.gl;\n    if (clear & gl_const/* CLEAR */.E.COLOR) {\n      clearColor ?? (clearColor = renderTargetSystem.defaultClearColor);\n      const clearColorCache = this._clearColorCache;\n      const clearColorArray = clearColor;\n      if (clearColorCache[0] !== clearColorArray[0] || clearColorCache[1] !== clearColorArray[1] || clearColorCache[2] !== clearColorArray[2] || clearColorCache[3] !== clearColorArray[3]) {\n        clearColorCache[0] = clearColorArray[0];\n        clearColorCache[1] = clearColorArray[1];\n        clearColorCache[2] = clearColorArray[2];\n        clearColorCache[3] = clearColorArray[3];\n        gl.clearColor(clearColorArray[0], clearColorArray[1], clearColorArray[2], clearColorArray[3]);\n      }\n    }\n    gl.clear(clear);\n  }\n  resizeGpuRenderTarget(renderTarget) {\n    if (renderTarget.isRoot)\n      return;\n    const renderTargetSystem = this._renderTargetSystem;\n    const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    this._resizeColor(renderTarget, glRenderTarget);\n    if (renderTarget.stencil) {\n      this._resizeStencil(glRenderTarget);\n    }\n  }\n  _initColor(renderTarget, glRenderTarget) {\n    const renderer = this._renderer;\n    const gl = renderer.gl;\n    const resolveTargetFramebuffer = gl.createFramebuffer();\n    glRenderTarget.resolveTargetFramebuffer = resolveTargetFramebuffer;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, resolveTargetFramebuffer);\n    glRenderTarget.width = renderTarget.colorTexture.source.pixelWidth;\n    glRenderTarget.height = renderTarget.colorTexture.source.pixelHeight;\n    renderTarget.colorTextures.forEach((colorTexture, i) => {\n      const source = colorTexture.source;\n      if (source.antialias) {\n        if (renderer.context.supports.msaa) {\n          glRenderTarget.msaa = true;\n        } else {\n          (0,warn/* warn */.Z)("[RenderTexture] Antialiasing on textures is not supported in WebGL1");\n        }\n      }\n      renderer.texture.bindSource(source, 0);\n      const glSource = renderer.texture.getGlSource(source);\n      const glTexture = glSource.texture;\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0 + i,\n        3553,\n        // texture.target,\n        glTexture,\n        0\n      );\n    });\n    if (glRenderTarget.msaa) {\n      const viewFramebuffer = gl.createFramebuffer();\n      glRenderTarget.framebuffer = viewFramebuffer;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n      renderTarget.colorTextures.forEach((_, i) => {\n        const msaaRenderBuffer = gl.createRenderbuffer();\n        glRenderTarget.msaaRenderBuffer[i] = msaaRenderBuffer;\n      });\n    } else {\n      glRenderTarget.framebuffer = resolveTargetFramebuffer;\n    }\n    this._resizeColor(renderTarget, glRenderTarget);\n  }\n  _resizeColor(renderTarget, glRenderTarget) {\n    const source = renderTarget.colorTexture.source;\n    glRenderTarget.width = source.pixelWidth;\n    glRenderTarget.height = source.pixelHeight;\n    renderTarget.colorTextures.forEach((colorTexture, i) => {\n      if (i === 0)\n        return;\n      colorTexture.source.resize(source.width, source.height, source._resolution);\n    });\n    if (glRenderTarget.msaa) {\n      const renderer = this._renderer;\n      const gl = renderer.gl;\n      const viewFramebuffer = glRenderTarget.framebuffer;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n      renderTarget.colorTextures.forEach((colorTexture, i) => {\n        const source2 = colorTexture.source;\n        renderer.texture.bindSource(source2, 0);\n        const glSource = renderer.texture.getGlSource(source2);\n        const glInternalFormat = glSource.internalFormat;\n        const msaaRenderBuffer = glRenderTarget.msaaRenderBuffer[i];\n        gl.bindRenderbuffer(\n          gl.RENDERBUFFER,\n          msaaRenderBuffer\n        );\n        gl.renderbufferStorageMultisample(\n          gl.RENDERBUFFER,\n          4,\n          glInternalFormat,\n          source2.pixelWidth,\n          source2.pixelHeight\n        );\n        gl.framebufferRenderbuffer(\n          gl.FRAMEBUFFER,\n          gl.COLOR_ATTACHMENT0 + i,\n          gl.RENDERBUFFER,\n          msaaRenderBuffer\n        );\n      });\n    }\n  }\n  _initStencil(glRenderTarget) {\n    if (glRenderTarget.framebuffer === null)\n      return;\n    const gl = this._renderer.gl;\n    const depthStencilRenderBuffer = gl.createRenderbuffer();\n    glRenderTarget.depthStencilRenderBuffer = depthStencilRenderBuffer;\n    gl.bindRenderbuffer(\n      gl.RENDERBUFFER,\n      depthStencilRenderBuffer\n    );\n    gl.framebufferRenderbuffer(\n      gl.FRAMEBUFFER,\n      gl.DEPTH_STENCIL_ATTACHMENT,\n      gl.RENDERBUFFER,\n      depthStencilRenderBuffer\n    );\n    this._resizeStencil(glRenderTarget);\n  }\n  _resizeStencil(glRenderTarget) {\n    const gl = this._renderer.gl;\n    gl.bindRenderbuffer(\n      gl.RENDERBUFFER,\n      glRenderTarget.depthStencilRenderBuffer\n    );\n    if (glRenderTarget.msaa) {\n      gl.renderbufferStorageMultisample(\n        gl.RENDERBUFFER,\n        4,\n        gl.DEPTH24_STENCIL8,\n        glRenderTarget.width,\n        glRenderTarget.height\n      );\n    } else {\n      gl.renderbufferStorage(\n        gl.RENDERBUFFER,\n        this._renderer.context.webGLVersion === 2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n        glRenderTarget.width,\n        glRenderTarget.height\n      );\n    }\n  }\n}\n\n\n//# sourceMappingURL=GlRenderTargetAdaptor.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/renderTarget/GlRenderTargetSystem.mjs\n\n\n\n\n"use strict";\nclass GlRenderTargetSystem extends RenderTargetSystem/* RenderTargetSystem */.l {\n  constructor(renderer) {\n    super(renderer);\n    this.adaptor = new GlRenderTargetAdaptor();\n    this.adaptor.init(renderer, this);\n  }\n}\n/** @ignore */\nGlRenderTargetSystem.extension = {\n  type: [Extensions/* ExtensionType */.nw.WebGLSystem],\n  name: "renderTarget"\n};\n\n\n//# sourceMappingURL=GlRenderTargetSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/buffer/BufferResource.mjs\nvar BufferResource = __webpack_require__(6496);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/GenerateShaderSyncCode.mjs\n\n\n\n\n"use strict";\nfunction generateShaderSyncCode(shader, shaderSystem) {\n  const funcFragments = [];\n  const headerFragments = [`\n        var g = s.groups;\n        var sS = r.shader;\n        var p = s.glProgram;\n        var ugS = r.uniformGroup;\n        var resources;\n    `];\n  let addedTextreSystem = false;\n  let blockIndex = 0;\n  let textureCount = 0;\n  const programData = shaderSystem._getProgramData(shader.glProgram);\n  for (const i in shader.groups) {\n    const group = shader.groups[i];\n    funcFragments.push(`\n            resources = g[${i}].resources;\n        `);\n    for (const j in group.resources) {\n      const resource = group.resources[j];\n      if (resource instanceof UniformGroup/* UniformGroup */.o) {\n        if (resource.ubo) {\n          funcFragments.push(`\n                        sS.bindUniformBlock(\n                            resources[${j}],\n                            sS._uniformBindMap[${i}[${j}],\n                            ${blockIndex++}\n                        );\n                    `);\n        } else {\n          funcFragments.push(`\n                        ugS.updateUniformGroup(resources[${j}], p, sD);\n                    `);\n        }\n      } else if (resource instanceof BufferResource/* BufferResource */.q) {\n        funcFragments.push(`\n                    sS.bindUniformBlock(\n                        resources[${j}],\n                        sS._uniformBindMap[${i}[${j}],\n                        ${blockIndex++}\n                    );\n                `);\n      } else if (resource instanceof TextureSource/* TextureSource */.p) {\n        const uniformName = shader._uniformBindMap[i][j];\n        const uniformData = programData.uniformData[uniformName];\n        if (uniformData) {\n          if (!addedTextreSystem) {\n            addedTextreSystem = true;\n            headerFragments.push(`\n                        var tS = r.texture;\n                        `);\n          }\n          shaderSystem._gl.uniform1i(uniformData.location, textureCount);\n          funcFragments.push(`\n                        tS.bind(resources[${j}], ${textureCount});\n                    `);\n          textureCount++;\n        }\n      }\n    }\n  }\n  const functionSource = [...headerFragments, ...funcFragments].join("\\n");\n  return new Function("r", "s", "sD", functionSource);\n}\n\n\n//# sourceMappingURL=GenerateShaderSyncCode.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgramData.mjs\n\nclass IGLUniformData {\n}\nclass GlProgramData {\n  /**\n   * Makes a new Pixi program.\n   * @param program - webgl program\n   * @param uniformData - uniforms\n   */\n  constructor(program, uniformData) {\n    this.program = program;\n    this.uniformData = uniformData;\n    this.uniformGroups = {};\n    this.uniformDirtyGroups = {};\n    this.uniformBlockBindings = {};\n  }\n  /** Destroys this program. */\n  destroy() {\n    this.uniformData = null;\n    this.uniformGroups = null;\n    this.uniformDirtyGroups = null;\n    this.uniformBlockBindings = null;\n    this.program = null;\n  }\n}\n\n\n//# sourceMappingURL=GlProgramData.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/compileShader.mjs\n\nfunction compileShader(gl, type, src) {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, src);\n  gl.compileShader(shader);\n  return shader;\n}\n\n\n//# sourceMappingURL=compileShader.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/defaultValue.mjs\n\nfunction booleanArray(size) {\n  const array = new Array(size);\n  for (let i = 0; i < array.length; i++) {\n    array[i] = false;\n  }\n  return array;\n}\nfunction defaultValue(type, size) {\n  switch (type) {\n    case "float":\n      return 0;\n    case "vec2":\n      return new Float32Array(2 * size);\n    case "vec3":\n      return new Float32Array(3 * size);\n    case "vec4":\n      return new Float32Array(4 * size);\n    case "int":\n    case "uint":\n    case "sampler2D":\n    case "sampler2DArray":\n      return 0;\n    case "ivec2":\n      return new Int32Array(2 * size);\n    case "ivec3":\n      return new Int32Array(3 * size);\n    case "ivec4":\n      return new Int32Array(4 * size);\n    case "uvec2":\n      return new Uint32Array(2 * size);\n    case "uvec3":\n      return new Uint32Array(3 * size);\n    case "uvec4":\n      return new Uint32Array(4 * size);\n    case "bool":\n      return false;\n    case "bvec2":\n      return booleanArray(2 * size);\n    case "bvec3":\n      return booleanArray(3 * size);\n    case "bvec4":\n      return booleanArray(4 * size);\n    case "mat2":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        1\n      ]);\n    case "mat3":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        1\n      ]);\n    case "mat4":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n      ]);\n  }\n  return null;\n}\n\n\n//# sourceMappingURL=defaultValue.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/mapType.mjs\n\nlet GL_TABLE = null;\nconst GL_TO_GLSL_TYPES = {\n  FLOAT: "float",\n  FLOAT_VEC2: "vec2",\n  FLOAT_VEC3: "vec3",\n  FLOAT_VEC4: "vec4",\n  INT: "int",\n  INT_VEC2: "ivec2",\n  INT_VEC3: "ivec3",\n  INT_VEC4: "ivec4",\n  UNSIGNED_INT: "uint",\n  UNSIGNED_INT_VEC2: "uvec2",\n  UNSIGNED_INT_VEC3: "uvec3",\n  UNSIGNED_INT_VEC4: "uvec4",\n  BOOL: "bool",\n  BOOL_VEC2: "bvec2",\n  BOOL_VEC3: "bvec3",\n  BOOL_VEC4: "bvec4",\n  FLOAT_MAT2: "mat2",\n  FLOAT_MAT3: "mat3",\n  FLOAT_MAT4: "mat4",\n  SAMPLER_2D: "sampler2D",\n  INT_SAMPLER_2D: "sampler2D",\n  UNSIGNED_INT_SAMPLER_2D: "sampler2D",\n  SAMPLER_CUBE: "samplerCube",\n  INT_SAMPLER_CUBE: "samplerCube",\n  UNSIGNED_INT_SAMPLER_CUBE: "samplerCube",\n  SAMPLER_2D_ARRAY: "sampler2DArray",\n  INT_SAMPLER_2D_ARRAY: "sampler2DArray",\n  UNSIGNED_INT_SAMPLER_2D_ARRAY: "sampler2DArray"\n};\nconst GLSL_TO_VERTEX_TYPES = {\n  float: "float32",\n  vec2: "float32x2",\n  vec3: "float32x3",\n  vec4: "float32x4",\n  int: "sint32",\n  ivec2: "sint32x2",\n  ivec3: "sint32x3",\n  ivec4: "sint32x4",\n  uint: "uint32",\n  uvec2: "uint32x2",\n  uvec3: "uint32x3",\n  uvec4: "uint32x4",\n  bool: "uint32",\n  bvec2: "uint32x2",\n  bvec3: "uint32x3",\n  bvec4: "uint32x4"\n};\nfunction mapType(gl, type) {\n  if (!GL_TABLE) {\n    const typeNames = Object.keys(GL_TO_GLSL_TYPES);\n    GL_TABLE = {};\n    for (let i = 0; i < typeNames.length; ++i) {\n      const tn = typeNames[i];\n      GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];\n    }\n  }\n  return GL_TABLE[type];\n}\nfunction mapGlToVertexFormat(gl, type) {\n  const typeValue = mapType(gl, type);\n  return GLSL_TO_VERTEX_TYPES[typeValue] || "float32";\n}\n\n\n//# sourceMappingURL=mapType.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/extractAttributesFromGlProgram.mjs\n\n\n\n"use strict";\nfunction extractAttributesFromGlProgram(program, gl, sortAttributes = false) {\n  const attributes = {};\n  const totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n  for (let i = 0; i < totalAttributes; i++) {\n    const attribData = gl.getActiveAttrib(program, i);\n    if (attribData.name.startsWith("gl_")) {\n      continue;\n    }\n    const format = mapGlToVertexFormat(gl, attribData.type);\n    attributes[attribData.name] = {\n      location: 0,\n      // set further down..\n      format,\n      stride: (0,getAttributeInfoFromFormat/* getAttributeInfoFromFormat */.v)(format).stride,\n      offset: 0,\n      instance: false,\n      start: 0\n    };\n  }\n  const keys = Object.keys(attributes);\n  if (sortAttributes) {\n    keys.sort((a, b) => a > b ? 1 : -1);\n    for (let i = 0; i < keys.length; i++) {\n      attributes[keys[i]].location = i;\n      gl.bindAttribLocation(program, i, keys[i]);\n    }\n    gl.linkProgram(program);\n  } else {\n    for (let i = 0; i < keys.length; i++) {\n      attributes[keys[i]].location = gl.getAttribLocation(program, keys[i]);\n    }\n  }\n  return attributes;\n}\n\n\n//# sourceMappingURL=extractAttributesFromGlProgram.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getUboData.mjs\n\nfunction getUboData(program, gl) {\n  if (!gl.ACTIVE_UNIFORM_BLOCKS)\n    return {};\n  const uniformBlocks = {};\n  const totalUniformsBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n  for (let i = 0; i < totalUniformsBlocks; i++) {\n    const name = gl.getActiveUniformBlockName(program, i);\n    const uniformBlockIndex = gl.getUniformBlockIndex(program, name);\n    const size = gl.getActiveUniformBlockParameter(program, i, gl.UNIFORM_BLOCK_DATA_SIZE);\n    uniformBlocks[name] = {\n      name,\n      index: uniformBlockIndex,\n      size\n    };\n  }\n  return uniformBlocks;\n}\n\n\n//# sourceMappingURL=getUboData.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getUniformData.mjs\n\n\n\n"use strict";\nfunction getUniformData(program, gl) {\n  const uniforms = {};\n  const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n  for (let i = 0; i < totalUniforms; i++) {\n    const uniformData = gl.getActiveUniform(program, i);\n    const name = uniformData.name.replace(/\\[.*?\\]$/, "");\n    const isArray = !!uniformData.name.match(/\\[.*?\\]$/);\n    const type = mapType(gl, uniformData.type);\n    uniforms[name] = {\n      name,\n      index: i,\n      type,\n      size: uniformData.size,\n      isArray,\n      value: defaultValue(type, uniformData.size)\n    };\n  }\n  return uniforms;\n}\n\n\n//# sourceMappingURL=getUniformData.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/logProgramError.mjs\n\nfunction logPrettyShaderError(gl, shader) {\n  const shaderSrc = gl.getShaderSource(shader).split("\\n").map((line, index) => `${index}: ${line}`);\n  const shaderLog = gl.getShaderInfoLog(shader);\n  const splitShader = shaderLog.split("\\n");\n  const dedupe = {};\n  const lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, "$1"))).filter((n) => {\n    if (n && !dedupe[n]) {\n      dedupe[n] = true;\n      return true;\n    }\n    return false;\n  });\n  const logArgs = [""];\n  lineNumbers.forEach((number) => {\n    shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n    logArgs.push("background: #FF0000; color:#FFFFFF; font-size: 10px", "font-size: 10px");\n  });\n  const fragmentSourceToLog = shaderSrc.join("\\n");\n  logArgs[0] = fragmentSourceToLog;\n  console.error(shaderLog);\n  console.groupCollapsed("click to view full shader code");\n  console.warn(...logArgs);\n  console.groupEnd();\n}\nfunction logProgramError(gl, program, vertexShader, fragmentShader) {\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      logPrettyShaderError(gl, vertexShader);\n    }\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      logPrettyShaderError(gl, fragmentShader);\n    }\n    console.error("PixiJS Error: Could not initialize shader.");\n    if (gl.getProgramInfoLog(program) !== "") {\n      console.warn("PixiJS Warning: gl.getProgramInfoLog()", gl.getProgramInfoLog(program));\n    }\n  }\n}\n\n\n//# sourceMappingURL=logProgramError.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/generateProgram.mjs\n\n\n\n\n\n\n\n\n\n"use strict";\nfunction generateProgram(gl, program) {\n  const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertex);\n  const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragment);\n  const webGLProgram = gl.createProgram();\n  gl.attachShader(webGLProgram, glVertShader);\n  gl.attachShader(webGLProgram, glFragShader);\n  const transformFeedbackVaryings = program.transformFeedbackVaryings;\n  if (transformFeedbackVaryings) {\n    if (typeof gl.transformFeedbackVaryings !== "function") {\n      (0,warn/* warn */.Z)(`TransformFeedback is not supported but TransformFeedbackVaryings are given.`);\n    } else {\n      gl.transformFeedbackVaryings(\n        webGLProgram,\n        transformFeedbackVaryings.names,\n        transformFeedbackVaryings.bufferMode === "separate" ? gl.SEPARATE_ATTRIBS : gl.INTERLEAVED_ATTRIBS\n      );\n    }\n  }\n  gl.linkProgram(webGLProgram);\n  if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS)) {\n    logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n  }\n  program._attributeData = extractAttributesFromGlProgram(\n    webGLProgram,\n    gl,\n    !/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m.test(program.vertex)\n  );\n  program._uniformData = getUniformData(webGLProgram, gl);\n  program._uniformBlockData = getUboData(webGLProgram, gl);\n  gl.deleteShader(glVertShader);\n  gl.deleteShader(glFragShader);\n  const uniformData = {};\n  for (const i in program._uniformData) {\n    const data = program._uniformData[i];\n    uniformData[i] = {\n      location: gl.getUniformLocation(webGLProgram, i),\n      value: defaultValue(data.type, data.size)\n    };\n  }\n  const glProgram = new GlProgramData(webGLProgram, uniformData);\n  return glProgram;\n}\n\n\n//# sourceMappingURL=generateProgram.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlShaderSystem.mjs\n\n\n\n\n"use strict";\nconst defaultSyncData = {\n  textureCount: 0,\n  blockIndex: 0\n};\nclass GlShaderSystem {\n  constructor(renderer) {\n    /**\n     * @internal\n     * @private\n     */\n    this._activeProgram = null;\n    this._programDataHash = /* @__PURE__ */ Object.create(null);\n    this._nextIndex = 0;\n    this._boundUniformsIdsToIndexHash = /* @__PURE__ */ Object.create(null);\n    this._boundIndexToUniformsHash = /* @__PURE__ */ Object.create(null);\n    this._shaderSyncFunctions = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  contextChange(gl) {\n    this._gl = gl;\n    this._maxBindings = gl.MAX_UNIFORM_BUFFER_BINDINGS ? gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS) : 0;\n    this._programDataHash = /* @__PURE__ */ Object.create(null);\n    this._boundUniformsIdsToIndexHash = /* @__PURE__ */ Object.create(null);\n    this._boundIndexToUniformsHash = /* @__PURE__ */ Object.create(null);\n    this._activeProgram = null;\n  }\n  /**\n   * Changes the current shader to the one given in parameter.\n   * @param shader - the new shader\n   * @param skipSync - false if the shader should automatically sync its uniforms.\n   * @returns the glProgram that belongs to the shader.\n   */\n  bind(shader, skipSync) {\n    this._setProgram(shader.glProgram);\n    if (skipSync)\n      return;\n    defaultSyncData.textureCount = 0;\n    defaultSyncData.blockIndex = 0;\n    let syncFunction = this._shaderSyncFunctions[shader.glProgram._key];\n    if (!syncFunction) {\n      syncFunction = this._shaderSyncFunctions[shader.glProgram._key] = this._generateShaderSync(shader, this);\n    }\n    syncFunction(this._renderer, shader, defaultSyncData);\n  }\n  /**\n   * Updates the uniform group.\n   * @param uniformGroup - the uniform group to update\n   */\n  updateUniformGroup(uniformGroup) {\n    this._renderer.uniformGroup.updateUniformGroup(uniformGroup, this._activeProgram, defaultSyncData);\n  }\n  /**\n   * Binds a uniform block to the shader.\n   * @param uniformGroup - the uniform group to bind\n   * @param name - the name of the uniform block\n   * @param index - the index of the uniform block\n   */\n  bindUniformBlock(uniformGroup, name, index = 0) {\n    const bufferSystem = this._renderer.buffer;\n    const programData = this._getProgramData(this._activeProgram);\n    const isBufferResource = uniformGroup._bufferResource;\n    if (isBufferResource) {\n      this._renderer.ubo.updateUniformGroup(uniformGroup);\n    }\n    bufferSystem.updateBuffer(uniformGroup.buffer);\n    let boundIndex = this._boundUniformsIdsToIndexHash[uniformGroup.uid];\n    if (boundIndex === void 0) {\n      const nextIndex = this._nextIndex++ % this._maxBindings;\n      const currentBoundUniformGroup = this._boundIndexToUniformsHash[nextIndex];\n      if (currentBoundUniformGroup) {\n        this._boundUniformsIdsToIndexHash[currentBoundUniformGroup.uid] = void 0;\n      }\n      boundIndex = this._boundUniformsIdsToIndexHash[uniformGroup.uid] = nextIndex;\n      this._boundIndexToUniformsHash[nextIndex] = uniformGroup;\n      if (isBufferResource) {\n        bufferSystem.bindBufferRange(uniformGroup.buffer, nextIndex, uniformGroup.offset);\n      } else {\n        bufferSystem.bindBufferBase(uniformGroup.buffer, nextIndex);\n      }\n    }\n    const gl = this._gl;\n    const uniformBlockIndex = this._activeProgram._uniformBlockData[name].index;\n    if (programData.uniformBlockBindings[index] === boundIndex)\n      return;\n    programData.uniformBlockBindings[index] = boundIndex;\n    gl.uniformBlockBinding(programData.program, uniformBlockIndex, boundIndex);\n  }\n  _setProgram(program) {\n    if (this._activeProgram === program)\n      return;\n    this._activeProgram = program;\n    const programData = this._getProgramData(program);\n    this._gl.useProgram(programData.program);\n  }\n  /**\n   * @param program - the program to get the data for\n   * @internal\n   * @private\n   */\n  _getProgramData(program) {\n    return this._programDataHash[program._key] || this._createProgramData(program);\n  }\n  _createProgramData(program) {\n    const key = program._key;\n    this._programDataHash[key] = generateProgram(this._gl, program);\n    return this._programDataHash[key];\n  }\n  destroy() {\n    for (const key of Object.keys(this._programDataHash)) {\n      const programData = this._programDataHash[key];\n      programData.destroy();\n      this._programDataHash[key] = null;\n    }\n    this._programDataHash = null;\n    this._boundUniformsIdsToIndexHash = null;\n  }\n  /**\n   * Creates a function that can be executed that will sync the shader as efficiently as possible.\n   * Overridden by the unsafe eval package if you don\'t want eval used in your project.\n   * @param shader - the shader to generate the sync function for\n   * @param shaderSystem - the shader system to use\n   * @returns - the generated sync function\n   * @ignore\n   */\n  _generateShaderSync(shader, shaderSystem) {\n    return generateShaderSyncCode(shader, shaderSystem);\n  }\n}\n/** @ignore */\nGlShaderSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem\n  ],\n  name: "shader"\n};\n\n\n//# sourceMappingURL=GlShaderSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uniformParsers.mjs\nvar uniformParsers = __webpack_require__(6602);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/utils/generateUniformsSyncTypes.mjs\n\nconst UNIFORM_TO_SINGLE_SETTERS = {\n  f32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1f(location, v);\n        }`,\n  "vec2<f32>": `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2f(location, v[0], v[1]);\n        }`,\n  "vec3<f32>": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3f(location, v[0], v[1], v[2]);\n        }`,\n  "vec4<f32>": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n        }`,\n  i32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }`,\n  "vec2<i32>": `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }`,\n  "vec3<i32>": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }`,\n  "vec4<i32>": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }`,\n  u32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1ui(location, v);\n        }`,\n  "vec2<u32>": `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2ui(location, v[0], v[1]);\n        }`,\n  "vec3<u32>": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3ui(location, v[0], v[1], v[2]);\n        }`,\n  "vec4<u32>": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n        }`,\n  bool: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }`,\n  "vec2<bool>": `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }`,\n  "vec3<bool>": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }`,\n  "vec4<bool>": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }`,\n  "mat2x2<f32>": `gl.uniformMatrix2fv(location, false, v);`,\n  "mat3x3<f32>": `gl.uniformMatrix3fv(location, false, v);`,\n  "mat4x4<f32>": `gl.uniformMatrix4fv(location, false, v);`\n};\nconst UNIFORM_TO_ARRAY_SETTERS = {\n  f32: `gl.uniform1fv(location, v);`,\n  "vec2<f32>": `gl.uniform2fv(location, v);`,\n  "vec3<f32>": `gl.uniform3fv(location, v);`,\n  "vec4<f32>": `gl.uniform4fv(location, v);`,\n  "mat2x2<f32>": `gl.uniformMatrix2fv(location, false, v);`,\n  "mat3x3<f32>": `gl.uniformMatrix3fv(location, false, v);`,\n  "mat4x4<f32>": `gl.uniformMatrix4fv(location, false, v);`,\n  i32: `gl.uniform1iv(location, v);`,\n  "vec2<i32>": `gl.uniform2iv(location, v);`,\n  "vec3<i32>": `gl.uniform3iv(location, v);`,\n  "vec4<i32>": `gl.uniform4iv(location, v);`,\n  u32: `gl.uniform1iv(location, v);`,\n  "vec2<u32>": `gl.uniform2iv(location, v);`,\n  "vec3<u32>": `gl.uniform3iv(location, v);`,\n  "vec4<u32>": `gl.uniform4iv(location, v);`,\n  bool: `gl.uniform1iv(location, v);`,\n  "vec2<bool>": `gl.uniform2iv(location, v);`,\n  "vec3<bool>": `gl.uniform3iv(location, v);`,\n  "vec4<bool>": `gl.uniform4iv(location, v);`\n};\n\n\n//# sourceMappingURL=generateUniformsSyncTypes.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/utils/generateUniformsSync.mjs\n\n\n\n\n\n"use strict";\nfunction generateUniformsSync(group, uniformData) {\n  const funcFragments = [`\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n        var name = null;\n    `];\n  for (const i in group.uniforms) {\n    if (!uniformData[i]) {\n      if (group.uniforms[i] instanceof UniformGroup/* UniformGroup */.o) {\n        if (group.uniforms[i].ubo) {\n          funcFragments.push(`\n                        renderer.shader.bindUniformBlock(uv.${i}, "${i}");\n                    `);\n        } else {\n          funcFragments.push(`\n                        renderer.shader.updateUniformGroup(uv.${i});\n                    `);\n        }\n      } else if (group.uniforms[i] instanceof BufferResource/* BufferResource */.q) {\n        funcFragments.push(`\n                        renderer.shader.bindBufferResource(uv.${i}, "${i}");\n                    `);\n      }\n      continue;\n    }\n    const uniform = group.uniformStructures[i];\n    let parsed = false;\n    for (let j = 0; j < uniformParsers/* uniformParsers */.s.length; j++) {\n      const parser = uniformParsers/* uniformParsers */.s[j];\n      if (uniform.type === parser.type && parser.test(uniform)) {\n        funcFragments.push(`name = "${i}";`, uniformParsers/* uniformParsers */.s[j].uniform);\n        parsed = true;\n        break;\n      }\n    }\n    if (!parsed) {\n      const templateType = uniform.size === 1 ? UNIFORM_TO_SINGLE_SETTERS : UNIFORM_TO_ARRAY_SETTERS;\n      const template = templateType[uniform.type].replace("location", `ud["${i}"].location`);\n      funcFragments.push(`\n            cu = ud["${i}"];\n            cv = cu.value;\n            v = uv["${i}"];\n            ${template};`);\n    }\n  }\n  return new Function("ud", "uv", "renderer", "syncData", funcFragments.join("\\n"));\n}\n\n\n//# sourceMappingURL=generateUniformsSync.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlUniformGroupSystem.mjs\n\n\n\n"use strict";\nclass GlUniformGroupSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    /** Cache to holds the generated functions. Stored against UniformObjects unique signature. */\n    this._cache = {};\n    this._uniformGroupSyncHash = {};\n    this._renderer = renderer;\n    this.gl = null;\n    this._cache = {};\n  }\n  contextChange(gl) {\n    this.gl = gl;\n  }\n  /**\n   * Uploads the uniforms values to the currently bound shader.\n   * @param group - the uniforms values that be applied to the current shader\n   * @param program\n   * @param syncData\n   * @param syncData.textureCount\n   */\n  updateUniformGroup(group, program, syncData) {\n    const programData = this._renderer.shader._getProgramData(program);\n    if (!group.isStatic || group._dirtyId !== programData.uniformDirtyGroups[group.uid]) {\n      programData.uniformDirtyGroups[group.uid] = group._dirtyId;\n      const syncFunc = this._getUniformSyncFunction(group, program);\n      syncFunc(programData.uniformData, group.uniforms, this._renderer, syncData);\n    }\n  }\n  /**\n   * Overrideable by the pixi.js/unsafe-eval package to use static syncUniforms instead.\n   * @param group\n   * @param program\n   */\n  _getUniformSyncFunction(group, program) {\n    return this._uniformGroupSyncHash[group._signature]?.[program._key] || this._createUniformSyncFunction(group, program);\n  }\n  _createUniformSyncFunction(group, program) {\n    const uniformGroupSyncHash = this._uniformGroupSyncHash[group._signature] || (this._uniformGroupSyncHash[group._signature] = {});\n    const id = this._getSignature(group, program._uniformData, "u");\n    if (!this._cache[id]) {\n      this._cache[id] = this._generateUniformsSync(group, program._uniformData);\n    }\n    uniformGroupSyncHash[program._key] = this._cache[id];\n    return uniformGroupSyncHash[program._key];\n  }\n  _generateUniformsSync(group, uniformData) {\n    return generateUniformsSync(group, uniformData);\n  }\n  /**\n   * Takes a uniform group and data and generates a unique signature for them.\n   * @param group - The uniform group to get signature of\n   * @param group.uniforms\n   * @param uniformData - Uniform information generated by the shader\n   * @param preFix\n   * @returns Unique signature of the uniform group\n   */\n  _getSignature(group, uniformData, preFix) {\n    const uniforms = group.uniforms;\n    const strings = [`${preFix}-`];\n    for (const i in uniforms) {\n      strings.push(i);\n      if (uniformData[i]) {\n        strings.push(uniformData[i].type);\n      }\n    }\n    return strings.join("-");\n  }\n  /** Destroys this System and removes all its textures. */\n  destroy() {\n    this._renderer = null;\n    this._cache = null;\n  }\n}\n/** @ignore */\nGlUniformGroupSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem\n  ],\n  name: "uniformGroup"\n};\n\n\n//# sourceMappingURL=GlUniformGroupSystem.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/state/mapWebGLBlendModesToPixi.mjs\n\nfunction mapWebGLBlendModesToPixi(gl) {\n  const blendMap = {};\n  blendMap.normal = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.add = [gl.ONE, gl.ONE];\n  blendMap.multiply = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.screen = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.none = [0, 0];\n  blendMap["normal-npm"] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap["add-npm"] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];\n  blendMap["screen-npm"] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.erase = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n  return blendMap;\n}\n\n\n//# sourceMappingURL=mapWebGLBlendModesToPixi.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/state/GlStateSystem.mjs\n\n\n\n\n"use strict";\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _GlStateSystem = class _GlStateSystem {\n  constructor() {\n    this.gl = null;\n    this.stateId = 0;\n    this.polygonOffset = 0;\n    this.blendMode = "none";\n    this._blendEq = false;\n    this.map = [];\n    this.map[BLEND] = this.setBlend;\n    this.map[OFFSET] = this.setOffset;\n    this.map[CULLING] = this.setCullFace;\n    this.map[DEPTH_TEST] = this.setDepthTest;\n    this.map[WINDING] = this.setFrontFace;\n    this.map[DEPTH_MASK] = this.setDepthMask;\n    this.checks = [];\n    this.defaultState = State/* State */.Z.for2d();\n  }\n  contextChange(gl) {\n    this.gl = gl;\n    this.blendModesMap = mapWebGLBlendModesToPixi(gl);\n    this.reset();\n  }\n  /**\n   * Sets the current state\n   * @param {*} state - The state to set.\n   */\n  set(state) {\n    state = state || this.defaultState;\n    if (this.stateId !== state.data) {\n      let diff = this.stateId ^ state.data;\n      let i = 0;\n      while (diff) {\n        if (diff & 1) {\n          this.map[i].call(this, !!(state.data & 1 << i));\n        }\n        diff = diff >> 1;\n        i++;\n      }\n      this.stateId = state.data;\n    }\n    for (let i = 0; i < this.checks.length; i++) {\n      this.checks[i](this, state);\n    }\n  }\n  /**\n   * Sets the state, when previous state is unknown.\n   * @param {*} state - The state to set\n   */\n  forceState(state) {\n    state = state || this.defaultState;\n    for (let i = 0; i < this.map.length; i++) {\n      this.map[i].call(this, !!(state.data & 1 << i));\n    }\n    for (let i = 0; i < this.checks.length; i++) {\n      this.checks[i](this, state);\n    }\n    this.stateId = state.data;\n  }\n  /**\n   * Sets whether to enable or disable blending.\n   * @param value - Turn on or off WebGl blending.\n   */\n  setBlend(value) {\n    this._updateCheck(_GlStateSystem._checkBlendMode, value);\n    this.gl[value ? "enable" : "disable"](this.gl.BLEND);\n  }\n  /**\n   * Sets whether to enable or disable polygon offset fill.\n   * @param value - Turn on or off webgl polygon offset testing.\n   */\n  setOffset(value) {\n    this._updateCheck(_GlStateSystem._checkPolygonOffset, value);\n    this.gl[value ? "enable" : "disable"](this.gl.POLYGON_OFFSET_FILL);\n  }\n  /**\n   * Sets whether to enable or disable depth test.\n   * @param value - Turn on or off webgl depth testing.\n   */\n  setDepthTest(value) {\n    this.gl[value ? "enable" : "disable"](this.gl.DEPTH_TEST);\n  }\n  /**\n   * Sets whether to enable or disable depth mask.\n   * @param value - Turn on or off webgl depth mask.\n   */\n  setDepthMask(value) {\n    this.gl.depthMask(value);\n  }\n  /**\n   * Sets whether to enable or disable cull face.\n   * @param {boolean} value - Turn on or off webgl cull face.\n   */\n  setCullFace(value) {\n    this.gl[value ? "enable" : "disable"](this.gl.CULL_FACE);\n  }\n  /**\n   * Sets the gl front face.\n   * @param {boolean} value - true is clockwise and false is counter-clockwise\n   */\n  setFrontFace(value) {\n    this.gl.frontFace(this.gl[value ? "CW" : "CCW"]);\n  }\n  /**\n   * Sets the blend mode.\n   * @param {number} value - The blend mode to set to.\n   */\n  setBlendMode(value) {\n    if (!this.blendModesMap[value]) {\n      value = "normal";\n    }\n    if (value === this.blendMode) {\n      return;\n    }\n    this.blendMode = value;\n    const mode = this.blendModesMap[value];\n    const gl = this.gl;\n    if (mode.length === 2) {\n      gl.blendFunc(mode[0], mode[1]);\n    } else {\n      gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n    }\n    if (mode.length === 6) {\n      this._blendEq = true;\n      gl.blendEquationSeparate(mode[4], mode[5]);\n    } else if (this._blendEq) {\n      this._blendEq = false;\n      gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n    }\n  }\n  /**\n   * Sets the polygon offset.\n   * @param {number} value - the polygon offset\n   * @param {number} scale - the polygon offset scale\n   */\n  setPolygonOffset(value, scale) {\n    this.gl.polygonOffset(value, scale);\n  }\n  // used\n  /** Resets all the logic and disables the VAOs. */\n  reset() {\n    this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n    this.forceState(this.defaultState);\n    this._blendEq = true;\n    this.blendMode = "";\n    this.setBlendMode("normal");\n  }\n  /**\n   * Checks to see which updates should be checked based on which settings have been activated.\n   *\n   * For example, if blend is enabled then we should check the blend modes each time the state is changed\n   * or if polygon fill is activated then we need to check if the polygon offset changes.\n   * The idea is that we only check what we have too.\n   * @param func - the checking function to add or remove\n   * @param value - should the check function be added or removed.\n   */\n  _updateCheck(func, value) {\n    const index = this.checks.indexOf(func);\n    if (value && index === -1) {\n      this.checks.push(func);\n    } else if (!value && index !== -1) {\n      this.checks.splice(index, 1);\n    }\n  }\n  /**\n   * A private little wrapper function that we call to check the blend mode.\n   * @param system - the System to perform the state check on\n   * @param state - the state that the blendMode will pulled from\n   */\n  static _checkBlendMode(system, state) {\n    system.setBlendMode(state.blendMode);\n  }\n  /**\n   * A private little wrapper function that we call to check the polygon offset.\n   * @param system - the System to perform the state check on\n   * @param state - the state that the blendMode will pulled from\n   */\n  static _checkPolygonOffset(system, state) {\n    system.setPolygonOffset(1, state.polygonOffset);\n  }\n  /**\n   * @ignore\n   */\n  destroy() {\n    this.gl = null;\n    this.checks.length = 0;\n  }\n};\n/** @ignore */\n_GlStateSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem\n  ],\n  name: "state"\n};\nlet GlStateSystem = _GlStateSystem;\n\n\n//# sourceMappingURL=GlStateSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/environment/adapter.mjs + 1 modules\nvar adapter = __webpack_require__(3646);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/texture/GlTexture.mjs\n\n\n"use strict";\nclass GlTexture {\n  constructor(texture) {\n    this.target = GL_TARGETS.TEXTURE_2D;\n    this.texture = texture;\n    this.width = -1;\n    this.height = -1;\n    this.type = GL_TYPES.UNSIGNED_BYTE;\n    this.internalFormat = GL_FORMATS.RGBA;\n    this.format = GL_FORMATS.RGBA;\n    this.samplerType = 0;\n  }\n}\n\n\n//# sourceMappingURL=GlTexture.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/texture/uploaders/glUploadBufferImageResource.mjs\n\nconst glUploadBufferImageResource = {\n  id: "image",\n  upload(source, glTexture, gl) {\n    if (glTexture.width === source.width || glTexture.height === source.height) {\n      gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,\n        0,\n        0,\n        glTexture.format,\n        glTexture.type,\n        source.resource\n      );\n    } else {\n      gl.texImage2D(\n        glTexture.target,\n        0,\n        glTexture.internalFormat,\n        source.width,\n        source.height,\n        0,\n        glTexture.format,\n        glTexture.type,\n        source.resource\n      );\n    }\n    glTexture.width = source.width;\n    glTexture.height = source.height;\n  }\n};\n\n\n//# sourceMappingURL=glUploadBufferImageResource.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/texture/uploaders/glUploadCompressedTextureResource.mjs\n\nconst compressedFormatMap = {\n  "bc1-rgba-unorm": true,\n  "bc1-rgba-unorm-srgb": true,\n  "bc2-rgba-unorm": true,\n  "bc2-rgba-unorm-srgb": true,\n  "bc3-rgba-unorm": true,\n  "bc3-rgba-unorm-srgb": true,\n  "bc4-r-unorm": true,\n  "bc4-r-snorm": true,\n  "bc5-rg-unorm": true,\n  "bc5-rg-snorm": true,\n  "bc6h-rgb-ufloat": true,\n  "bc6h-rgb-float": true,\n  "bc7-rgba-unorm": true,\n  "bc7-rgba-unorm-srgb": true,\n  // ETC2 compressed formats usable if "texture-compression-etc2" is both\n  // supported by the device/user agent and enabled in requestDevice.\n  "etc2-rgb8unorm": true,\n  "etc2-rgb8unorm-srgb": true,\n  "etc2-rgb8a1unorm": true,\n  "etc2-rgb8a1unorm-srgb": true,\n  "etc2-rgba8unorm": true,\n  "etc2-rgba8unorm-srgb": true,\n  "eac-r11unorm": true,\n  "eac-r11snorm": true,\n  "eac-rg11unorm": true,\n  "eac-rg11snorm": true,\n  // ASTC compressed formats usable if "texture-compression-astc" is both\n  // supported by the device/user agent and enabled in requestDevice.\n  "astc-4x4-unorm": true,\n  "astc-4x4-unorm-srgb": true,\n  "astc-5x4-unorm": true,\n  "astc-5x4-unorm-srgb": true,\n  "astc-5x5-unorm": true,\n  "astc-5x5-unorm-srgb": true,\n  "astc-6x5-unorm": true,\n  "astc-6x5-unorm-srgb": true,\n  "astc-6x6-unorm": true,\n  "astc-6x6-unorm-srgb": true,\n  "astc-8x5-unorm": true,\n  "astc-8x5-unorm-srgb": true,\n  "astc-8x6-unorm": true,\n  "astc-8x6-unorm-srgb": true,\n  "astc-8x8-unorm": true,\n  "astc-8x8-unorm-srgb": true,\n  "astc-10x5-unorm": true,\n  "astc-10x5-unorm-srgb": true,\n  "astc-10x6-unorm": true,\n  "astc-10x6-unorm-srgb": true,\n  "astc-10x8-unorm": true,\n  "astc-10x8-unorm-srgb": true,\n  "astc-10x10-unorm": true,\n  "astc-10x10-unorm-srgb": true,\n  "astc-12x10-unorm": true,\n  "astc-12x10-unorm-srgb": true,\n  "astc-12x12-unorm": true,\n  "astc-12x12-unorm-srgb": true\n};\nconst glUploadCompressedTextureResource = {\n  id: "compressed",\n  upload(source, glTexture, gl) {\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n    let mipWidth = source.pixelWidth;\n    let mipHeight = source.pixelHeight;\n    const compressed = !!compressedFormatMap[source.format];\n    for (let i = 0; i < source.resource.length; i++) {\n      const levelBuffer = source.resource[i];\n      if (compressed) {\n        gl.compressedTexImage2D(\n          gl.TEXTURE_2D,\n          i,\n          glTexture.internalFormat,\n          mipWidth,\n          mipHeight,\n          0,\n          levelBuffer\n        );\n      } else {\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          i,\n          glTexture.internalFormat,\n          mipWidth,\n          mipHeight,\n          0,\n          glTexture.format,\n          glTexture.type,\n          levelBuffer\n        );\n      }\n      mipWidth = Math.max(mipWidth >> 1, 1);\n      mipHeight = Math.max(mipHeight >> 1, 1);\n    }\n  }\n};\n\n\n//# sourceMappingURL=glUploadCompressedTextureResource.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/texture/uploaders/glUploadImageResource.mjs\n\nconst glUploadImageResource = {\n  id: "image",\n  upload(source, glTexture, gl, webGLVersion) {\n    const premultipliedAlpha = source.alphaMode === "premultiply-alpha-on-upload";\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultipliedAlpha);\n    const glWidth = glTexture.width;\n    const glHeight = glTexture.height;\n    const textureWidth = source.pixelWidth;\n    const textureHeight = source.pixelHeight;\n    const resourceWidth = source.resourceWidth;\n    const resourceHeight = source.resourceHeight;\n    if (resourceWidth < textureWidth || resourceHeight < textureHeight) {\n      if (glWidth !== textureWidth || glHeight !== textureHeight) {\n        gl.texImage2D(\n          glTexture.target,\n          0,\n          glTexture.internalFormat,\n          textureWidth,\n          textureHeight,\n          0,\n          glTexture.format,\n          glTexture.type,\n          null\n        );\n      }\n      if (webGLVersion === 2) {\n        gl.texSubImage2D(\n          gl.TEXTURE_2D,\n          0,\n          0,\n          0,\n          resourceWidth,\n          resourceHeight,\n          glTexture.format,\n          glTexture.type,\n          source.resource\n        );\n      } else {\n        gl.texSubImage2D(\n          gl.TEXTURE_2D,\n          0,\n          0,\n          0,\n          glTexture.format,\n          glTexture.type,\n          source.resource\n        );\n      }\n    } else if (glWidth === textureWidth || glHeight === textureHeight) {\n      gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,\n        0,\n        0,\n        glTexture.format,\n        glTexture.type,\n        source.resource\n      );\n    } else if (webGLVersion === 2) {\n      gl.texImage2D(\n        glTexture.target,\n        0,\n        glTexture.internalFormat,\n        textureWidth,\n        textureHeight,\n        0,\n        glTexture.format,\n        glTexture.type,\n        source.resource\n      );\n    } else {\n      gl.texImage2D(\n        glTexture.target,\n        0,\n        glTexture.internalFormat,\n        glTexture.format,\n        glTexture.type,\n        source.resource\n      );\n    }\n    glTexture.width = textureWidth;\n    glTexture.height = textureHeight;\n  }\n};\n\n\n//# sourceMappingURL=glUploadImageResource.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/texture/uploaders/glUploadVideoResource.mjs\n\n\n"use strict";\nconst glUploadVideoResource = {\n  id: "video",\n  upload(source, glTexture, gl, webGLVersion) {\n    if (!source.isValid) {\n      gl.texImage2D(\n        glTexture.target,\n        0,\n        glTexture.internalFormat,\n        1,\n        1,\n        0,\n        glTexture.format,\n        glTexture.type,\n        null\n      );\n      return;\n    }\n    glUploadImageResource.upload(source, glTexture, gl, webGLVersion);\n  }\n};\n\n\n//# sourceMappingURL=glUploadVideoResource.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/texture/utils/pixiToGlMaps.mjs\n\nconst scaleModeToGlFilter = {\n  linear: 9729,\n  nearest: 9728\n};\nconst mipmapScaleModeToGlFilter = {\n  linear: {\n    linear: 9987,\n    nearest: 9985\n  },\n  nearest: {\n    linear: 9986,\n    nearest: 9984\n  }\n};\nconst wrapModeToGlAddress = {\n  "clamp-to-edge": 33071,\n  repeat: 10497,\n  "mirror-repeat": 33648\n};\nconst compareModeToGlCompare = {\n  never: 512,\n  less: 513,\n  equal: 514,\n  "less-equal": 515,\n  greater: 516,\n  "not-equal": 517,\n  "greater-equal": 518,\n  always: 519\n};\n\n\n//# sourceMappingURL=pixiToGlMaps.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/texture/utils/applyStyleParams.mjs\n\n\n"use strict";\nfunction applyStyleParams(style, gl, mipmaps, anisotropicExt, glFunctionName, firstParam, forceClamp) {\n  const castParam = firstParam;\n  const wrapModeS = wrapModeToGlAddress[forceClamp ? "clamp-to-edge" : style.addressModeU];\n  const wrapModeT = wrapModeToGlAddress[forceClamp ? "clamp-to-edge" : style.addressModeV];\n  const wrapModeR = wrapModeToGlAddress[forceClamp ? "clamp-to-edge" : style.addressModeW];\n  gl[glFunctionName](castParam, gl.TEXTURE_WRAP_S, wrapModeS);\n  gl[glFunctionName](castParam, gl.TEXTURE_WRAP_T, wrapModeT);\n  if (gl.TEXTURE_WRAP_R)\n    gl[glFunctionName](castParam, gl.TEXTURE_WRAP_R, wrapModeR);\n  gl[glFunctionName](castParam, gl.TEXTURE_MAG_FILTER, scaleModeToGlFilter[style.magFilter]);\n  if (mipmaps) {\n    const glFilterMode = mipmapScaleModeToGlFilter[style.minFilter][style.mipmapFilter];\n    gl[glFunctionName](castParam, gl.TEXTURE_MIN_FILTER, glFilterMode);\n  } else {\n    gl[glFunctionName](castParam, gl.TEXTURE_MIN_FILTER, scaleModeToGlFilter[style.minFilter]);\n  }\n  if (anisotropicExt && style.maxAnisotropy > 1) {\n    const level = Math.min(style.maxAnisotropy, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));\n    gl[glFunctionName](castParam, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);\n  }\n  if (style.compare) {\n    gl[glFunctionName](castParam, gl.TEXTURE_COMPARE_FUNC, compareModeToGlCompare[style.compare]);\n  }\n}\n\n\n//# sourceMappingURL=applyStyleParams.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/texture/utils/mapFormatToGlFormat.mjs\n\nfunction mapFormatToGlFormat(gl) {\n  return {\n    // 8-bit formats\n    r8unorm: gl.RED,\n    r8snorm: gl.RED,\n    r8uint: gl.RED,\n    r8sint: gl.RED,\n    // 16-bit formats\n    r16uint: gl.RED,\n    r16sint: gl.RED,\n    r16float: gl.RED,\n    rg8unorm: gl.RG,\n    rg8snorm: gl.RG,\n    rg8uint: gl.RG,\n    rg8sint: gl.RG,\n    // 32-bit formats\n    r32uint: gl.RED,\n    r32sint: gl.RED,\n    r32float: gl.RED,\n    rg16uint: gl.RG,\n    rg16sint: gl.RG,\n    rg16float: gl.RG,\n    rgba8unorm: gl.RGBA,\n    "rgba8unorm-srgb": gl.RGBA,\n    // Packed 32-bit formats\n    rgba8snorm: gl.RGBA,\n    rgba8uint: gl.RGBA,\n    rgba8sint: gl.RGBA,\n    bgra8unorm: gl.RGBA,\n    "bgra8unorm-srgb": gl.RGBA,\n    rgb9e5ufloat: gl.RGB,\n    rgb10a2unorm: gl.RGBA,\n    rg11b10ufloat: gl.RGB,\n    // 64-bit formats\n    rg32uint: gl.RG,\n    rg32sint: gl.RG,\n    rg32float: gl.RG,\n    rgba16uint: gl.RGBA,\n    rgba16sint: gl.RGBA,\n    rgba16float: gl.RGBA,\n    // 128-bit formats\n    rgba32uint: gl.RGBA,\n    rgba32sint: gl.RGBA,\n    rgba32float: gl.RGBA,\n    // Depth/stencil formats\n    stencil8: gl.STENCIL_INDEX8,\n    depth16unorm: gl.DEPTH_COMPONENT,\n    depth24plus: gl.DEPTH_COMPONENT,\n    "depth24plus-stencil8": gl.DEPTH_STENCIL,\n    depth32float: gl.DEPTH_COMPONENT,\n    "depth32float-stencil8": gl.DEPTH_STENCIL\n  };\n}\n\n\n//# sourceMappingURL=mapFormatToGlFormat.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/texture/utils/mapFormatToGlInternalFormat.mjs\n\nfunction mapFormatToGlInternalFormat(gl, extensions) {\n  let srgb = {};\n  let bgra8unorm = gl.RGBA;\n  if (gl instanceof WebGL2RenderingContext) {\n    srgb = {\n      "rgba8unorm-srgb": gl.SRGB8_ALPHA8,\n      "bgra8unorm-srgb": gl.SRGB8_ALPHA8\n    };\n    bgra8unorm = gl.RGBA8;\n  } else if (extensions.srgb) {\n    srgb = {\n      "rgba8unorm-srgb": extensions.srgb.SRGB8_ALPHA8_EXT,\n      "bgra8unorm-srgb": extensions.srgb.SRGB8_ALPHA8_EXT\n    };\n  }\n  return {\n    // 8-bit formats\n    r8unorm: gl.R8,\n    r8snorm: gl.R8_SNORM,\n    r8uint: gl.R8UI,\n    r8sint: gl.R8I,\n    // 16-bit formats\n    r16uint: gl.R16UI,\n    r16sint: gl.R16I,\n    r16float: gl.R16F,\n    rg8unorm: gl.RG8,\n    rg8snorm: gl.RG8_SNORM,\n    rg8uint: gl.RG8UI,\n    rg8sint: gl.RG8I,\n    // 32-bit formats\n    r32uint: gl.R32UI,\n    r32sint: gl.R32I,\n    r32float: gl.R32F,\n    rg16uint: gl.RG16UI,\n    rg16sint: gl.RG16I,\n    rg16float: gl.RG16F,\n    rgba8unorm: gl.RGBA,\n    ...srgb,\n    // Packed 32-bit formats\n    rgba8snorm: gl.RGBA8_SNORM,\n    rgba8uint: gl.RGBA8UI,\n    rgba8sint: gl.RGBA8I,\n    bgra8unorm,\n    rgb9e5ufloat: gl.RGB9_E5,\n    rgb10a2unorm: gl.RGB10_A2,\n    rg11b10ufloat: gl.R11F_G11F_B10F,\n    // 64-bit formats\n    rg32uint: gl.RG32UI,\n    rg32sint: gl.RG32I,\n    rg32float: gl.RG32F,\n    rgba16uint: gl.RGBA16UI,\n    rgba16sint: gl.RGBA16I,\n    rgba16float: gl.RGBA16F,\n    // 128-bit formats\n    rgba32uint: gl.RGBA32UI,\n    rgba32sint: gl.RGBA32I,\n    rgba32float: gl.RGBA32F,\n    // Depth/stencil formats\n    stencil8: gl.STENCIL_INDEX8,\n    depth16unorm: gl.DEPTH_COMPONENT16,\n    depth24plus: gl.DEPTH_COMPONENT24,\n    "depth24plus-stencil8": gl.DEPTH24_STENCIL8,\n    depth32float: gl.DEPTH_COMPONENT32F,\n    "depth32float-stencil8": gl.DEPTH32F_STENCIL8,\n    // Compressed formats\n    ...extensions.s3tc ? {\n      "bc1-rgba-unorm": extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n      "bc2-rgba-unorm": extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n      "bc3-rgba-unorm": extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT\n    } : {},\n    ...extensions.s3tc_sRGB ? {\n      "bc1-rgba-unorm-srgb": extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n      "bc2-rgba-unorm-srgb": extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n      "bc3-rgba-unorm-srgb": extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\n    } : {},\n    ...extensions.rgtc ? {\n      "bc4-r-unorm": extensions.rgtc.COMPRESSED_RED_RGTC1_EXT,\n      "bc4-r-snorm": extensions.rgtc.COMPRESSED_SIGNED_RED_RGTC1_EXT,\n      "bc5-rg-unorm": extensions.rgtc.COMPRESSED_RED_GREEN_RGTC2_EXT,\n      "bc5-rg-snorm": extensions.rgtc.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT\n    } : {},\n    ...extensions.bptc ? {\n      "bc6h-rgb-float": extensions.bptc.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,\n      "bc6h-rgb-ufloat": extensions.bptc.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,\n      "bc7-rgba-unorm": extensions.bptc.COMPRESSED_RGBA_BPTC_UNORM_EXT,\n      "bc7-rgba-unorm-srgb": extensions.bptc.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT\n    } : {},\n    ...extensions.etc ? {\n      "etc2-rgb8unorm": extensions.etc.COMPRESSED_RGB8_ETC2,\n      "etc2-rgb8unorm-srgb": extensions.etc.COMPRESSED_SRGB8_ETC2,\n      "etc2-rgb8a1unorm": extensions.etc.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n      "etc2-rgb8a1unorm-srgb": extensions.etc.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n      "etc2-rgba8unorm": extensions.etc.COMPRESSED_RGBA8_ETC2_EAC,\n      "etc2-rgba8unorm-srgb": extensions.etc.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,\n      "eac-r11unorm": extensions.etc.COMPRESSED_R11_EAC,\n      // \'eac-r11snorm\'\n      "eac-rg11unorm": extensions.etc.COMPRESSED_SIGNED_RG11_EAC\n      // \'eac-rg11snorm\'\n    } : {},\n    ...extensions.astc ? {\n      "astc-4x4-unorm": extensions.astc.COMPRESSED_RGBA_ASTC_4x4_KHR,\n      "astc-4x4-unorm-srgb": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,\n      "astc-5x4-unorm": extensions.astc.COMPRESSED_RGBA_ASTC_5x4_KHR,\n      "astc-5x4-unorm-srgb": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,\n      "astc-5x5-unorm": extensions.astc.COMPRESSED_RGBA_ASTC_5x5_KHR,\n      "astc-5x5-unorm-srgb": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,\n      "astc-6x5-unorm": extensions.astc.COMPRESSED_RGBA_ASTC_6x5_KHR,\n      "astc-6x5-unorm-srgb": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,\n      "astc-6x6-unorm": extensions.astc.COMPRESSED_RGBA_ASTC_6x6_KHR,\n      "astc-6x6-unorm-srgb": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,\n      "astc-8x5-unorm": extensions.astc.COMPRESSED_RGBA_ASTC_8x5_KHR,\n      "astc-8x5-unorm-srgb": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,\n      "astc-8x6-unorm": extensions.astc.COMPRESSED_RGBA_ASTC_8x6_KHR,\n      "astc-8x6-unorm-srgb": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,\n      "astc-8x8-unorm": extensions.astc.COMPRESSED_RGBA_ASTC_8x8_KHR,\n      "astc-8x8-unorm-srgb": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,\n      "astc-10x5-unorm": extensions.astc.COMPRESSED_RGBA_ASTC_10x5_KHR,\n      "astc-10x5-unorm-srgb": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,\n      "astc-10x6-unorm": extensions.astc.COMPRESSED_RGBA_ASTC_10x6_KHR,\n      "astc-10x6-unorm-srgb": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,\n      "astc-10x8-unorm": extensions.astc.COMPRESSED_RGBA_ASTC_10x8_KHR,\n      "astc-10x8-unorm-srgb": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,\n      "astc-10x10-unorm": extensions.astc.COMPRESSED_RGBA_ASTC_10x10_KHR,\n      "astc-10x10-unorm-srgb": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,\n      "astc-12x10-unorm": extensions.astc.COMPRESSED_RGBA_ASTC_12x10_KHR,\n      "astc-12x10-unorm-srgb": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,\n      "astc-12x12-unorm": extensions.astc.COMPRESSED_RGBA_ASTC_12x12_KHR,\n      "astc-12x12-unorm-srgb": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR\n    } : {}\n  };\n}\n\n\n//# sourceMappingURL=mapFormatToGlInternalFormat.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/texture/utils/mapFormatToGlType.mjs\n\nfunction mapFormatToGlType(gl) {\n  return {\n    // 8-bit formats\n    r8unorm: gl.UNSIGNED_BYTE,\n    r8snorm: gl.BYTE,\n    r8uint: gl.UNSIGNED_BYTE,\n    r8sint: gl.BYTE,\n    // 16-bit formats\n    r16uint: gl.UNSIGNED_SHORT,\n    r16sint: gl.SHORT,\n    r16float: gl.HALF_FLOAT,\n    rg8unorm: gl.UNSIGNED_BYTE,\n    rg8snorm: gl.BYTE,\n    rg8uint: gl.UNSIGNED_BYTE,\n    rg8sint: gl.BYTE,\n    // 32-bit formats\n    r32uint: gl.UNSIGNED_INT,\n    r32sint: gl.INT,\n    r32float: gl.FLOAT,\n    rg16uint: gl.UNSIGNED_SHORT,\n    rg16sint: gl.SHORT,\n    rg16float: gl.HALF_FLOAT,\n    rgba8unorm: gl.UNSIGNED_BYTE,\n    "rgba8unorm-srgb": gl.UNSIGNED_BYTE,\n    // Packed 32-bit formats\n    rgba8snorm: gl.BYTE,\n    rgba8uint: gl.UNSIGNED_BYTE,\n    rgba8sint: gl.BYTE,\n    bgra8unorm: gl.UNSIGNED_BYTE,\n    "bgra8unorm-srgb": gl.UNSIGNED_BYTE,\n    rgb9e5ufloat: gl.UNSIGNED_INT_5_9_9_9_REV,\n    rgb10a2unorm: gl.UNSIGNED_INT_2_10_10_10_REV,\n    rg11b10ufloat: gl.UNSIGNED_INT_10F_11F_11F_REV,\n    // 64-bit formats\n    rg32uint: gl.UNSIGNED_INT,\n    rg32sint: gl.INT,\n    rg32float: gl.FLOAT,\n    rgba16uint: gl.UNSIGNED_SHORT,\n    rgba16sint: gl.SHORT,\n    rgba16float: gl.HALF_FLOAT,\n    // 128-bit formats\n    rgba32uint: gl.UNSIGNED_INT,\n    rgba32sint: gl.INT,\n    rgba32float: gl.FLOAT,\n    // Depth/stencil formats\n    stencil8: gl.UNSIGNED_BYTE,\n    depth16unorm: gl.UNSIGNED_SHORT,\n    depth24plus: gl.UNSIGNED_INT,\n    "depth24plus-stencil8": gl.UNSIGNED_INT_24_8,\n    depth32float: gl.FLOAT,\n    "depth32float-stencil8": gl.FLOAT_32_UNSIGNED_INT_24_8_REV\n  };\n}\n\n\n//# sourceMappingURL=mapFormatToGlType.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/texture/GlTextureSystem.mjs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"use strict";\nconst BYTES_PER_PIXEL = 4;\nclass GlTextureSystem {\n  constructor(renderer) {\n    this.managedTextures = [];\n    this._glTextures = /* @__PURE__ */ Object.create(null);\n    this._glSamplers = /* @__PURE__ */ Object.create(null);\n    this._boundTextures = [];\n    this._activeTextureLocation = -1;\n    this._boundSamplers = /* @__PURE__ */ Object.create(null);\n    this._uploads = {\n      image: glUploadImageResource,\n      buffer: glUploadBufferImageResource,\n      video: glUploadVideoResource,\n      compressed: glUploadCompressedTextureResource\n    };\n    // TODO - separate samplers will be a cool thing to add, but not right now!\n    this._useSeparateSamplers = false;\n    this._renderer = renderer;\n  }\n  contextChange(gl) {\n    this._gl = gl;\n    if (!this._mapFormatToInternalFormat) {\n      this._mapFormatToInternalFormat = mapFormatToGlInternalFormat(gl, this._renderer.context.extensions);\n      this._mapFormatToType = mapFormatToGlType(gl);\n      this._mapFormatToFormat = mapFormatToGlFormat(gl);\n    }\n    this._glTextures = /* @__PURE__ */ Object.create(null);\n    this._glSamplers = /* @__PURE__ */ Object.create(null);\n    this._boundSamplers = /* @__PURE__ */ Object.create(null);\n    for (let i = 0; i < 16; i++) {\n      this.bind(Texture/* Texture */.x.EMPTY, i);\n    }\n  }\n  initSource(source) {\n    this.bind(source);\n  }\n  bind(texture, location = 0) {\n    const source = texture.source;\n    if (texture) {\n      this.bindSource(source, location);\n      if (this._useSeparateSamplers) {\n        this._bindSampler(source.style, location);\n      }\n    } else {\n      this.bindSource(null, location);\n      if (this._useSeparateSamplers) {\n        this._bindSampler(null, location);\n      }\n    }\n  }\n  bindSource(source, location = 0) {\n    const gl = this._gl;\n    source._touched = this._renderer.textureGC.count;\n    if (this._boundTextures[location] !== source) {\n      this._boundTextures[location] = source;\n      this._activateLocation(location);\n      source = source || Texture/* Texture */.x.EMPTY.source;\n      const glTexture = this.getGlSource(source);\n      gl.bindTexture(glTexture.target, glTexture.texture);\n    }\n  }\n  _bindSampler(style, location = 0) {\n    const gl = this._gl;\n    if (!style) {\n      this._boundSamplers[location] = null;\n      gl.bindSampler(location, null);\n      return;\n    }\n    const sampler = this._getGlSampler(style);\n    if (this._boundSamplers[location] !== sampler) {\n      this._boundSamplers[location] = sampler;\n      gl.bindSampler(location, sampler);\n    }\n  }\n  unbind(texture) {\n    const source = texture.source;\n    const boundTextures = this._boundTextures;\n    const gl = this._gl;\n    for (let i = 0; i < boundTextures.length; i++) {\n      if (boundTextures[i] === source) {\n        this._activateLocation(i);\n        const glTexture = this.getGlSource(source);\n        gl.bindTexture(glTexture.target, null);\n        boundTextures[i] = null;\n      }\n    }\n  }\n  _activateLocation(location) {\n    if (this._activeTextureLocation !== location) {\n      this._activeTextureLocation = location;\n      this._gl.activeTexture(this._gl.TEXTURE0 + location);\n    }\n  }\n  _initSource(source) {\n    const gl = this._gl;\n    const glTexture = new GlTexture(gl.createTexture());\n    glTexture.type = this._mapFormatToType[source.format];\n    glTexture.internalFormat = this._mapFormatToInternalFormat[source.format];\n    glTexture.format = this._mapFormatToFormat[source.format];\n    if (source.autoGenerateMipmaps && (this._renderer.context.supports.nonPowOf2mipmaps || source.isPowerOfTwo)) {\n      const biggestDimension = Math.max(source.width, source.height);\n      source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n    }\n    this._glTextures[source.uid] = glTexture;\n    if (!this.managedTextures.includes(source)) {\n      source.on("update", this.onSourceUpdate, this);\n      source.on("resize", this.onSourceUpdate, this);\n      source.on("styleChange", this.onStyleChange, this);\n      source.on("destroy", this.onSourceDestroy, this);\n      source.on("unload", this.onSourceUnload, this);\n      source.on("updateMipmaps", this.onUpdateMipmaps, this);\n      this.managedTextures.push(source);\n    }\n    this.onSourceUpdate(source);\n    this.onStyleChange(source);\n    return glTexture;\n  }\n  onStyleChange(source) {\n    const gl = this._gl;\n    const glTexture = this.getGlSource(source);\n    gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n    this._boundTextures[this._activeTextureLocation] = source;\n    applyStyleParams(\n      source.style,\n      gl,\n      source.mipLevelCount > 1,\n      this._renderer.context.extensions.anisotropicFiltering,\n      "texParameteri",\n      gl.TEXTURE_2D,\n      // will force a clamp to edge if the texture is not a power of two\n      !this._renderer.context.supports.nonPowOf2wrapping && !source.isPowerOfTwo\n    );\n  }\n  onSourceUnload(source) {\n    const glTexture = this._glTextures[source.uid];\n    if (!glTexture)\n      return;\n    this.unbind(source);\n    this._glTextures[source.uid] = null;\n    this._gl.deleteTexture(glTexture.texture);\n  }\n  onSourceUpdate(source) {\n    const gl = this._gl;\n    const glTexture = this.getGlSource(source);\n    gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n    this._boundTextures[this._activeTextureLocation] = source;\n    if (this._uploads[source.uploadMethodId]) {\n      this._uploads[source.uploadMethodId].upload(source, glTexture, gl, this._renderer.context.webGLVersion);\n    } else {\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, source.pixelWidth, source.pixelHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    }\n    if (source.autoGenerateMipmaps && source.mipLevelCount > 1) {\n      this.onUpdateMipmaps(source, false);\n    }\n  }\n  onUpdateMipmaps(source, bind = true) {\n    if (bind)\n      this.bindSource(source, 0);\n    const glTexture = this.getGlSource(source);\n    this._gl.generateMipmap(glTexture.target);\n  }\n  onSourceDestroy(source) {\n    source.off("destroy", this.onSourceDestroy, this);\n    source.off("update", this.onSourceUpdate, this);\n    source.off("resize", this.onSourceUpdate, this);\n    source.off("unload", this.onSourceUnload, this);\n    source.off("styleChange", this.onStyleChange, this);\n    source.off("updateMipmaps", this.onUpdateMipmaps, this);\n    this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n    this.onSourceUnload(source);\n  }\n  _initSampler(style) {\n    const gl = this._gl;\n    const glSampler = this._gl.createSampler();\n    this._glSamplers[style._resourceId] = glSampler;\n    applyStyleParams(\n      style,\n      gl,\n      this._boundTextures[this._activeTextureLocation].mipLevelCount > 1,\n      this._renderer.context.extensions.anisotropicFiltering,\n      "samplerParameteri",\n      glSampler,\n      false\n    );\n    return this._glSamplers[style._resourceId];\n  }\n  _getGlSampler(sampler) {\n    return this._glSamplers[sampler._resourceId] || this._initSampler(sampler);\n  }\n  getGlSource(source) {\n    return this._glTextures[source.uid] || this._initSource(source);\n  }\n  generateCanvas(texture) {\n    const { pixels, width, height } = this.getPixels(texture);\n    const canvas = adapter/* DOMAdapter */.z.get().createCanvas();\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext("2d");\n    if (ctx) {\n      const imageData = ctx.createImageData(width, height);\n      imageData.data.set(pixels);\n      ctx.putImageData(imageData, 0, 0);\n    }\n    return canvas;\n  }\n  getPixels(texture) {\n    const resolution = texture.source.resolution;\n    const frame = texture.frame;\n    const width = Math.max(Math.round(frame.width * resolution), 1);\n    const height = Math.max(Math.round(frame.height * resolution), 1);\n    const pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n    const renderer = this._renderer;\n    const renderTarget = renderer.renderTarget.getRenderTarget(texture);\n    const glRenterTarget = renderer.renderTarget.getGpuRenderTarget(renderTarget);\n    const gl = renderer.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, glRenterTarget.resolveTargetFramebuffer);\n    gl.readPixels(\n      Math.round(frame.x * resolution),\n      Math.round(frame.y * resolution),\n      width,\n      height,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      pixels\n    );\n    if (false) {}\n    return { pixels: new Uint8ClampedArray(pixels.buffer), width, height };\n  }\n  destroy() {\n    this.managedTextures.slice().forEach((source) => this.onSourceDestroy(source));\n    this.managedTextures = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGlTextureSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem\n  ],\n  name: "texture"\n};\n\n\n//# sourceMappingURL=GlTextureSystem.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/WebGLRenderer.mjs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"use strict";\nconst DefaultWebGLSystems = [\n  ...SharedSystems/* SharedSystems */.N,\n  GlUboSystem,\n  GlBackBufferSystem,\n  GlContextSystem,\n  GlBufferSystem,\n  GlTextureSystem,\n  GlRenderTargetSystem,\n  GlGeometrySystem,\n  GlUniformGroupSystem,\n  GlShaderSystem,\n  GlEncoderSystem,\n  GlStateSystem,\n  GlStencilSystem,\n  GlColorMaskSystem\n];\nconst DefaultWebGLPipes = [...SharedSystems/* SharedRenderPipes */.U];\nconst DefaultWebGLAdapters = [GlBatchAdaptor, GlMeshAdaptor, GlGraphicsAdaptor];\nconst systems = [];\nconst renderPipes = [];\nconst renderPipeAdaptors = [];\nExtensions/* extensions */.Rw.handleByNamedList(Extensions/* ExtensionType */.nw.WebGLSystem, systems);\nExtensions/* extensions */.Rw.handleByNamedList(Extensions/* ExtensionType */.nw.WebGLPipes, renderPipes);\nExtensions/* extensions */.Rw.handleByNamedList(Extensions/* ExtensionType */.nw.WebGLPipesAdaptor, renderPipeAdaptors);\nExtensions/* extensions */.Rw.add(...DefaultWebGLSystems, ...DefaultWebGLPipes, ...DefaultWebGLAdapters);\nclass WebGLRenderer extends AbstractRenderer/* AbstractRenderer */.I {\n  constructor() {\n    const systemConfig = {\n      name: "webgl",\n      type: types/* RendererType */.g.WEBGL,\n      systems,\n      renderPipes,\n      renderPipeAdaptors\n    };\n    super(systemConfig);\n  }\n}\n\n\n//# sourceMappingURL=WebGLRenderer.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULDBEQUEwRDtBQUMxRCwwREFBMEQ7QUFDMUQsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsMkNBQTJDO0FBQzNDLDJDQUEyQztBQUMzQywyQ0FBMkM7QUFDM0MsMERBQTBEO0FBQzFELDBEQUEwRDtBQUMxRCwwREFBMEQ7QUFDMUQsbUNBQW1DO0FBQ25DLDJDQUEyQztBQUMzQywyQ0FBMkM7QUFDM0MsMkNBQTJDO0FBQzNDLG1DQUFtQztBQUNuQywyQ0FBMkM7QUFDM0MsMkNBQTJDO0FBQzNDLDJDQUEyQztBQUMzQyxvQ0FBb0M7QUFDcEMsNENBQTRDO0FBQzVDLDRDQUE0QztBQUM1Qyw0Q0FBNEM7QUFDNUM7O0FBRStEO0FBQy9EOzs7QUNySDJFO0FBQ0o7QUFDVTtBQUNxQjs7QUFFdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNEJBQTRCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkM7QUFDN0M7OztBQ2xHYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVpQztBQUNqQzs7O0FDdkZvRTs7QUFFcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxxQkFBcUI7QUFDekI7QUFDQTs7QUFFaUM7QUFDakM7OztBQ3pCYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFdUc7QUFDdkc7OztBQ2hDaUk7O0FBRWpJO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkMsb0JBQW9CLG1CQUFtQjtBQUN2QyxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELG1CQUFtQjtBQUMxRTtBQUNBLHlCQUF5Qix5QkFBeUI7QUFDbEQ7QUFDQSxJQUFJO0FBQ0oseURBQXlELG1CQUFtQjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsc0JBQXNCO0FBQ2pGO0FBQ0E7O0FBRTRCO0FBQzVCOzs7QUM3QmE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUrQjtBQUMvQjs7O0FDeERhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLElBQUk7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sSUFBSTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLElBQUk7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxJQUFJO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sSUFBSTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFdUM7QUFDdkM7OztBQ3RJYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFDakIsRUFBRSxvQkFBb0I7QUFDdEIsRUFBRSxnQkFBZ0I7QUFDbEIsRUFBRSxvQkFBb0I7QUFDdEIsRUFBRSxjQUFjO0FBQ2hCLEVBQUUsZUFBZTtBQUNqQixFQUFFLGFBQWE7QUFDZixFQUFFLGVBQWU7QUFDakIsRUFBRSxpQkFBaUI7QUFDbkI7QUFDQSw4QkFBOEIsc0NBQWlCO0FBQy9DLDhCQUE4QixjQUFjLEVBQUUsYUFBYSxFQUFFLGlCQUFpQjtBQUM5RTtBQUNBO0FBQ0E7QUFDQSw2QkFBVSxtQkFBbUIsZ0NBQWE7QUFDMUMsNkJBQVUsbUJBQW1CLGdDQUFhO0FBQzFDLDZCQUFVLG1CQUFtQixnQ0FBYTtBQUMxQyw2QkFBVTtBQUNWLDRCQUE0Qix3Q0FBZ0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsWUFBWSx5QkFBWTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvZ3JhcGhpY3MvZ2wvR2xHcmFwaGljc0FkYXB0b3IubWpzPzdlMWIiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL21lc2gvZ2wvR2xNZXNoQWRhcHRvci5tanM/NzFkZiIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL2JhdGNoZXIvZ2wvR2xCYXRjaEFkYXB0b3IubWpzP2RjYmIiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvYnVmZmVyL2NvbnN0Lm1qcz80OTVlIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL2J1ZmZlci9HbEJ1ZmZlci5tanM/MWM0OSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9idWZmZXIvR2xCdWZmZXJTeXN0ZW0ubWpzPzcyOGIiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvY29udGV4dC9HbENvbnRleHRTeXN0ZW0ubWpzPzFhZTgiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS9jb25zdC5tanM/NTFjMSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9nZW9tZXRyeS91dGlscy9nZXRHbFR5cGVGcm9tRm9ybWF0Lm1qcz85ZDY4Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL2dlb21ldHJ5L0dsR2VvbWV0cnlTeXN0ZW0ubWpzP2Q2MTkiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvR2xCYWNrQnVmZmVyU3lzdGVtLm1qcz9iODgxIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL0dsQ29sb3JNYXNrU3lzdGVtLm1qcz80NDQ3Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL0dsRW5jb2RlclN5c3RlbS5tanM/Y2EyMiIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9HbFN0ZW5jaWxTeXN0ZW0ubWpzPzc1MTYiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL3V0aWxzL2NyZWF0ZVVib0VsZW1lbnRzU1RENDAubWpzP2NkZDMiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL3V0aWxzL2dlbmVyYXRlQXJyYXlTeW5jU1RENDAubWpzPzA0NzAiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL3V0aWxzL2NyZWF0ZVVib1N5bmNTVEQ0MC5tanM/MWIyOCIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9HbFVib1N5c3RlbS5tanM/NzJmNCIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9HbFJlbmRlclRhcmdldC5tanM/NTUyYyIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9yZW5kZXJUYXJnZXQvR2xSZW5kZXJUYXJnZXRBZGFwdG9yLm1qcz81ZGQ0Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3JlbmRlclRhcmdldC9HbFJlbmRlclRhcmdldFN5c3RlbS5tanM/ZmEzMSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvR2VuZXJhdGVTaGFkZXJTeW5jQ29kZS5tanM/ZDExNyIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvR2xQcm9ncmFtRGF0YS5tanM/YmEzZSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvcHJvZ3JhbS9jb21waWxlU2hhZGVyLm1qcz8yNzBkIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9wcm9ncmFtL2RlZmF1bHRWYWx1ZS5tanM/ZDU5YiIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvcHJvZ3JhbS9tYXBUeXBlLm1qcz8wYmNhIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9wcm9ncmFtL2V4dHJhY3RBdHRyaWJ1dGVzRnJvbUdsUHJvZ3JhbS5tanM/OTVkZCIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvcHJvZ3JhbS9nZXRVYm9EYXRhLm1qcz9lYTRhIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9wcm9ncmFtL2dldFVuaWZvcm1EYXRhLm1qcz9kNmYzIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9wcm9ncmFtL2xvZ1Byb2dyYW1FcnJvci5tanM/M2RjNSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvcHJvZ3JhbS9nZW5lcmF0ZVByb2dyYW0ubWpzP2VlZGIiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL0dsU2hhZGVyU3lzdGVtLm1qcz81MDM0Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci91dGlscy9nZW5lcmF0ZVVuaWZvcm1zU3luY1R5cGVzLm1qcz83MWJmIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci91dGlscy9nZW5lcmF0ZVVuaWZvcm1zU3luYy5tanM/MWQwYSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvR2xVbmlmb3JtR3JvdXBTeXN0ZW0ubWpzPzEyZDEiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc3RhdGUvbWFwV2ViR0xCbGVuZE1vZGVzVG9QaXhpLm1qcz9iYzBjIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3N0YXRlL0dsU3RhdGVTeXN0ZW0ubWpzPzY5ZmUiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS9HbFRleHR1cmUubWpzPzVkMGUiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS91cGxvYWRlcnMvZ2xVcGxvYWRCdWZmZXJJbWFnZVJlc291cmNlLm1qcz9jNmU5Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3RleHR1cmUvdXBsb2FkZXJzL2dsVXBsb2FkQ29tcHJlc3NlZFRleHR1cmVSZXNvdXJjZS5tanM/NmJkZiIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC90ZXh0dXJlL3VwbG9hZGVycy9nbFVwbG9hZEltYWdlUmVzb3VyY2UubWpzPzlkMGIiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS91cGxvYWRlcnMvZ2xVcGxvYWRWaWRlb1Jlc291cmNlLm1qcz81NWZjIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3RleHR1cmUvdXRpbHMvcGl4aVRvR2xNYXBzLm1qcz84MmNhIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3RleHR1cmUvdXRpbHMvYXBwbHlTdHlsZVBhcmFtcy5tanM/MzU1NyIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC90ZXh0dXJlL3V0aWxzL21hcEZvcm1hdFRvR2xGb3JtYXQubWpzPzg3Y2IiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS91dGlscy9tYXBGb3JtYXRUb0dsSW50ZXJuYWxGb3JtYXQubWpzP2IxMjMiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvdGV4dHVyZS91dGlscy9tYXBGb3JtYXRUb0dsVHlwZS5tanM/YjZmMCIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC90ZXh0dXJlL0dsVGV4dHVyZVN5c3RlbS5tanM/ZjNjOSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9XZWJHTFJlbmRlcmVyLm1qcz9hNjY3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IE1hdHJpeCB9IGZyb20gJy4uLy4uLy4uL21hdGhzL21hdHJpeC9NYXRyaXgubWpzJztcbmltcG9ydCB7IE1BWF9URVhUVVJFUyB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9iYXRjaGVyL3NoYXJlZC9jb25zdC5tanMnO1xuaW1wb3J0IHsgY29tcGlsZUhpZ2hTaGFkZXJHbFByb2dyYW0gfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvY29tcGlsZUhpZ2hTaGFkZXJUb1Byb2dyYW0ubWpzJztcbmltcG9ydCB7IGNvbG9yQml0R2wgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvY29sb3JCaXQubWpzJztcbmltcG9ydCB7IGdlbmVyYXRlVGV4dHVyZUJhdGNoQml0R2wgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvZ2VuZXJhdGVUZXh0dXJlQmF0Y2hCaXQubWpzJztcbmltcG9ydCB7IGxvY2FsVW5pZm9ybUJpdEdsIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL2xvY2FsVW5pZm9ybUJpdC5tanMnO1xuaW1wb3J0IHsgcm91bmRQaXhlbHNCaXRHbCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9yb3VuZFBpeGVsc0JpdC5tanMnO1xuaW1wb3J0IHsgYmF0Y2hTYW1wbGVyc1VuaWZvcm1Hcm91cCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL2JhdGNoU2FtcGxlcnNVbmlmb3JtR3JvdXAubWpzJztcbmltcG9ydCB7IFNoYWRlciB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci9TaGFkZXIubWpzJztcbmltcG9ydCB7IFVuaWZvcm1Hcm91cCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci9Vbmlmb3JtR3JvdXAubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHbEdyYXBoaWNzQWRhcHRvciB7XG4gIGluaXQoKSB7XG4gICAgY29uc3QgdW5pZm9ybXMgPSBuZXcgVW5pZm9ybUdyb3VwKHtcbiAgICAgIHVDb2xvcjogeyB2YWx1ZTogbmV3IEZsb2F0MzJBcnJheShbMSwgMSwgMSwgMV0pLCB0eXBlOiBcInZlYzQ8ZjMyPlwiIH0sXG4gICAgICB1VHJhbnNmb3JtTWF0cml4OiB7IHZhbHVlOiBuZXcgTWF0cml4KCksIHR5cGU6IFwibWF0M3gzPGYzMj5cIiB9LFxuICAgICAgdVJvdW5kOiB7IHZhbHVlOiAwLCB0eXBlOiBcImYzMlwiIH1cbiAgICB9KTtcbiAgICBjb25zdCBnbFByb2dyYW0gPSBjb21waWxlSGlnaFNoYWRlckdsUHJvZ3JhbSh7XG4gICAgICBuYW1lOiBcImdyYXBoaWNzXCIsXG4gICAgICBiaXRzOiBbXG4gICAgICAgIGNvbG9yQml0R2wsXG4gICAgICAgIGdlbmVyYXRlVGV4dHVyZUJhdGNoQml0R2woTUFYX1RFWFRVUkVTKSxcbiAgICAgICAgbG9jYWxVbmlmb3JtQml0R2wsXG4gICAgICAgIHJvdW5kUGl4ZWxzQml0R2xcbiAgICAgIF1cbiAgICB9KTtcbiAgICB0aGlzLnNoYWRlciA9IG5ldyBTaGFkZXIoe1xuICAgICAgZ2xQcm9ncmFtLFxuICAgICAgcmVzb3VyY2VzOiB7XG4gICAgICAgIGxvY2FsVW5pZm9ybXM6IHVuaWZvcm1zLFxuICAgICAgICBiYXRjaFNhbXBsZXJzOiBiYXRjaFNhbXBsZXJzVW5pZm9ybUdyb3VwXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZXhlY3V0ZShncmFwaGljc1BpcGUsIHJlbmRlcmFibGUpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gcmVuZGVyYWJsZS5jb250ZXh0O1xuICAgIGNvbnN0IHNoYWRlciA9IGNvbnRleHQuY3VzdG9tU2hhZGVyIHx8IHRoaXMuc2hhZGVyO1xuICAgIGNvbnN0IHJlbmRlcmVyID0gZ3JhcGhpY3NQaXBlLnJlbmRlcmVyO1xuICAgIGNvbnN0IGNvbnRleHRTeXN0ZW0gPSByZW5kZXJlci5ncmFwaGljc0NvbnRleHQ7XG4gICAgY29uc3Qge1xuICAgICAgZ2VvbWV0cnksXG4gICAgICBpbnN0cnVjdGlvbnNcbiAgICB9ID0gY29udGV4dFN5c3RlbS5nZXRDb250ZXh0UmVuZGVyRGF0YShjb250ZXh0KTtcbiAgICBzaGFkZXIuZ3JvdXBzWzBdID0gcmVuZGVyZXIuZ2xvYmFsVW5pZm9ybXMuYmluZEdyb3VwO1xuICAgIHJlbmRlcmVyLnNoYWRlci5iaW5kKHNoYWRlcik7XG4gICAgcmVuZGVyZXIuZ2VvbWV0cnkuYmluZChnZW9tZXRyeSwgc2hhZGVyLmdsUHJvZ3JhbSk7XG4gICAgY29uc3QgYmF0Y2hlcyA9IGluc3RydWN0aW9ucy5pbnN0cnVjdGlvbnM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnN0cnVjdGlvbnMuaW5zdHJ1Y3Rpb25TaXplOyBpKyspIHtcbiAgICAgIGNvbnN0IGJhdGNoID0gYmF0Y2hlc1tpXTtcbiAgICAgIGlmIChiYXRjaC5zaXplKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYmF0Y2gudGV4dHVyZXMudGV4dHVyZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICByZW5kZXJlci50ZXh0dXJlLmJpbmQoYmF0Y2gudGV4dHVyZXMudGV4dHVyZXNbal0sIGopO1xuICAgICAgICB9XG4gICAgICAgIHJlbmRlcmVyLmdlb21ldHJ5LmRyYXcoXCJ0cmlhbmdsZS1saXN0XCIsIGJhdGNoLnNpemUsIGJhdGNoLnN0YXJ0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnNoYWRlci5kZXN0cm95KHRydWUpO1xuICAgIHRoaXMuc2hhZGVyID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsR3JhcGhpY3NBZGFwdG9yLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xQaXBlc0FkYXB0b3JcbiAgXSxcbiAgbmFtZTogXCJncmFwaGljc1wiXG59O1xuXG5leHBvcnQgeyBHbEdyYXBoaWNzQWRhcHRvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xHcmFwaGljc0FkYXB0b3IubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgY29tcGlsZUhpZ2hTaGFkZXJHbFByb2dyYW0gfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvY29tcGlsZUhpZ2hTaGFkZXJUb1Byb2dyYW0ubWpzJztcbmltcG9ydCB7IGxvY2FsVW5pZm9ybUJpdEdsIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL2xvY2FsVW5pZm9ybUJpdC5tanMnO1xuaW1wb3J0IHsgcm91bmRQaXhlbHNCaXRHbCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9yb3VuZFBpeGVsc0JpdC5tanMnO1xuaW1wb3J0IHsgdGV4dHVyZUJpdEdsIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL3RleHR1cmVCaXQubWpzJztcbmltcG9ydCB7IFNoYWRlciB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci9TaGFkZXIubWpzJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL1RleHR1cmUubWpzJztcbmltcG9ydCB7IHdhcm4gfSBmcm9tICcuLi8uLi8uLi91dGlscy9sb2dnaW5nL3dhcm4ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHbE1lc2hBZGFwdG9yIHtcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBnbFByb2dyYW0gPSBjb21waWxlSGlnaFNoYWRlckdsUHJvZ3JhbSh7XG4gICAgICBuYW1lOiBcIm1lc2hcIixcbiAgICAgIGJpdHM6IFtcbiAgICAgICAgbG9jYWxVbmlmb3JtQml0R2wsXG4gICAgICAgIHRleHR1cmVCaXRHbCxcbiAgICAgICAgcm91bmRQaXhlbHNCaXRHbFxuICAgICAgXVxuICAgIH0pO1xuICAgIHRoaXMuX3NoYWRlciA9IG5ldyBTaGFkZXIoe1xuICAgICAgZ2xQcm9ncmFtLFxuICAgICAgcmVzb3VyY2VzOiB7XG4gICAgICAgIHVUZXh0dXJlOiBUZXh0dXJlLkVNUFRZLnNvdXJjZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGV4ZWN1dGUobWVzaFBpcGUsIG1lc2gpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IG1lc2hQaXBlLnJlbmRlcmVyO1xuICAgIGxldCBzaGFkZXIgPSBtZXNoLl9zaGFkZXI7XG4gICAgaWYgKCFzaGFkZXIpIHtcbiAgICAgIHNoYWRlciA9IHRoaXMuX3NoYWRlcjtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IG1lc2gudGV4dHVyZS5zb3VyY2U7XG4gICAgICBzaGFkZXIucmVzb3VyY2VzLnVUZXh0dXJlID0gc291cmNlO1xuICAgICAgc2hhZGVyLnJlc291cmNlcy51U2FtcGxlciA9IHNvdXJjZS5zdHlsZTtcbiAgICB9IGVsc2UgaWYgKCFzaGFkZXIuZ2xQcm9ncmFtKSB7XG4gICAgICB3YXJuKFwiTWVzaCBzaGFkZXIgaGFzIG5vIGdsUHJvZ3JhbVwiLCBtZXNoLnNoYWRlcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNoYWRlci5ncm91cHNbMTAwXSA9IHJlbmRlcmVyLmdsb2JhbFVuaWZvcm1zLmJpbmRHcm91cDtcbiAgICBzaGFkZXIuZ3JvdXBzWzEwMV0gPSBtZXNoUGlwZS5sb2NhbFVuaWZvcm1zQmluZEdyb3VwO1xuICAgIHJlbmRlcmVyLmVuY29kZXIuZHJhdyh7XG4gICAgICBnZW9tZXRyeTogbWVzaC5fZ2VvbWV0cnksXG4gICAgICBzaGFkZXIsXG4gICAgICBzdGF0ZTogbWVzaC5zdGF0ZVxuICAgIH0pO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fc2hhZGVyLmRlc3Ryb3kodHJ1ZSk7XG4gICAgdGhpcy5fc2hhZGVyID0gbnVsbDtcbiAgfVxufVxuR2xNZXNoQWRhcHRvci5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMUGlwZXNBZGFwdG9yXG4gIF0sXG4gIG5hbWU6IFwibWVzaFwiXG59O1xuXG5leHBvcnQgeyBHbE1lc2hBZGFwdG9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbE1lc2hBZGFwdG9yLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IGNvbXBpbGVIaWdoU2hhZGVyR2xQcm9ncmFtIH0gZnJvbSAnLi4vLi4vaGlnaC1zaGFkZXIvY29tcGlsZUhpZ2hTaGFkZXJUb1Byb2dyYW0ubWpzJztcbmltcG9ydCB7IGNvbG9yQml0R2wgfSBmcm9tICcuLi8uLi9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9jb2xvckJpdC5tanMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVUZXh0dXJlQmF0Y2hCaXRHbCB9IGZyb20gJy4uLy4uL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL2dlbmVyYXRlVGV4dHVyZUJhdGNoQml0Lm1qcyc7XG5pbXBvcnQgeyByb3VuZFBpeGVsc0JpdEdsIH0gZnJvbSAnLi4vLi4vaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvcm91bmRQaXhlbHNCaXQubWpzJztcbmltcG9ydCB7IGJhdGNoU2FtcGxlcnNVbmlmb3JtR3JvdXAgfSBmcm9tICcuLi8uLi9yZW5kZXJlcnMvZ2wvc2hhZGVyL2JhdGNoU2FtcGxlcnNVbmlmb3JtR3JvdXAubWpzJztcbmltcG9ydCB7IFNoYWRlciB9IGZyb20gJy4uLy4uL3JlbmRlcmVycy9zaGFyZWQvc2hhZGVyL1NoYWRlci5tanMnO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuLi8uLi9yZW5kZXJlcnMvc2hhcmVkL3N0YXRlL1N0YXRlLm1qcyc7XG5pbXBvcnQgeyBNQVhfVEVYVFVSRVMgfSBmcm9tICcuLi9zaGFyZWQvY29uc3QubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHbEJhdGNoQWRhcHRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2RpZFVwbG9hZCA9IGZhbHNlO1xuICAgIHRoaXMuX3RlbXBTdGF0ZSA9IFN0YXRlLmZvcjJkKCk7XG4gIH1cbiAgaW5pdChiYXRjaGVyUGlwZSkge1xuICAgIGNvbnN0IGdsUHJvZ3JhbSA9IGNvbXBpbGVIaWdoU2hhZGVyR2xQcm9ncmFtKHtcbiAgICAgIG5hbWU6IFwiYmF0Y2hcIixcbiAgICAgIGJpdHM6IFtcbiAgICAgICAgY29sb3JCaXRHbCxcbiAgICAgICAgZ2VuZXJhdGVUZXh0dXJlQmF0Y2hCaXRHbChNQVhfVEVYVFVSRVMpLFxuICAgICAgICByb3VuZFBpeGVsc0JpdEdsXG4gICAgICBdXG4gICAgfSk7XG4gICAgdGhpcy5fc2hhZGVyID0gbmV3IFNoYWRlcih7XG4gICAgICBnbFByb2dyYW0sXG4gICAgICByZXNvdXJjZXM6IHtcbiAgICAgICAgYmF0Y2hTYW1wbGVyczogYmF0Y2hTYW1wbGVyc1VuaWZvcm1Hcm91cFxuICAgICAgfVxuICAgIH0pO1xuICAgIGJhdGNoZXJQaXBlLnJlbmRlcmVyLnJ1bm5lcnMuY29udGV4dENoYW5nZS5hZGQodGhpcyk7XG4gIH1cbiAgY29udGV4dENoYW5nZSgpIHtcbiAgICB0aGlzLl9kaWRVcGxvYWQgPSBmYWxzZTtcbiAgfVxuICBzdGFydChiYXRjaFBpcGUsIGdlb21ldHJ5KSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBiYXRjaFBpcGUucmVuZGVyZXI7XG4gICAgcmVuZGVyZXIuc2hhZGVyLmJpbmQodGhpcy5fc2hhZGVyLCB0aGlzLl9kaWRVcGxvYWQpO1xuICAgIHJlbmRlcmVyLnNoYWRlci51cGRhdGVVbmlmb3JtR3JvdXAocmVuZGVyZXIuZ2xvYmFsVW5pZm9ybXMudW5pZm9ybUdyb3VwKTtcbiAgICByZW5kZXJlci5nZW9tZXRyeS5iaW5kKGdlb21ldHJ5LCB0aGlzLl9zaGFkZXIuZ2xQcm9ncmFtKTtcbiAgfVxuICBleGVjdXRlKGJhdGNoUGlwZSwgYmF0Y2gpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IGJhdGNoUGlwZS5yZW5kZXJlcjtcbiAgICB0aGlzLl9kaWRVcGxvYWQgPSB0cnVlO1xuICAgIHRoaXMuX3RlbXBTdGF0ZS5ibGVuZE1vZGUgPSBiYXRjaC5ibGVuZE1vZGU7XG4gICAgcmVuZGVyZXIuc3RhdGUuc2V0KHRoaXMuX3RlbXBTdGF0ZSk7XG4gICAgY29uc3QgdGV4dHVyZXMgPSBiYXRjaC50ZXh0dXJlcy50ZXh0dXJlcztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZW5kZXJlci50ZXh0dXJlLmJpbmQodGV4dHVyZXNbaV0sIGkpO1xuICAgIH1cbiAgICByZW5kZXJlci5nZW9tZXRyeS5kcmF3KFwidHJpYW5nbGUtbGlzdFwiLCBiYXRjaC5zaXplLCBiYXRjaC5zdGFydCk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9zaGFkZXIuZGVzdHJveSh0cnVlKTtcbiAgICB0aGlzLl9zaGFkZXIgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR2xCYXRjaEFkYXB0b3IuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzQWRhcHRvclxuICBdLFxuICBuYW1lOiBcImJhdGNoXCJcbn07XG5cbmV4cG9ydCB7IEdsQmF0Y2hBZGFwdG9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbEJhdGNoQWRhcHRvci5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBCVUZGRVJfVFlQRSA9IC8qIEBfX1BVUkVfXyAqLyAoKEJVRkZFUl9UWVBFMikgPT4ge1xuICBCVUZGRVJfVFlQRTJbQlVGRkVSX1RZUEUyW1wiRUxFTUVOVF9BUlJBWV9CVUZGRVJcIl0gPSAzNDk2M10gPSBcIkVMRU1FTlRfQVJSQVlfQlVGRkVSXCI7XG4gIEJVRkZFUl9UWVBFMltCVUZGRVJfVFlQRTJbXCJBUlJBWV9CVUZGRVJcIl0gPSAzNDk2Ml0gPSBcIkFSUkFZX0JVRkZFUlwiO1xuICBCVUZGRVJfVFlQRTJbQlVGRkVSX1RZUEUyW1wiVU5JRk9STV9CVUZGRVJcIl0gPSAzNTM0NV0gPSBcIlVOSUZPUk1fQlVGRkVSXCI7XG4gIHJldHVybiBCVUZGRVJfVFlQRTI7XG59KShCVUZGRVJfVFlQRSB8fCB7fSk7XG5cbmV4cG9ydCB7IEJVRkZFUl9UWVBFIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdC5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsQnVmZmVyIHtcbiAgY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlKSB7XG4gICAgdGhpcy5idWZmZXIgPSBidWZmZXIgfHwgbnVsbDtcbiAgICB0aGlzLnVwZGF0ZUlEID0gLTE7XG4gICAgdGhpcy5ieXRlTGVuZ3RoID0gLTE7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgfVxufVxuXG5leHBvcnQgeyBHbEJ1ZmZlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xCdWZmZXIubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgQnVmZmVyVXNhZ2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvYnVmZmVyL2NvbnN0Lm1qcyc7XG5pbXBvcnQgeyBCVUZGRVJfVFlQRSB9IGZyb20gJy4vY29uc3QubWpzJztcbmltcG9ydCB7IEdsQnVmZmVyIH0gZnJvbSAnLi9HbEJ1ZmZlci5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsQnVmZmVyU3lzdGVtIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyIHRoaXMgU3lzdGVtIHdvcmtzIGZvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fZ3B1QnVmZmVycyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIC8qKiBDYWNoZSBrZWVwaW5nIHRyYWNrIG9mIHRoZSBiYXNlIGJvdW5kIGJ1ZmZlciBiYXNlcyAqL1xuICAgIHRoaXMuX2JvdW5kQnVmZmVyQmFzZXMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgICB0aGlzLl9nbCA9IG51bGw7XG4gICAgdGhpcy5fZ3B1QnVmZmVycyA9IG51bGw7XG4gICAgdGhpcy5fYm91bmRCdWZmZXJCYXNlcyA9IG51bGw7XG4gIH1cbiAgLyoqIFNldHMgdXAgdGhlIHJlbmRlcmVyIGNvbnRleHQgYW5kIG5lY2Vzc2FyeSBidWZmZXJzLiAqL1xuICBjb250ZXh0Q2hhbmdlKCkge1xuICAgIHRoaXMuX2dwdUJ1ZmZlcnMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9nbCA9IHRoaXMuX3JlbmRlcmVyLmdsO1xuICB9XG4gIGdldEdsQnVmZmVyKGJ1ZmZlcikge1xuICAgIHJldHVybiB0aGlzLl9ncHVCdWZmZXJzW2J1ZmZlci51aWRdIHx8IHRoaXMuY3JlYXRlR0xCdWZmZXIoYnVmZmVyKTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBiaW5kcyBzcGVjaWZpZWQgYnVmZmVyLiBPbiBmaXJzdCBydW4sIGl0IHdpbGwgY3JlYXRlIHRoZSB3ZWJHTCBidWZmZXJzIGZvciB0aGUgY29udGV4dCB0b29cbiAgICogQHBhcmFtIGJ1ZmZlciAtIHRoZSBidWZmZXIgdG8gYmluZCB0byB0aGUgcmVuZGVyZXJcbiAgICovXG4gIGJpbmQoYnVmZmVyKSB7XG4gICAgY29uc3QgeyBfZ2w6IGdsIH0gPSB0aGlzO1xuICAgIGNvbnN0IGdsQnVmZmVyID0gdGhpcy5nZXRHbEJ1ZmZlcihidWZmZXIpO1xuICAgIGdsLmJpbmRCdWZmZXIoZ2xCdWZmZXIudHlwZSwgZ2xCdWZmZXIuYnVmZmVyKTtcbiAgfVxuICAvKipcbiAgICogQmluZHMgYW4gdW5pZm9ybSBidWZmZXIgdG8gYXQgdGhlIGdpdmVuIGluZGV4LlxuICAgKlxuICAgKiBBIGNhY2hlIGlzIHVzZWQgc28gYSBidWZmZXIgd2lsbCBub3QgYmUgYm91bmQgYWdhaW4gaWYgYWxyZWFkeSBib3VuZC5cbiAgICogQHBhcmFtIGJ1ZmZlciAtIHRoZSBidWZmZXIgdG8gYmluZFxuICAgKiBAcGFyYW0gaW5kZXggLSB0aGUgYmFzZSBpbmRleCB0byBiaW5kIGl0IHRvLlxuICAgKi9cbiAgYmluZEJ1ZmZlckJhc2UoYnVmZmVyLCBpbmRleCkge1xuICAgIGNvbnN0IHsgX2dsOiBnbCB9ID0gdGhpcztcbiAgICBpZiAodGhpcy5fYm91bmRCdWZmZXJCYXNlc1tpbmRleF0gIT09IGJ1ZmZlcikge1xuICAgICAgY29uc3QgZ2xCdWZmZXIgPSB0aGlzLmdldEdsQnVmZmVyKGJ1ZmZlcik7XG4gICAgICB0aGlzLl9ib3VuZEJ1ZmZlckJhc2VzW2luZGV4XSA9IGJ1ZmZlcjtcbiAgICAgIGdsLmJpbmRCdWZmZXJCYXNlKGdsLlVOSUZPUk1fQlVGRkVSLCBpbmRleCwgZ2xCdWZmZXIuYnVmZmVyKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEJpbmRzIGEgYnVmZmVyIHdoaWxzdCBhbHNvIGJpbmRpbmcgaXRzIHJhbmdlLlxuICAgKiBUaGlzIHdpbGwgbWFrZSB0aGUgYnVmZmVyIHN0YXJ0IGZyb20gdGhlIG9mZnNldCBzdXBwbGllZCByYXRoZXIgdGhhbiAwIHdoZW4gaXQgaXMgcmVhZC5cbiAgICogQHBhcmFtIGJ1ZmZlciAtIHRoZSBidWZmZXIgdG8gYmluZFxuICAgKiBAcGFyYW0gaW5kZXggLSB0aGUgYmFzZSBpbmRleCB0byBiaW5kIGF0LCBkZWZhdWx0cyB0byAwXG4gICAqIEBwYXJhbSBvZmZzZXQgLSB0aGUgb2Zmc2V0IHRvIGJpbmQgYXQgKHRoaXMgaXMgYmxvY2tzIG9mIDI1NikuIDAgPSAwLCAxID0gMjU2LCAyID0gNTEyIGV0Y1xuICAgKi9cbiAgYmluZEJ1ZmZlclJhbmdlKGJ1ZmZlciwgaW5kZXgsIG9mZnNldCkge1xuICAgIGNvbnN0IHsgX2dsOiBnbCB9ID0gdGhpcztcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgICBjb25zdCBnbEJ1ZmZlciA9IHRoaXMuZ2V0R2xCdWZmZXIoYnVmZmVyKTtcbiAgICBnbC5iaW5kQnVmZmVyUmFuZ2UoZ2wuVU5JRk9STV9CVUZGRVIsIGluZGV4IHx8IDAsIGdsQnVmZmVyLmJ1ZmZlciwgb2Zmc2V0ICogMjU2LCAyNTYpO1xuICB9XG4gIC8qKlxuICAgKiBXaWxsIGVuc3VyZSB0aGUgZGF0YSBpbiB0aGUgYnVmZmVyIGlzIHVwbG9hZGVkIHRvIHRoZSBHUFUuXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgLSB0aGUgYnVmZmVyIHRvIHVwZGF0ZVxuICAgKi9cbiAgdXBkYXRlQnVmZmVyKGJ1ZmZlcikge1xuICAgIGNvbnN0IHsgX2dsOiBnbCB9ID0gdGhpcztcbiAgICBjb25zdCBnbEJ1ZmZlciA9IHRoaXMuZ2V0R2xCdWZmZXIoYnVmZmVyKTtcbiAgICBpZiAoYnVmZmVyLl91cGRhdGVJRCA9PT0gZ2xCdWZmZXIudXBkYXRlSUQpIHtcbiAgICAgIHJldHVybiBnbEJ1ZmZlcjtcbiAgICB9XG4gICAgZ2xCdWZmZXIudXBkYXRlSUQgPSBidWZmZXIuX3VwZGF0ZUlEO1xuICAgIGdsLmJpbmRCdWZmZXIoZ2xCdWZmZXIudHlwZSwgZ2xCdWZmZXIuYnVmZmVyKTtcbiAgICBjb25zdCBkYXRhID0gYnVmZmVyLmRhdGE7XG4gICAgaWYgKGdsQnVmZmVyLmJ5dGVMZW5ndGggPj0gYnVmZmVyLmRhdGEuYnl0ZUxlbmd0aCkge1xuICAgICAgZ2wuYnVmZmVyU3ViRGF0YShnbEJ1ZmZlci50eXBlLCAwLCBkYXRhLCAwLCBidWZmZXIuX3VwZGF0ZVNpemUgLyBkYXRhLkJZVEVTX1BFUl9FTEVNRU5UKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZHJhd1R5cGUgPSBidWZmZXIuZGVzY3JpcHRvci51c2FnZSAmIEJ1ZmZlclVzYWdlLlNUQVRJQyA/IGdsLlNUQVRJQ19EUkFXIDogZ2wuRFlOQU1JQ19EUkFXO1xuICAgICAgZ2xCdWZmZXIuYnl0ZUxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgIGdsLmJ1ZmZlckRhdGEoZ2xCdWZmZXIudHlwZSwgZGF0YSwgZHJhd1R5cGUpO1xuICAgIH1cbiAgICByZXR1cm4gZ2xCdWZmZXI7XG4gIH1cbiAgLyoqIGRpc3Bvc2UgYWxsIFdlYkdMIHJlc291cmNlcyBvZiBhbGwgbWFuYWdlZCBidWZmZXJzICovXG4gIGRlc3Ryb3lBbGwoKSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuX2dwdUJ1ZmZlcnMpIHtcbiAgICAgIGdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9ncHVCdWZmZXJzW2lkXS5idWZmZXIpO1xuICAgIH1cbiAgICB0aGlzLl9ncHVCdWZmZXJzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cbiAgLyoqXG4gICAqIERpc3Bvc2VzIGJ1ZmZlclxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIC0gYnVmZmVyIHdpdGggZGF0YVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjb250ZXh0TG9zdD1mYWxzZV0gLSBJZiBjb250ZXh0IHdhcyBsb3N0LCB3ZSBzdXBwcmVzcyBkZWxldGVWZXJ0ZXhBcnJheVxuICAgKi9cbiAgb25CdWZmZXJEZXN0cm95KGJ1ZmZlciwgY29udGV4dExvc3QpIHtcbiAgICBjb25zdCBnbEJ1ZmZlciA9IHRoaXMuX2dwdUJ1ZmZlcnNbYnVmZmVyLnVpZF07XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBpZiAoIWNvbnRleHRMb3N0KSB7XG4gICAgICBnbC5kZWxldGVCdWZmZXIoZ2xCdWZmZXIuYnVmZmVyKTtcbiAgICB9XG4gICAgdGhpcy5fZ3B1QnVmZmVyc1tidWZmZXIudWlkXSA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIGNyZWF0ZXMgYW5kIGF0dGFjaGVzIGEgR0xCdWZmZXIgb2JqZWN0IHRpZWQgdG8gdGhlIGN1cnJlbnQgY29udGV4dC5cbiAgICogQHBhcmFtIGJ1ZmZlclxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBjcmVhdGVHTEJ1ZmZlcihidWZmZXIpIHtcbiAgICBjb25zdCB7IF9nbDogZ2wgfSA9IHRoaXM7XG4gICAgbGV0IHR5cGUgPSBCVUZGRVJfVFlQRS5BUlJBWV9CVUZGRVI7XG4gICAgaWYgKGJ1ZmZlci5kZXNjcmlwdG9yLnVzYWdlICYgQnVmZmVyVXNhZ2UuSU5ERVgpIHtcbiAgICAgIHR5cGUgPSBCVUZGRVJfVFlQRS5FTEVNRU5UX0FSUkFZX0JVRkZFUjtcbiAgICB9IGVsc2UgaWYgKGJ1ZmZlci5kZXNjcmlwdG9yLnVzYWdlICYgQnVmZmVyVXNhZ2UuVU5JRk9STSkge1xuICAgICAgdHlwZSA9IEJVRkZFUl9UWVBFLlVOSUZPUk1fQlVGRkVSO1xuICAgIH1cbiAgICBjb25zdCBnbEJ1ZmZlciA9IG5ldyBHbEJ1ZmZlcihnbC5jcmVhdGVCdWZmZXIoKSwgdHlwZSk7XG4gICAgdGhpcy5fZ3B1QnVmZmVyc1tidWZmZXIudWlkXSA9IGdsQnVmZmVyO1xuICAgIGJ1ZmZlci5vbihcImRlc3Ryb3lcIiwgdGhpcy5vbkJ1ZmZlckRlc3Ryb3ksIHRoaXMpO1xuICAgIHJldHVybiBnbEJ1ZmZlcjtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsQnVmZmVyU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJidWZmZXJcIlxufTtcblxuZXhwb3J0IHsgR2xCdWZmZXJTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsQnVmZmVyU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IHdhcm4gfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9sb2dnaW5nL3dhcm4ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBfR2xDb250ZXh0U3lzdGVtID0gY2xhc3MgX0dsQ29udGV4dFN5c3RlbSB7XG4gIC8qKiBAcGFyYW0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIgdGhpcyBTeXN0ZW0gd29ya3MgZm9yLiAqL1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIC8qKlxuICAgICAqIEZlYXR1cmVzIHN1cHBvcnRlZCBieSBjdXJyZW50IHJlbmRlcmVyLlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgdGhpcy5zdXBwb3J0cyA9IHtcbiAgICAgIC8qKiBTdXBwb3J0IGZvciAzMi1iaXQgaW5kaWNlcyBidWZmZXIuICovXG4gICAgICB1aW50MzJJbmRpY2VzOiB0cnVlLFxuICAgICAgLyoqIFN1cHBvcnQgZm9yIFVuaWZvcm1CdWZmZXJPYmplY3RzICovXG4gICAgICB1bmlmb3JtQnVmZmVyT2JqZWN0OiB0cnVlLFxuICAgICAgLyoqIFN1cHBvcnQgZm9yIFZlcnRleEFycmF5T2JqZWN0cyAqL1xuICAgICAgdmVydGV4QXJyYXlPYmplY3Q6IHRydWUsXG4gICAgICAvKiogU3VwcG9ydCBmb3IgU1JHQiB0ZXh0dXJlIGZvcm1hdCAqL1xuICAgICAgc3JnYlRleHR1cmVzOiB0cnVlLFxuICAgICAgLyoqIFN1cHBvcnQgZm9yIHdyYXBwaW5nIG1vZGVzIGlmIGEgdGV4dHVyZSBpcyBub24tcG93ZXIgb2YgdHdvICovXG4gICAgICBub25Qb3dPZjJ3cmFwcGluZzogdHJ1ZSxcbiAgICAgIC8qKiBTdXBwb3J0IGZvciBNU0FBIChhbnRpYWxpYXNpbmcgb2YgZHluYW1pYyB0ZXh0dXJlcykgKi9cbiAgICAgIG1zYWE6IHRydWUsXG4gICAgICAvKiogU3VwcG9ydCBmb3IgbWlwbWFwcyBpZiBhIHRleHR1cmUgaXMgbm9uLXBvd2VyIG9mIHR3byAqL1xuICAgICAgbm9uUG93T2YybWlwbWFwczogdHJ1ZVxuICAgIH07XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmhhbmRsZUNvbnRleHRMb3N0ID0gdGhpcy5oYW5kbGVDb250ZXh0TG9zdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlQ29udGV4dFJlc3RvcmVkID0gdGhpcy5oYW5kbGVDb250ZXh0UmVzdG9yZWQuYmluZCh0aGlzKTtcbiAgfVxuICAvKipcbiAgICogYHRydWVgIGlmIHRoZSBjb250ZXh0IGlzIGxvc3RcbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgaXNMb3N0KCkge1xuICAgIHJldHVybiAhdGhpcy5nbCB8fCB0aGlzLmdsLmlzQ29udGV4dExvc3QoKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyB0aGUgY29udGV4dCBjaGFuZ2UgZXZlbnQuXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCAtIE5ldyBXZWJHTCBjb250ZXh0LlxuICAgKi9cbiAgY29udGV4dENoYW5nZShnbCkge1xuICAgIHRoaXMuZ2wgPSBnbDtcbiAgICB0aGlzLl9yZW5kZXJlci5nbCA9IGdsO1xuICB9XG4gIGluaXQob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7IC4uLl9HbENvbnRleHRTeXN0ZW0uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcbiAgICBpZiAob3B0aW9ucy5jb250ZXh0KSB7XG4gICAgICB0aGlzLmluaXRGcm9tQ29udGV4dChvcHRpb25zLmNvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBhbHBoYSA9IHRoaXMuX3JlbmRlcmVyLmJhY2tncm91bmQuYWxwaGEgPCAxO1xuICAgICAgY29uc3QgcHJlbXVsdGlwbGllZEFscGhhID0gb3B0aW9ucy5wcmVtdWx0aXBsaWVkQWxwaGEgPz8gdHJ1ZTtcbiAgICAgIGNvbnN0IGFudGlhbGlhcyA9IG9wdGlvbnMuYW50aWFsaWFzICYmICF0aGlzLl9yZW5kZXJlci5iYWNrQnVmZmVyLnVzZUJhY2tCdWZmZXI7XG4gICAgICB0aGlzLmNyZWF0ZUNvbnRleHQob3B0aW9ucy5wcmVmZXJXZWJHTFZlcnNpb24sIHtcbiAgICAgICAgYWxwaGEsXG4gICAgICAgIHByZW11bHRpcGxpZWRBbHBoYSxcbiAgICAgICAgYW50aWFsaWFzLFxuICAgICAgICBzdGVuY2lsOiB0cnVlLFxuICAgICAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IG9wdGlvbnMucHJlc2VydmVEcmF3aW5nQnVmZmVyLFxuICAgICAgICBwb3dlclByZWZlcmVuY2U6IG9wdGlvbnMucG93ZXJQcmVmZXJlbmNlID8/IFwiZGVmYXVsdFwiXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBjb250ZXh0LlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCAtIFdlYkdMIGNvbnRleHRcbiAgICovXG4gIGluaXRGcm9tQ29udGV4dChnbCkge1xuICAgIHRoaXMuZ2wgPSBnbDtcbiAgICB0aGlzLndlYkdMVmVyc2lvbiA9IGdsIGluc3RhbmNlb2YgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCA/IDIgOiAxO1xuICAgIHRoaXMuZ2V0RXh0ZW5zaW9ucygpO1xuICAgIHRoaXMudmFsaWRhdGVDb250ZXh0KGdsKTtcbiAgICB0aGlzLl9yZW5kZXJlci5ydW5uZXJzLmNvbnRleHRDaGFuZ2UuZW1pdChnbCk7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX3JlbmRlcmVyLnZpZXcuY2FudmFzO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dGxvc3RcIiwgdGhpcy5oYW5kbGVDb250ZXh0TG9zdCwgZmFsc2UpO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dHJlc3RvcmVkXCIsIHRoaXMuaGFuZGxlQ29udGV4dFJlc3RvcmVkLCBmYWxzZSk7XG4gIH1cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgZnJvbSBjb250ZXh0IG9wdGlvbnNcbiAgICogQHByb3RlY3RlZFxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MQ2FudmFzRWxlbWVudC9nZXRDb250ZXh0XG4gICAqIEBwYXJhbSBwcmVmZXJXZWJHTFZlcnNpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBjb250ZXh0IGF0dHJpYnV0ZXNcbiAgICovXG4gIGNyZWF0ZUNvbnRleHQocHJlZmVyV2ViR0xWZXJzaW9uLCBvcHRpb25zKSB7XG4gICAgbGV0IGdsO1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuX3JlbmRlcmVyLnZpZXcuY2FudmFzO1xuICAgIGlmIChwcmVmZXJXZWJHTFZlcnNpb24gPT09IDIpIHtcbiAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbDJcIiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlmICghZ2wpIHtcbiAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiLCBvcHRpb25zKTtcbiAgICAgIGlmICghZ2wpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgV2ViR0wuIFRyeSB1c2luZyB0aGUgY2FudmFzIHJlbmRlcmVyXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmdsID0gZ2w7XG4gICAgdGhpcy5pbml0RnJvbUNvbnRleHQodGhpcy5nbCk7XG4gIH1cbiAgLyoqIEF1dG8tcG9wdWxhdGUgdGhlIHtAbGluayBHbENvbnRleHRTeXN0ZW0uZXh0ZW5zaW9ucyBleHRlbnNpb25zfS4gKi9cbiAgZ2V0RXh0ZW5zaW9ucygpIHtcbiAgICBjb25zdCB7IGdsIH0gPSB0aGlzO1xuICAgIGNvbnN0IGNvbW1vbiA9IHtcbiAgICAgIGFuaXNvdHJvcGljRmlsdGVyaW5nOiBnbC5nZXRFeHRlbnNpb24oXCJFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIiksXG4gICAgICBmbG9hdFRleHR1cmVMaW5lYXI6IGdsLmdldEV4dGVuc2lvbihcIk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhclwiKSxcbiAgICAgIHMzdGM6IGdsLmdldEV4dGVuc2lvbihcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpLFxuICAgICAgczN0Y19zUkdCOiBnbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y19zcmdiXCIpLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICAgIGV0YzogZ2wuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0Y1wiKSxcbiAgICAgIGV0YzE6IGdsLmdldEV4dGVuc2lvbihcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxXCIpLFxuICAgICAgcHZydGM6IGdsLmdldEV4dGVuc2lvbihcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Y1wiKSB8fCBnbC5nZXRFeHRlbnNpb24oXCJXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpLFxuICAgICAgYXRjOiBnbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXRjXCIpLFxuICAgICAgYXN0YzogZ2wuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGNcIiksXG4gICAgICBicHRjOiBnbC5nZXRFeHRlbnNpb24oXCJFWFRfdGV4dHVyZV9jb21wcmVzc2lvbl9icHRjXCIpLFxuICAgICAgcmd0YzogZ2wuZ2V0RXh0ZW5zaW9uKFwiRVhUX3RleHR1cmVfY29tcHJlc3Npb25fcmd0Y1wiKSxcbiAgICAgIGxvc2VDb250ZXh0OiBnbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9sb3NlX2NvbnRleHRcIilcbiAgICB9O1xuICAgIGlmICh0aGlzLndlYkdMVmVyc2lvbiA9PT0gMSkge1xuICAgICAgdGhpcy5leHRlbnNpb25zID0ge1xuICAgICAgICAuLi5jb21tb24sXG4gICAgICAgIGRyYXdCdWZmZXJzOiBnbC5nZXRFeHRlbnNpb24oXCJXRUJHTF9kcmF3X2J1ZmZlcnNcIiksXG4gICAgICAgIGRlcHRoVGV4dHVyZTogZ2wuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfZGVwdGhfdGV4dHVyZVwiKSxcbiAgICAgICAgdmVydGV4QXJyYXlPYmplY3Q6IGdsLmdldEV4dGVuc2lvbihcIk9FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0XCIpIHx8IGdsLmdldEV4dGVuc2lvbihcIk1PWl9PRVNfdmVydGV4X2FycmF5X29iamVjdFwiKSB8fCBnbC5nZXRFeHRlbnNpb24oXCJXRUJLSVRfT0VTX3ZlcnRleF9hcnJheV9vYmplY3RcIiksXG4gICAgICAgIHVpbnQzMkVsZW1lbnRJbmRleDogZ2wuZ2V0RXh0ZW5zaW9uKFwiT0VTX2VsZW1lbnRfaW5kZXhfdWludFwiKSxcbiAgICAgICAgLy8gRmxvYXRzIGFuZCBoYWxmLWZsb2F0c1xuICAgICAgICBmbG9hdFRleHR1cmU6IGdsLmdldEV4dGVuc2lvbihcIk9FU190ZXh0dXJlX2Zsb2F0XCIpLFxuICAgICAgICBmbG9hdFRleHR1cmVMaW5lYXI6IGdsLmdldEV4dGVuc2lvbihcIk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhclwiKSxcbiAgICAgICAgdGV4dHVyZUhhbGZGbG9hdDogZ2wuZ2V0RXh0ZW5zaW9uKFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdFwiKSxcbiAgICAgICAgdGV4dHVyZUhhbGZGbG9hdExpbmVhcjogZ2wuZ2V0RXh0ZW5zaW9uKFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXJcIiksXG4gICAgICAgIHZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRTogZ2wuZ2V0RXh0ZW5zaW9uKFwiQU5HTEVfaW5zdGFuY2VkX2FycmF5c1wiKSxcbiAgICAgICAgc3JnYjogZ2wuZ2V0RXh0ZW5zaW9uKFwiRVhUX3NSR0JcIilcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXh0ZW5zaW9ucyA9IHtcbiAgICAgICAgLi4uY29tbW9uLFxuICAgICAgICBjb2xvckJ1ZmZlckZsb2F0OiBnbC5nZXRFeHRlbnNpb24oXCJFWFRfY29sb3JfYnVmZmVyX2Zsb2F0XCIpXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyBhIGxvc3Qgd2ViZ2wgY29udGV4dFxuICAgKiBAcGFyYW0ge1dlYkdMQ29udGV4dEV2ZW50fSBldmVudCAtIFRoZSBjb250ZXh0IGxvc3QgZXZlbnQuXG4gICAqL1xuICBoYW5kbGVDb250ZXh0TG9zdChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHRoaXMuX2NvbnRleHRMb3NzRm9yY2VkKSB7XG4gICAgICB0aGlzLl9jb250ZXh0TG9zc0ZvcmNlZCA9IGZhbHNlO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmdsLmlzQ29udGV4dExvc3QoKSkge1xuICAgICAgICAgIHRoaXMuZXh0ZW5zaW9ucy5sb3NlQ29udGV4dD8ucmVzdG9yZUNvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG4gIC8qKiBIYW5kbGVzIGEgcmVzdG9yZWQgd2ViZ2wgY29udGV4dC4gKi9cbiAgaGFuZGxlQ29udGV4dFJlc3RvcmVkKCkge1xuICAgIHRoaXMuX3JlbmRlcmVyLnJ1bm5lcnMuY29udGV4dENoYW5nZS5lbWl0KHRoaXMuZ2wpO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX3JlbmRlcmVyLnZpZXcuY2FudmFzO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3ZWJnbGNvbnRleHRsb3N0XCIsIHRoaXMuaGFuZGxlQ29udGV4dExvc3QpO1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dHJlc3RvcmVkXCIsIHRoaXMuaGFuZGxlQ29udGV4dFJlc3RvcmVkKTtcbiAgICB0aGlzLmdsLnVzZVByb2dyYW0obnVsbCk7XG4gICAgdGhpcy5leHRlbnNpb25zLmxvc2VDb250ZXh0Py5sb3NlQ29udGV4dCgpO1xuICB9XG4gIC8qKlxuICAgKiB0aGlzIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgdG8gZm9yY2UgYSB3ZWJHTCBjb250ZXh0IGxvc3NcbiAgICogdGhpcyB3aWxsIHJlbGVhc2UgYWxsIHJlc291cmNlcyBvbiB0aGUgR1BVLlxuICAgKiBVc2VmdWwgaWYgeW91IG5lZWQgdG8gcHV0IFBpeGkgdG8gc2xlZXAsIGFuZCBzYXZlIHNvbWUgR1BVIG1lbW9yeVxuICAgKlxuICAgKiBBcyBzb29uIGFzIHJlbmRlciBpcyBjYWxsZWQgLSBhbGwgcmVzb3VyY2VzIHdpbGwgYmUgY3JlYXRlZCBhZ2Fpbi5cbiAgICovXG4gIGZvcmNlQ29udGV4dExvc3MoKSB7XG4gICAgdGhpcy5leHRlbnNpb25zLmxvc2VDb250ZXh0Py5sb3NlQ29udGV4dCgpO1xuICAgIHRoaXMuX2NvbnRleHRMb3NzRm9yY2VkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogVmFsaWRhdGUgY29udGV4dC5cbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIC0gUmVuZGVyIGNvbnRleHQuXG4gICAqL1xuICB2YWxpZGF0ZUNvbnRleHQoZ2wpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKTtcbiAgICBpZiAoYXR0cmlidXRlcyAmJiAhYXR0cmlidXRlcy5zdGVuY2lsKSB7XG4gICAgICB3YXJuKFwiUHJvdmlkZWQgV2ViR0wgY29udGV4dCBkb2VzIG5vdCBoYXZlIGEgc3RlbmNpbCBidWZmZXIsIG1hc2tzIG1heSBub3QgcmVuZGVyIGNvcnJlY3RseVwiKTtcbiAgICB9XG4gICAgY29uc3Qgc3VwcG9ydHMgPSB0aGlzLnN1cHBvcnRzO1xuICAgIGNvbnN0IGlzV2ViR2wyID0gdGhpcy53ZWJHTFZlcnNpb24gPT09IDI7XG4gICAgY29uc3QgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9ucztcbiAgICBzdXBwb3J0cy51aW50MzJJbmRpY2VzID0gaXNXZWJHbDIgfHwgISFleHRlbnNpb25zLnVpbnQzMkVsZW1lbnRJbmRleDtcbiAgICBzdXBwb3J0cy51bmlmb3JtQnVmZmVyT2JqZWN0ID0gaXNXZWJHbDI7XG4gICAgc3VwcG9ydHMudmVydGV4QXJyYXlPYmplY3QgPSBpc1dlYkdsMiB8fCAhIWV4dGVuc2lvbnMudmVydGV4QXJyYXlPYmplY3Q7XG4gICAgc3VwcG9ydHMuc3JnYlRleHR1cmVzID0gaXNXZWJHbDIgfHwgISFleHRlbnNpb25zLnNyZ2I7XG4gICAgc3VwcG9ydHMubm9uUG93T2Yyd3JhcHBpbmcgPSBpc1dlYkdsMjtcbiAgICBzdXBwb3J0cy5ub25Qb3dPZjJtaXBtYXBzID0gaXNXZWJHbDI7XG4gICAgc3VwcG9ydHMubXNhYSA9IGlzV2ViR2wyO1xuICAgIGlmICghc3VwcG9ydHMudWludDMySW5kaWNlcykge1xuICAgICAgd2FybihcIlByb3ZpZGVkIFdlYkdMIGNvbnRleHQgZG9lcyBub3Qgc3VwcG9ydCAzMiBpbmRleCBidWZmZXIsIGxhcmdlIHNjZW5lcyBtYXkgbm90IHJlbmRlciBjb3JyZWN0bHlcIik7XG4gICAgfVxuICB9XG59O1xuLyoqIEBpZ25vcmUgKi9cbl9HbENvbnRleHRTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbVxuICBdLFxuICBuYW1lOiBcImNvbnRleHRcIlxufTtcbi8qKiBAaWdub3JlICovXG5fR2xDb250ZXh0U3lzdGVtLmRlZmF1bHRPcHRpb25zID0ge1xuICAvKipcbiAgICoge0BsaW5rIFdlYkdMT3B0aW9ucy5jb250ZXh0fVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBjb250ZXh0OiBudWxsLFxuICAvKipcbiAgICoge0BsaW5rIFdlYkdMT3B0aW9ucy5wcmVtdWx0aXBsaWVkQWxwaGF9XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIHByZW11bHRpcGxpZWRBbHBoYTogdHJ1ZSxcbiAgLyoqXG4gICAqIHtAbGluayBXZWJHTE9wdGlvbnMucHJlc2VydmVEcmF3aW5nQnVmZmVyfVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIHtAbGluayBXZWJHTE9wdGlvbnMucG93ZXJQcmVmZXJlbmNlfVxuICAgKiBAZGVmYXVsdCBkZWZhdWx0XG4gICAqL1xuICBwb3dlclByZWZlcmVuY2U6IHZvaWQgMCxcbiAgLyoqXG4gICAqIHtAbGluayBXZWJHTE9wdGlvbnMud2ViR0xWZXJzaW9ufVxuICAgKiBAZGVmYXVsdCAyXG4gICAqL1xuICBwcmVmZXJXZWJHTFZlcnNpb246IDJcbn07XG5sZXQgR2xDb250ZXh0U3lzdGVtID0gX0dsQ29udGV4dFN5c3RlbTtcblxuZXhwb3J0IHsgR2xDb250ZXh0U3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbENvbnRleHRTeXN0ZW0ubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgR0xfRk9STUFUUyA9IC8qIEBfX1BVUkVfXyAqLyAoKEdMX0ZPUk1BVFMyKSA9PiB7XG4gIEdMX0ZPUk1BVFMyW0dMX0ZPUk1BVFMyW1wiUkdCQVwiXSA9IDY0MDhdID0gXCJSR0JBXCI7XG4gIEdMX0ZPUk1BVFMyW0dMX0ZPUk1BVFMyW1wiUkdCXCJdID0gNjQwN10gPSBcIlJHQlwiO1xuICBHTF9GT1JNQVRTMltHTF9GT1JNQVRTMltcIlJHXCJdID0gMzMzMTldID0gXCJSR1wiO1xuICBHTF9GT1JNQVRTMltHTF9GT1JNQVRTMltcIlJFRFwiXSA9IDY0MDNdID0gXCJSRURcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJSR0JBX0lOVEVHRVJcIl0gPSAzNjI0OV0gPSBcIlJHQkFfSU5URUdFUlwiO1xuICBHTF9GT1JNQVRTMltHTF9GT1JNQVRTMltcIlJHQl9JTlRFR0VSXCJdID0gMzYyNDhdID0gXCJSR0JfSU5URUdFUlwiO1xuICBHTF9GT1JNQVRTMltHTF9GT1JNQVRTMltcIlJHX0lOVEVHRVJcIl0gPSAzMzMyMF0gPSBcIlJHX0lOVEVHRVJcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJSRURfSU5URUdFUlwiXSA9IDM2MjQ0XSA9IFwiUkVEX0lOVEVHRVJcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJBTFBIQVwiXSA9IDY0MDZdID0gXCJBTFBIQVwiO1xuICBHTF9GT1JNQVRTMltHTF9GT1JNQVRTMltcIkxVTUlOQU5DRVwiXSA9IDY0MDldID0gXCJMVU1JTkFOQ0VcIjtcbiAgR0xfRk9STUFUUzJbR0xfRk9STUFUUzJbXCJMVU1JTkFOQ0VfQUxQSEFcIl0gPSA2NDEwXSA9IFwiTFVNSU5BTkNFX0FMUEhBXCI7XG4gIEdMX0ZPUk1BVFMyW0dMX0ZPUk1BVFMyW1wiREVQVEhfQ09NUE9ORU5UXCJdID0gNjQwMl0gPSBcIkRFUFRIX0NPTVBPTkVOVFwiO1xuICBHTF9GT1JNQVRTMltHTF9GT1JNQVRTMltcIkRFUFRIX1NURU5DSUxcIl0gPSAzNDA0MV0gPSBcIkRFUFRIX1NURU5DSUxcIjtcbiAgcmV0dXJuIEdMX0ZPUk1BVFMyO1xufSkoR0xfRk9STUFUUyB8fCB7fSk7XG52YXIgR0xfVEFSR0VUUyA9IC8qIEBfX1BVUkVfXyAqLyAoKEdMX1RBUkdFVFMyKSA9PiB7XG4gIEdMX1RBUkdFVFMyW0dMX1RBUkdFVFMyW1wiVEVYVFVSRV8yRFwiXSA9IDM1NTNdID0gXCJURVhUVVJFXzJEXCI7XG4gIEdMX1RBUkdFVFMyW0dMX1RBUkdFVFMyW1wiVEVYVFVSRV9DVUJFX01BUFwiXSA9IDM0MDY3XSA9IFwiVEVYVFVSRV9DVUJFX01BUFwiO1xuICBHTF9UQVJHRVRTMltHTF9UQVJHRVRTMltcIlRFWFRVUkVfMkRfQVJSQVlcIl0gPSAzNTg2Nl0gPSBcIlRFWFRVUkVfMkRfQVJSQVlcIjtcbiAgR0xfVEFSR0VUUzJbR0xfVEFSR0VUUzJbXCJURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1hcIl0gPSAzNDA2OV0gPSBcIlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWFwiO1xuICBHTF9UQVJHRVRTMltHTF9UQVJHRVRTMltcIlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWFwiXSA9IDM0MDcwXSA9IFwiVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9YXCI7XG4gIEdMX1RBUkdFVFMyW0dMX1RBUkdFVFMyW1wiVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9ZXCJdID0gMzQwNzFdID0gXCJURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1lcIjtcbiAgR0xfVEFSR0VUUzJbR0xfVEFSR0VUUzJbXCJURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1lcIl0gPSAzNDA3Ml0gPSBcIlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWVwiO1xuICBHTF9UQVJHRVRTMltHTF9UQVJHRVRTMltcIlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWlwiXSA9IDM0MDczXSA9IFwiVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9aXCI7XG4gIEdMX1RBUkdFVFMyW0dMX1RBUkdFVFMyW1wiVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9aXCJdID0gMzQwNzRdID0gXCJURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1pcIjtcbiAgcmV0dXJuIEdMX1RBUkdFVFMyO1xufSkoR0xfVEFSR0VUUyB8fCB7fSk7XG52YXIgR0xfV1JBUF9NT0RFUyA9IC8qIEBfX1BVUkVfXyAqLyAoKEdMX1dSQVBfTU9ERVMyKSA9PiB7XG4gIEdMX1dSQVBfTU9ERVMyW0dMX1dSQVBfTU9ERVMyW1wiQ0xBTVBcIl0gPSAzMzA3MV0gPSBcIkNMQU1QXCI7XG4gIEdMX1dSQVBfTU9ERVMyW0dMX1dSQVBfTU9ERVMyW1wiUkVQRUFUXCJdID0gMTA0OTddID0gXCJSRVBFQVRcIjtcbiAgR0xfV1JBUF9NT0RFUzJbR0xfV1JBUF9NT0RFUzJbXCJNSVJST1JFRF9SRVBFQVRcIl0gPSAzMzY0OF0gPSBcIk1JUlJPUkVEX1JFUEVBVFwiO1xuICByZXR1cm4gR0xfV1JBUF9NT0RFUzI7XG59KShHTF9XUkFQX01PREVTIHx8IHt9KTtcbnZhciBHTF9UWVBFUyA9IC8qIEBfX1BVUkVfXyAqLyAoKEdMX1RZUEVTMikgPT4ge1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfQllURVwiXSA9IDUxMjFdID0gXCJVTlNJR05FRF9CWVRFXCI7XG4gIEdMX1RZUEVTMltHTF9UWVBFUzJbXCJVTlNJR05FRF9TSE9SVFwiXSA9IDUxMjNdID0gXCJVTlNJR05FRF9TSE9SVFwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfU0hPUlRfNV82XzVcIl0gPSAzMzYzNV0gPSBcIlVOU0lHTkVEX1NIT1JUXzVfNl81XCI7XG4gIEdMX1RZUEVTMltHTF9UWVBFUzJbXCJVTlNJR05FRF9TSE9SVF80XzRfNF80XCJdID0gMzI4MTldID0gXCJVTlNJR05FRF9TSE9SVF80XzRfNF80XCI7XG4gIEdMX1RZUEVTMltHTF9UWVBFUzJbXCJVTlNJR05FRF9TSE9SVF81XzVfNV8xXCJdID0gMzI4MjBdID0gXCJVTlNJR05FRF9TSE9SVF81XzVfNV8xXCI7XG4gIEdMX1RZUEVTMltHTF9UWVBFUzJbXCJVTlNJR05FRF9JTlRcIl0gPSA1MTI1XSA9IFwiVU5TSUdORURfSU5UXCI7XG4gIEdMX1RZUEVTMltHTF9UWVBFUzJbXCJVTlNJR05FRF9JTlRfMTBGXzExRl8xMUZfUkVWXCJdID0gMzU4OTldID0gXCJVTlNJR05FRF9JTlRfMTBGXzExRl8xMUZfUkVWXCI7XG4gIEdMX1RZUEVTMltHTF9UWVBFUzJbXCJVTlNJR05FRF9JTlRfMl8xMF8xMF8xMF9SRVZcIl0gPSAzMzY0MF0gPSBcIlVOU0lHTkVEX0lOVF8yXzEwXzEwXzEwX1JFVlwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiVU5TSUdORURfSU5UXzI0XzhcIl0gPSAzNDA0Ml0gPSBcIlVOU0lHTkVEX0lOVF8yNF84XCI7XG4gIEdMX1RZUEVTMltHTF9UWVBFUzJbXCJVTlNJR05FRF9JTlRfNV85XzlfOV9SRVZcIl0gPSAzNTkwMl0gPSBcIlVOU0lHTkVEX0lOVF81XzlfOV85X1JFVlwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiQllURVwiXSA9IDUxMjBdID0gXCJCWVRFXCI7XG4gIEdMX1RZUEVTMltHTF9UWVBFUzJbXCJTSE9SVFwiXSA9IDUxMjJdID0gXCJTSE9SVFwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiSU5UXCJdID0gNTEyNF0gPSBcIklOVFwiO1xuICBHTF9UWVBFUzJbR0xfVFlQRVMyW1wiRkxPQVRcIl0gPSA1MTI2XSA9IFwiRkxPQVRcIjtcbiAgR0xfVFlQRVMyW0dMX1RZUEVTMltcIkZMT0FUXzMyX1VOU0lHTkVEX0lOVF8yNF84X1JFVlwiXSA9IDM2MjY5XSA9IFwiRkxPQVRfMzJfVU5TSUdORURfSU5UXzI0XzhfUkVWXCI7XG4gIEdMX1RZUEVTMltHTF9UWVBFUzJbXCJIQUxGX0ZMT0FUXCJdID0gMzYxOTNdID0gXCJIQUxGX0ZMT0FUXCI7XG4gIHJldHVybiBHTF9UWVBFUzI7XG59KShHTF9UWVBFUyB8fCB7fSk7XG5cbmV4cG9ydCB7IEdMX0ZPUk1BVFMsIEdMX1RBUkdFVFMsIEdMX1RZUEVTLCBHTF9XUkFQX01PREVTIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdC5tanMubWFwXG4iLCJpbXBvcnQgeyBHTF9UWVBFUyB9IGZyb20gJy4uLy4uL3RleHR1cmUvY29uc3QubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBpbmZvTWFwID0ge1xuICB1aW50OHgyOiBHTF9UWVBFUy5VTlNJR05FRF9CWVRFLFxuICB1aW50OHg0OiBHTF9UWVBFUy5VTlNJR05FRF9CWVRFLFxuICBzaW50OHgyOiBHTF9UWVBFUy5CWVRFLFxuICBzaW50OHg0OiBHTF9UWVBFUy5CWVRFLFxuICB1bm9ybTh4MjogR0xfVFlQRVMuVU5TSUdORURfQllURSxcbiAgdW5vcm04eDQ6IEdMX1RZUEVTLlVOU0lHTkVEX0JZVEUsXG4gIHNub3JtOHgyOiBHTF9UWVBFUy5CWVRFLFxuICBzbm9ybTh4NDogR0xfVFlQRVMuQllURSxcbiAgdWludDE2eDI6IEdMX1RZUEVTLlVOU0lHTkVEX1NIT1JULFxuICB1aW50MTZ4NDogR0xfVFlQRVMuVU5TSUdORURfU0hPUlQsXG4gIHNpbnQxNngyOiBHTF9UWVBFUy5TSE9SVCxcbiAgc2ludDE2eDQ6IEdMX1RZUEVTLlNIT1JULFxuICB1bm9ybTE2eDI6IEdMX1RZUEVTLlVOU0lHTkVEX1NIT1JULFxuICB1bm9ybTE2eDQ6IEdMX1RZUEVTLlVOU0lHTkVEX1NIT1JULFxuICBzbm9ybTE2eDI6IEdMX1RZUEVTLlNIT1JULFxuICBzbm9ybTE2eDQ6IEdMX1RZUEVTLlNIT1JULFxuICBmbG9hdDE2eDI6IEdMX1RZUEVTLkhBTEZfRkxPQVQsXG4gIGZsb2F0MTZ4NDogR0xfVFlQRVMuSEFMRl9GTE9BVCxcbiAgZmxvYXQzMjogR0xfVFlQRVMuRkxPQVQsXG4gIGZsb2F0MzJ4MjogR0xfVFlQRVMuRkxPQVQsXG4gIGZsb2F0MzJ4MzogR0xfVFlQRVMuRkxPQVQsXG4gIGZsb2F0MzJ4NDogR0xfVFlQRVMuRkxPQVQsXG4gIHVpbnQzMjogR0xfVFlQRVMuVU5TSUdORURfSU5ULFxuICB1aW50MzJ4MjogR0xfVFlQRVMuVU5TSUdORURfSU5ULFxuICB1aW50MzJ4MzogR0xfVFlQRVMuVU5TSUdORURfSU5ULFxuICB1aW50MzJ4NDogR0xfVFlQRVMuVU5TSUdORURfSU5ULFxuICBzaW50MzI6IEdMX1RZUEVTLklOVCxcbiAgc2ludDMyeDI6IEdMX1RZUEVTLklOVCxcbiAgc2ludDMyeDM6IEdMX1RZUEVTLklOVCxcbiAgc2ludDMyeDQ6IEdMX1RZUEVTLklOVFxufTtcbmZ1bmN0aW9uIGdldEdsVHlwZUZyb21Gb3JtYXQoZm9ybWF0KSB7XG4gIHJldHVybiBpbmZvTWFwW2Zvcm1hdF0gPz8gaW5mb01hcC5mbG9hdDMyO1xufVxuXG5leHBvcnQgeyBnZXRHbFR5cGVGcm9tRm9ybWF0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRHbFR5cGVGcm9tRm9ybWF0Lm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IGdldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0IH0gZnJvbSAnLi4vLi4vc2hhcmVkL2dlb21ldHJ5L3V0aWxzL2dldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0Lm1qcyc7XG5pbXBvcnQgeyBlbnN1cmVBdHRyaWJ1dGVzIH0gZnJvbSAnLi4vc2hhZGVyL3Byb2dyYW0vZW5zdXJlQXR0cmlidXRlcy5tanMnO1xuaW1wb3J0IHsgZ2V0R2xUeXBlRnJvbUZvcm1hdCB9IGZyb20gJy4vdXRpbHMvZ2V0R2xUeXBlRnJvbUZvcm1hdC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRvcG9sb2d5VG9HbE1hcCA9IHtcbiAgXCJwb2ludC1saXN0XCI6IDAsXG4gIFwibGluZS1saXN0XCI6IDEsXG4gIFwibGluZS1zdHJpcFwiOiAzLFxuICBcInRyaWFuZ2xlLWxpc3RcIjogNCxcbiAgXCJ0cmlhbmdsZS1zdHJpcFwiOiA1XG59O1xuY2xhc3MgR2xHZW9tZXRyeVN5c3RlbSB7XG4gIC8qKiBAcGFyYW0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIgdGhpcyBTeXN0ZW0gd29ya3MgZm9yLiAqL1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMuX2dlb21ldHJ5VmFvSGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fYWN0aXZlR2VvbWV0cnkgPSBudWxsO1xuICAgIHRoaXMuX2FjdGl2ZVZhbyA9IG51bGw7XG4gICAgdGhpcy5oYXNWYW8gPSB0cnVlO1xuICAgIHRoaXMuaGFzSW5zdGFuY2UgPSB0cnVlO1xuICB9XG4gIC8qKiBTZXRzIHVwIHRoZSByZW5kZXJlciBjb250ZXh0IGFuZCBuZWNlc3NhcnkgYnVmZmVycy4gKi9cbiAgY29udGV4dENoYW5nZSgpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuZ2wgPSB0aGlzLl9yZW5kZXJlci5nbDtcbiAgICBpZiAoIXRoaXMuX3JlbmRlcmVyLmNvbnRleHQuc3VwcG9ydHMudmVydGV4QXJyYXlPYmplY3QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIltQaXhpSlNdIFZlcnRleCBBcnJheSBPYmplY3RzIGFyZSBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgZGV2aWNlXCIpO1xuICAgIH1cbiAgICBjb25zdCBuYXRpdmVWYW9FeHRlbnNpb24gPSB0aGlzLl9yZW5kZXJlci5jb250ZXh0LmV4dGVuc2lvbnMudmVydGV4QXJyYXlPYmplY3Q7XG4gICAgaWYgKG5hdGl2ZVZhb0V4dGVuc2lvbikge1xuICAgICAgZ2wuY3JlYXRlVmVydGV4QXJyYXkgPSAoKSA9PiBuYXRpdmVWYW9FeHRlbnNpb24uY3JlYXRlVmVydGV4QXJyYXlPRVMoKTtcbiAgICAgIGdsLmJpbmRWZXJ0ZXhBcnJheSA9ICh2YW8pID0+IG5hdGl2ZVZhb0V4dGVuc2lvbi5iaW5kVmVydGV4QXJyYXlPRVModmFvKTtcbiAgICAgIGdsLmRlbGV0ZVZlcnRleEFycmF5ID0gKHZhbykgPT4gbmF0aXZlVmFvRXh0ZW5zaW9uLmRlbGV0ZVZlcnRleEFycmF5T0VTKHZhbyk7XG4gICAgfVxuICAgIGNvbnN0IG5hdGl2ZUluc3RhbmNlZEV4dGVuc2lvbiA9IHRoaXMuX3JlbmRlcmVyLmNvbnRleHQuZXh0ZW5zaW9ucy52ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEU7XG4gICAgaWYgKG5hdGl2ZUluc3RhbmNlZEV4dGVuc2lvbikge1xuICAgICAgZ2wuZHJhd0FycmF5c0luc3RhbmNlZCA9IChhLCBiLCBjLCBkKSA9PiB7XG4gICAgICAgIG5hdGl2ZUluc3RhbmNlZEV4dGVuc2lvbi5kcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEUoYSwgYiwgYywgZCk7XG4gICAgICB9O1xuICAgICAgZ2wuZHJhd0VsZW1lbnRzSW5zdGFuY2VkID0gKGEsIGIsIGMsIGQsIGUpID0+IHtcbiAgICAgICAgbmF0aXZlSW5zdGFuY2VkRXh0ZW5zaW9uLmRyYXdFbGVtZW50c0luc3RhbmNlZEFOR0xFKGEsIGIsIGMsIGQsIGUpO1xuICAgICAgfTtcbiAgICAgIGdsLnZlcnRleEF0dHJpYkRpdmlzb3IgPSAoYSwgYikgPT4gbmF0aXZlSW5zdGFuY2VkRXh0ZW5zaW9uLnZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRShhLCBiKTtcbiAgICB9XG4gICAgdGhpcy5fYWN0aXZlR2VvbWV0cnkgPSBudWxsO1xuICAgIHRoaXMuX2FjdGl2ZVZhbyA9IG51bGw7XG4gICAgdGhpcy5fZ2VvbWV0cnlWYW9IYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cbiAgLyoqXG4gICAqIEJpbmRzIGdlb21ldHJ5IHNvIHRoYXQgaXMgY2FuIGJlIGRyYXduLiBDcmVhdGluZyBhIFZhbyBpZiByZXF1aXJlZFxuICAgKiBAcGFyYW0gZ2VvbWV0cnkgLSBJbnN0YW5jZSBvZiBnZW9tZXRyeSB0byBiaW5kLlxuICAgKiBAcGFyYW0gcHJvZ3JhbSAtIEluc3RhbmNlIG9mIHByb2dyYW0gdG8gdXNlIHZhbyBmb3IuXG4gICAqL1xuICBiaW5kKGdlb21ldHJ5LCBwcm9ncmFtKSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgIHRoaXMuX2FjdGl2ZUdlb21ldHJ5ID0gZ2VvbWV0cnk7XG4gICAgY29uc3QgdmFvID0gdGhpcy5nZXRWYW8oZ2VvbWV0cnksIHByb2dyYW0pO1xuICAgIGlmICh0aGlzLl9hY3RpdmVWYW8gIT09IHZhbykge1xuICAgICAgdGhpcy5fYWN0aXZlVmFvID0gdmFvO1xuICAgICAgZ2wuYmluZFZlcnRleEFycmF5KHZhbyk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlQnVmZmVycygpO1xuICB9XG4gIC8qKiBSZXNldCBhbmQgdW5iaW5kIGFueSBhY3RpdmUgVkFPIGFuZCBnZW9tZXRyeS4gKi9cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy51bmJpbmQoKTtcbiAgfVxuICAvKiogVXBkYXRlIGJ1ZmZlcnMgb2YgdGhlIGN1cnJlbnRseSBib3VuZCBnZW9tZXRyeS4gKi9cbiAgdXBkYXRlQnVmZmVycygpIHtcbiAgICBjb25zdCBnZW9tZXRyeSA9IHRoaXMuX2FjdGl2ZUdlb21ldHJ5O1xuICAgIGNvbnN0IGJ1ZmZlclN5c3RlbSA9IHRoaXMuX3JlbmRlcmVyLmJ1ZmZlcjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdlb21ldHJ5LmJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IGdlb21ldHJ5LmJ1ZmZlcnNbaV07XG4gICAgICBidWZmZXJTeXN0ZW0udXBkYXRlQnVmZmVyKGJ1ZmZlcik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDaGVjayBjb21wYXRpYmlsaXR5IGJldHdlZW4gYSBnZW9tZXRyeSBhbmQgYSBwcm9ncmFtXG4gICAqIEBwYXJhbSBnZW9tZXRyeSAtIEdlb21ldHJ5IGluc3RhbmNlLlxuICAgKiBAcGFyYW0gcHJvZ3JhbSAtIFByb2dyYW0gaW5zdGFuY2UuXG4gICAqL1xuICBjaGVja0NvbXBhdGliaWxpdHkoZ2VvbWV0cnksIHByb2dyYW0pIHtcbiAgICBjb25zdCBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuICAgIGNvbnN0IHNoYWRlckF0dHJpYnV0ZXMgPSBwcm9ncmFtLl9hdHRyaWJ1dGVEYXRhO1xuICAgIGZvciAoY29uc3QgaiBpbiBzaGFkZXJBdHRyaWJ1dGVzKSB7XG4gICAgICBpZiAoIWdlb21ldHJ5QXR0cmlidXRlc1tqXSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHNoYWRlciBhbmQgZ2VvbWV0cnkgaW5jb21wYXRpYmxlLCBnZW9tZXRyeSBtaXNzaW5nIHRoZSBcIiR7an1cIiBhdHRyaWJ1dGVgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFRha2VzIGEgZ2VvbWV0cnkgYW5kIHByb2dyYW0gYW5kIGdlbmVyYXRlcyBhIHVuaXF1ZSBzaWduYXR1cmUgZm9yIHRoZW0uXG4gICAqIEBwYXJhbSBnZW9tZXRyeSAtIFRvIGdldCBzaWduYXR1cmUgZnJvbS5cbiAgICogQHBhcmFtIHByb2dyYW0gLSBUbyB0ZXN0IGdlb21ldHJ5IGFnYWluc3QuXG4gICAqIEByZXR1cm5zIC0gVW5pcXVlIHNpZ25hdHVyZSBvZiB0aGUgZ2VvbWV0cnkgYW5kIHByb2dyYW1cbiAgICovXG4gIGdldFNpZ25hdHVyZShnZW9tZXRyeSwgcHJvZ3JhbSkge1xuICAgIGNvbnN0IGF0dHJpYnMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuICAgIGNvbnN0IHNoYWRlckF0dHJpYnV0ZXMgPSBwcm9ncmFtLl9hdHRyaWJ1dGVEYXRhO1xuICAgIGNvbnN0IHN0cmluZ3MgPSBbXCJnXCIsIGdlb21ldHJ5LnVpZF07XG4gICAgZm9yIChjb25zdCBpIGluIGF0dHJpYnMpIHtcbiAgICAgIGlmIChzaGFkZXJBdHRyaWJ1dGVzW2ldKSB7XG4gICAgICAgIHN0cmluZ3MucHVzaChpLCBzaGFkZXJBdHRyaWJ1dGVzW2ldLmxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZ3Muam9pbihcIi1cIik7XG4gIH1cbiAgZ2V0VmFvKGdlb21ldHJ5LCBwcm9ncmFtKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dlb21ldHJ5VmFvSGFzaFtnZW9tZXRyeS51aWRdPy5bcHJvZ3JhbS5fa2V5XSB8fCB0aGlzLmluaXRHZW9tZXRyeVZhbyhnZW9tZXRyeSwgcHJvZ3JhbSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgb3IgZ2V0cyBWYW8gd2l0aCB0aGUgc2FtZSBzdHJ1Y3R1cmUgYXMgdGhlIGdlb21ldHJ5IGFuZCBzdG9yZXMgaXQgb24gdGhlIGdlb21ldHJ5LlxuICAgKiBJZiB2YW8gaXMgY3JlYXRlZCwgaXQgaXMgYm91bmQgYXV0b21hdGljYWxseS4gV2UgdXNlIGEgc2hhZGVyIHRvIGluZmVyIHdoYXQgYW5kIGhvdyB0byBzZXQgdXAgdGhlXG4gICAqIGF0dHJpYnV0ZSBsb2NhdGlvbnMuXG4gICAqIEBwYXJhbSBnZW9tZXRyeSAtIEluc3RhbmNlIG9mIGdlb21ldHJ5IHRvIHRvIGdlbmVyYXRlIFZhbyBmb3IuXG4gICAqIEBwYXJhbSBwcm9ncmFtXG4gICAqIEBwYXJhbSBfaW5jUmVmQ291bnQgLSBJbmNyZW1lbnQgcmVmQ291bnQgb2YgYWxsIGdlb21ldHJ5IGJ1ZmZlcnMuXG4gICAqL1xuICBpbml0R2VvbWV0cnlWYW8oZ2VvbWV0cnksIHByb2dyYW0sIF9pbmNSZWZDb3VudCA9IHRydWUpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX3JlbmRlcmVyLmdsO1xuICAgIGNvbnN0IGJ1ZmZlclN5c3RlbSA9IHRoaXMuX3JlbmRlcmVyLmJ1ZmZlcjtcbiAgICB0aGlzLl9yZW5kZXJlci5zaGFkZXIuX2dldFByb2dyYW1EYXRhKHByb2dyYW0pO1xuICAgIHRoaXMuY2hlY2tDb21wYXRpYmlsaXR5KGdlb21ldHJ5LCBwcm9ncmFtKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSB0aGlzLmdldFNpZ25hdHVyZShnZW9tZXRyeSwgcHJvZ3JhbSk7XG4gICAgaWYgKCF0aGlzLl9nZW9tZXRyeVZhb0hhc2hbZ2VvbWV0cnkudWlkXSkge1xuICAgICAgdGhpcy5fZ2VvbWV0cnlWYW9IYXNoW2dlb21ldHJ5LnVpZF0gPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIGdlb21ldHJ5Lm9uKFwiZGVzdHJveVwiLCB0aGlzLm9uR2VvbWV0cnlEZXN0cm95LCB0aGlzKTtcbiAgICB9XG4gICAgY29uc3QgdmFvT2JqZWN0SGFzaCA9IHRoaXMuX2dlb21ldHJ5VmFvSGFzaFtnZW9tZXRyeS51aWRdO1xuICAgIGxldCB2YW8gPSB2YW9PYmplY3RIYXNoW3NpZ25hdHVyZV07XG4gICAgaWYgKHZhbykge1xuICAgICAgdmFvT2JqZWN0SGFzaFtwcm9ncmFtLl9rZXldID0gdmFvO1xuICAgICAgcmV0dXJuIHZhbztcbiAgICB9XG4gICAgZW5zdXJlQXR0cmlidXRlcyhnZW9tZXRyeSwgcHJvZ3JhbS5fYXR0cmlidXRlRGF0YSk7XG4gICAgY29uc3QgYnVmZmVycyA9IGdlb21ldHJ5LmJ1ZmZlcnM7XG4gICAgdmFvID0gZ2wuY3JlYXRlVmVydGV4QXJyYXkoKTtcbiAgICBnbC5iaW5kVmVydGV4QXJyYXkodmFvKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IGJ1ZmZlcnNbaV07XG4gICAgICBidWZmZXJTeXN0ZW0uYmluZChidWZmZXIpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2YXRlVmFvKGdlb21ldHJ5LCBwcm9ncmFtKTtcbiAgICB2YW9PYmplY3RIYXNoW3Byb2dyYW0uX2tleV0gPSB2YW87XG4gICAgdmFvT2JqZWN0SGFzaFtzaWduYXR1cmVdID0gdmFvO1xuICAgIGdsLmJpbmRWZXJ0ZXhBcnJheShudWxsKTtcbiAgICByZXR1cm4gdmFvO1xuICB9XG4gIC8qKlxuICAgKiBEaXNwb3NlcyBnZW9tZXRyeS5cbiAgICogQHBhcmFtIGdlb21ldHJ5IC0gR2VvbWV0cnkgd2l0aCBidWZmZXJzLiBPbmx5IFZBTyB3aWxsIGJlIGRpc3Bvc2VkXG4gICAqIEBwYXJhbSBbY29udGV4dExvc3Q9ZmFsc2VdIC0gSWYgY29udGV4dCB3YXMgbG9zdCwgd2Ugc3VwcHJlc3MgZGVsZXRlVmVydGV4QXJyYXlcbiAgICovXG4gIG9uR2VvbWV0cnlEZXN0cm95KGdlb21ldHJ5LCBjb250ZXh0TG9zdCkge1xuICAgIGNvbnN0IHZhb09iamVjdEhhc2ggPSB0aGlzLl9nZW9tZXRyeVZhb0hhc2hbZ2VvbWV0cnkudWlkXTtcbiAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgaWYgKHZhb09iamVjdEhhc2gpIHtcbiAgICAgIGlmIChjb250ZXh0TG9zdCkge1xuICAgICAgICBmb3IgKGNvbnN0IGkgaW4gdmFvT2JqZWN0SGFzaCkge1xuICAgICAgICAgIGlmICh0aGlzLl9hY3RpdmVWYW8gIT09IHZhb09iamVjdEhhc2hbaV0pIHtcbiAgICAgICAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGdsLmRlbGV0ZVZlcnRleEFycmF5KHZhb09iamVjdEhhc2hbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9nZW9tZXRyeVZhb0hhc2hbZ2VvbWV0cnkudWlkXSA9IG51bGw7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEaXNwb3NlIGFsbCBXZWJHTCByZXNvdXJjZXMgb2YgYWxsIG1hbmFnZWQgZ2VvbWV0cmllcy5cbiAgICogQHBhcmFtIFtjb250ZXh0TG9zdD1mYWxzZV0gLSBJZiBjb250ZXh0IHdhcyBsb3N0LCB3ZSBzdXBwcmVzcyBgZ2wuZGVsZXRlYCBjYWxsc1xuICAgKi9cbiAgZGVzdHJveUFsbChjb250ZXh0TG9zdCA9IGZhbHNlKSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgIGZvciAoY29uc3QgaSBpbiB0aGlzLl9nZW9tZXRyeVZhb0hhc2gpIHtcbiAgICAgIGlmIChjb250ZXh0TG9zdCkge1xuICAgICAgICBmb3IgKGNvbnN0IGogaW4gdGhpcy5fZ2VvbWV0cnlWYW9IYXNoW2ldKSB7XG4gICAgICAgICAgY29uc3QgdmFvT2JqZWN0SGFzaCA9IHRoaXMuX2dlb21ldHJ5VmFvSGFzaFtpXTtcbiAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlVmFvICE9PSB2YW9PYmplY3RIYXNoKSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBnbC5kZWxldGVWZXJ0ZXhBcnJheSh2YW9PYmplY3RIYXNoW2pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fZ2VvbWV0cnlWYW9IYXNoW2ldID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEFjdGl2YXRlIHZlcnRleCBhcnJheSBvYmplY3QuXG4gICAqIEBwYXJhbSBnZW9tZXRyeSAtIEdlb21ldHJ5IGluc3RhbmNlLlxuICAgKiBAcGFyYW0gcHJvZ3JhbSAtIFNoYWRlciBwcm9ncmFtIGluc3RhbmNlLlxuICAgKi9cbiAgYWN0aXZhdGVWYW8oZ2VvbWV0cnksIHByb2dyYW0pIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX3JlbmRlcmVyLmdsO1xuICAgIGNvbnN0IGJ1ZmZlclN5c3RlbSA9IHRoaXMuX3JlbmRlcmVyLmJ1ZmZlcjtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcbiAgICBpZiAoZ2VvbWV0cnkuaW5kZXhCdWZmZXIpIHtcbiAgICAgIGJ1ZmZlclN5c3RlbS5iaW5kKGdlb21ldHJ5LmluZGV4QnVmZmVyKTtcbiAgICB9XG4gICAgbGV0IGxhc3RCdWZmZXIgPSBudWxsO1xuICAgIGZvciAoY29uc3QgaiBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICBjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2pdO1xuICAgICAgY29uc3QgYnVmZmVyID0gYXR0cmlidXRlLmJ1ZmZlcjtcbiAgICAgIGNvbnN0IGdsQnVmZmVyID0gYnVmZmVyU3lzdGVtLmdldEdsQnVmZmVyKGJ1ZmZlcik7XG4gICAgICBpZiAocHJvZ3JhbS5fYXR0cmlidXRlRGF0YVtqXSkge1xuICAgICAgICBpZiAobGFzdEJ1ZmZlciAhPT0gZ2xCdWZmZXIpIHtcbiAgICAgICAgICBidWZmZXJTeXN0ZW0uYmluZChidWZmZXIpO1xuICAgICAgICAgIGxhc3RCdWZmZXIgPSBnbEJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGF0dHJpYnV0ZS5sb2NhdGlvbjtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkobG9jYXRpb24pO1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVJbmZvID0gZ2V0QXR0cmlidXRlSW5mb0Zyb21Gb3JtYXQoYXR0cmlidXRlLmZvcm1hdCk7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgYXR0cmlidXRlSW5mby5zaXplLFxuICAgICAgICAgIGdldEdsVHlwZUZyb21Gb3JtYXQoYXR0cmlidXRlLmZvcm1hdCksXG4gICAgICAgICAgYXR0cmlidXRlSW5mby5ub3JtYWxpc2VkLFxuICAgICAgICAgIGF0dHJpYnV0ZS5zdHJpZGUsXG4gICAgICAgICAgYXR0cmlidXRlLm9mZnNldFxuICAgICAgICApO1xuICAgICAgICBpZiAoYXR0cmlidXRlLmluc3RhbmNlKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaGFzSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGdsLnZlcnRleEF0dHJpYkRpdmlzb3IobG9jYXRpb24sIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJnZW9tZXRyeSBlcnJvciwgR1BVIEluc3RhbmNpbmcgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGRldmljZVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBjdXJyZW50bHkgYm91bmQgZ2VvbWV0cnkuXG4gICAqIEBwYXJhbSB0b3BvbG9neSAtIFRoZSB0eXBlIHByaW1pdGl2ZSB0byByZW5kZXIuXG4gICAqIEBwYXJhbSBzaXplIC0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBiZSByZW5kZXJlZC4gSWYgbm90IHNwZWNpZmllZCwgYWxsIHZlcnRpY2VzIGFmdGVyIHRoZVxuICAgKiAgc3RhcnRpbmcgdmVydGV4IHdpbGwgYmUgZHJhd24uXG4gICAqIEBwYXJhbSBzdGFydCAtIFRoZSBzdGFydGluZyB2ZXJ0ZXggaW4gdGhlIGdlb21ldHJ5IHRvIHN0YXJ0IGRyYXdpbmcgZnJvbS4gSWYgbm90IHNwZWNpZmllZCxcbiAgICogIGRyYXdpbmcgd2lsbCBzdGFydCBmcm9tIHRoZSBmaXJzdCB2ZXJ0ZXguXG4gICAqIEBwYXJhbSBpbnN0YW5jZUNvdW50IC0gVGhlIG51bWJlciBvZiBpbnN0YW5jZXMgb2YgdGhlIHNldCBvZiBlbGVtZW50cyB0byBleGVjdXRlLiBJZiBub3Qgc3BlY2lmaWVkLFxuICAgKiAgYWxsIGluc3RhbmNlcyB3aWxsIGJlIGRyYXduLlxuICAgKi9cbiAgZHJhdyh0b3BvbG9neSwgc2l6ZSwgc3RhcnQsIGluc3RhbmNlQ291bnQpIHtcbiAgICBjb25zdCB7IGdsIH0gPSB0aGlzLl9yZW5kZXJlcjtcbiAgICBjb25zdCBnZW9tZXRyeSA9IHRoaXMuX2FjdGl2ZUdlb21ldHJ5O1xuICAgIGNvbnN0IGdsVG9wb2xvZ3kgPSB0b3BvbG9neVRvR2xNYXBbZ2VvbWV0cnkudG9wb2xvZ3kgfHwgdG9wb2xvZ3ldO1xuICAgIGluc3RhbmNlQ291bnQgfHwgKGluc3RhbmNlQ291bnQgPSBnZW9tZXRyeS5pbnN0YW5jZUNvdW50KTtcbiAgICBpZiAoZ2VvbWV0cnkuaW5kZXhCdWZmZXIpIHtcbiAgICAgIGNvbnN0IGJ5dGVTaXplID0gZ2VvbWV0cnkuaW5kZXhCdWZmZXIuZGF0YS5CWVRFU19QRVJfRUxFTUVOVDtcbiAgICAgIGNvbnN0IGdsVHlwZSA9IGJ5dGVTaXplID09PSAyID8gZ2wuVU5TSUdORURfU0hPUlQgOiBnbC5VTlNJR05FRF9JTlQ7XG4gICAgICBpZiAoaW5zdGFuY2VDb3VudCA+IDEpIHtcbiAgICAgICAgZ2wuZHJhd0VsZW1lbnRzSW5zdGFuY2VkKGdsVG9wb2xvZ3ksIHNpemUgfHwgZ2VvbWV0cnkuaW5kZXhCdWZmZXIuZGF0YS5sZW5ndGgsIGdsVHlwZSwgKHN0YXJ0IHx8IDApICogYnl0ZVNpemUsIGluc3RhbmNlQ291bnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2wuZHJhd0VsZW1lbnRzKGdsVG9wb2xvZ3ksIHNpemUgfHwgZ2VvbWV0cnkuaW5kZXhCdWZmZXIuZGF0YS5sZW5ndGgsIGdsVHlwZSwgKHN0YXJ0IHx8IDApICogYnl0ZVNpemUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW5zdGFuY2VDb3VudCA+IDEpIHtcbiAgICAgIGdsLmRyYXdBcnJheXNJbnN0YW5jZWQoZ2xUb3BvbG9neSwgc3RhcnQgfHwgMCwgc2l6ZSB8fCBnZW9tZXRyeS5nZXRTaXplKCksIGluc3RhbmNlQ291bnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnbC5kcmF3QXJyYXlzKGdsVG9wb2xvZ3ksIHN0YXJ0IHx8IDAsIHNpemUgfHwgZ2VvbWV0cnkuZ2V0U2l6ZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqIFVuYmluZC9yZXNldCBldmVyeXRoaW5nLiAqL1xuICB1bmJpbmQoKSB7XG4gICAgdGhpcy5nbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7XG4gICAgdGhpcy5fYWN0aXZlVmFvID0gbnVsbDtcbiAgICB0aGlzLl9hY3RpdmVHZW9tZXRyeSA9IG51bGw7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gICAgdGhpcy5nbCA9IG51bGw7XG4gICAgdGhpcy5fYWN0aXZlVmFvID0gbnVsbDtcbiAgICB0aGlzLl9hY3RpdmVHZW9tZXRyeSA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HbEdlb21ldHJ5U3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJnZW9tZXRyeVwiXG59O1xuXG5leHBvcnQgeyBHbEdlb21ldHJ5U3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbEdlb21ldHJ5U3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IHdhcm4gfSBmcm9tICcuLi8uLi8uLi91dGlscy9sb2dnaW5nL3dhcm4ubWpzJztcbmltcG9ydCB7IEdlb21ldHJ5IH0gZnJvbSAnLi4vc2hhcmVkL2dlb21ldHJ5L0dlb21ldHJ5Lm1qcyc7XG5pbXBvcnQgeyBTaGFkZXIgfSBmcm9tICcuLi9zaGFyZWQvc2hhZGVyL1NoYWRlci5tanMnO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuLi9zaGFyZWQvc3RhdGUvU3RhdGUubWpzJztcbmltcG9ydCB7IFRleHR1cmVTb3VyY2UgfSBmcm9tICcuLi9zaGFyZWQvdGV4dHVyZS9zb3VyY2VzL1RleHR1cmVTb3VyY2UubWpzJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi9zaGFyZWQvdGV4dHVyZS9UZXh0dXJlLm1qcyc7XG5pbXBvcnQgeyBHbFByb2dyYW0gfSBmcm9tICcuL3NoYWRlci9HbFByb2dyYW0ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBiaWdUcmlhbmdsZUdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5KHtcbiAgYXR0cmlidXRlczoge1xuICAgIGFQb3NpdGlvbjogW1xuICAgICAgLTEsXG4gICAgICAtMSxcbiAgICAgIC8vIEJvdHRvbSBsZWZ0IGNvcm5lclxuICAgICAgMyxcbiAgICAgIC0xLFxuICAgICAgLy8gQm90dG9tIHJpZ2h0IGNvcm5lciwgZXh0ZW5kaW5nIGJleW9uZCByaWdodCBlZGdlXG4gICAgICAtMSxcbiAgICAgIDNcbiAgICAgIC8vIFRvcCBsZWZ0IGNvcm5lciwgZXh0ZW5kaW5nIGJleW9uZCB0b3AgZWRnZVxuICAgIF1cbiAgfVxufSk7XG5jb25zdCBfR2xCYWNrQnVmZmVyU3lzdGVtID0gY2xhc3MgX0dsQmFja0J1ZmZlclN5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgLyoqIGlmIHRydWUsIHRoZSBiYWNrIGJ1ZmZlciBpcyB1c2VkICovXG4gICAgdGhpcy51c2VCYWNrQnVmZmVyID0gZmFsc2U7XG4gICAgdGhpcy5fdXNlQmFja0J1ZmZlclRoaXNSZW5kZXIgPSBmYWxzZTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG4gIGluaXQob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyB1c2VCYWNrQnVmZmVyLCBhbnRpYWxpYXMgfSA9IHsgLi4uX0dsQmFja0J1ZmZlclN5c3RlbS5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuICAgIHRoaXMudXNlQmFja0J1ZmZlciA9IHVzZUJhY2tCdWZmZXI7XG4gICAgdGhpcy5fYW50aWFsaWFzID0gYW50aWFsaWFzO1xuICAgIGlmICghdGhpcy5fcmVuZGVyZXIuY29udGV4dC5zdXBwb3J0cy5tc2FhKSB7XG4gICAgICB3YXJuKFwiYW50aWFsaWFzaW5nLCBpcyBub3Qgc3VwcG9ydGVkIG9uIHdoZW4gdXNpbmcgdGhlIGJhY2sgYnVmZmVyXCIpO1xuICAgICAgdGhpcy5fYW50aWFsaWFzID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuX3N0YXRlID0gU3RhdGUuZm9yMmQoKTtcbiAgICBjb25zdCBiaWdUcmlhbmdsZVByb2dyYW0gPSBuZXcgR2xQcm9ncmFtKHtcbiAgICAgIHZlcnRleDogYFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZSB2ZWMyIGFQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICBvdXQgdmVjMiB2VXY7XG5cbiAgICAgICAgICAgICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsX1Bvc2l0aW9uID0gZ2xfUG9zaXRpb24gPSB2ZWM0KGFQb3NpdGlvbiwgMC4wLCAxLjApO1xuXG4gICAgICAgICAgICAgICAgICAgIHZVdiA9IChhUG9zaXRpb24gKyAxLjApIC8gMi4wO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGZsaXAgZGVtIFVWc1xuICAgICAgICAgICAgICAgICAgICB2VXYueSA9IDEuMCAtIHZVdi55O1xuICAgICAgICAgICAgICAgIH1gLFxuICAgICAgZnJhZ21lbnQ6IGBcbiAgICAgICAgICAgICAgICBpbiB2ZWMyIHZVdjtcbiAgICAgICAgICAgICAgICBvdXQgdmVjNCBmaW5hbENvbG9yO1xuXG4gICAgICAgICAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XG5cbiAgICAgICAgICAgICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsQ29sb3IgPSB0ZXh0dXJlKHVUZXh0dXJlLCB2VXYpO1xuICAgICAgICAgICAgICAgIH1gLFxuICAgICAgbmFtZTogXCJiaWctdHJpYW5nbGVcIlxuICAgIH0pO1xuICAgIHRoaXMuX2JpZ1RyaWFuZ2xlU2hhZGVyID0gbmV3IFNoYWRlcih7XG4gICAgICBnbFByb2dyYW06IGJpZ1RyaWFuZ2xlUHJvZ3JhbSxcbiAgICAgIHJlc291cmNlczoge1xuICAgICAgICB1VGV4dHVyZTogVGV4dHVyZS5XSElURS5zb3VyY2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBpcyBjYWxsZWQgYmVmb3JlIHRoZSBSZW5kZXJUYXJnZXRTeXN0ZW0gaXMgc3RhcnRlZC4gVGhpcyBpcyB3aGVyZVxuICAgKiB3ZSByZXBsYWNlIHRoZSB0YXJnZXQgd2l0aCB0aGUgYmFjayBidWZmZXIgaWYgcmVxdWlyZWQuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoaXMgcmVuZGVyLlxuICAgKi9cbiAgcmVuZGVyU3RhcnQob3B0aW9ucykge1xuICAgIGNvbnN0IHJlbmRlclRhcmdldCA9IHRoaXMuX3JlbmRlcmVyLnJlbmRlclRhcmdldC5nZXRSZW5kZXJUYXJnZXQob3B0aW9ucy50YXJnZXQpO1xuICAgIHRoaXMuX3VzZUJhY2tCdWZmZXJUaGlzUmVuZGVyID0gdGhpcy51c2VCYWNrQnVmZmVyICYmICEhcmVuZGVyVGFyZ2V0LmlzUm9vdDtcbiAgICBpZiAodGhpcy5fdXNlQmFja0J1ZmZlclRoaXNSZW5kZXIpIHtcbiAgICAgIGNvbnN0IHJlbmRlclRhcmdldDIgPSB0aGlzLl9yZW5kZXJlci5yZW5kZXJUYXJnZXQuZ2V0UmVuZGVyVGFyZ2V0KG9wdGlvbnMudGFyZ2V0KTtcbiAgICAgIHRoaXMuX3RhcmdldFRleHR1cmUgPSByZW5kZXJUYXJnZXQyLmNvbG9yVGV4dHVyZTtcbiAgICAgIG9wdGlvbnMudGFyZ2V0ID0gdGhpcy5fZ2V0QmFja0J1ZmZlclRleHR1cmUocmVuZGVyVGFyZ2V0Mi5jb2xvclRleHR1cmUpO1xuICAgIH1cbiAgfVxuICByZW5kZXJFbmQoKSB7XG4gICAgdGhpcy5fcHJlc2VudEJhY2tCdWZmZXIoKTtcbiAgfVxuICBfcHJlc2VudEJhY2tCdWZmZXIoKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICByZW5kZXJlci5yZW5kZXJUYXJnZXQuZmluaXNoUmVuZGVyUGFzcygpO1xuICAgIGlmICghdGhpcy5fdXNlQmFja0J1ZmZlclRoaXNSZW5kZXIpXG4gICAgICByZXR1cm47XG4gICAgcmVuZGVyZXIucmVuZGVyVGFyZ2V0LmJpbmQodGhpcy5fdGFyZ2V0VGV4dHVyZSwgZmFsc2UpO1xuICAgIHRoaXMuX2JpZ1RyaWFuZ2xlU2hhZGVyLnJlc291cmNlcy51VGV4dHVyZSA9IHRoaXMuX2JhY2tCdWZmZXJUZXh0dXJlLnNvdXJjZTtcbiAgICByZW5kZXJlci5lbmNvZGVyLmRyYXcoe1xuICAgICAgZ2VvbWV0cnk6IGJpZ1RyaWFuZ2xlR2VvbWV0cnksXG4gICAgICBzaGFkZXI6IHRoaXMuX2JpZ1RyaWFuZ2xlU2hhZGVyLFxuICAgICAgc3RhdGU6IHRoaXMuX3N0YXRlXG4gICAgfSk7XG4gIH1cbiAgX2dldEJhY2tCdWZmZXJUZXh0dXJlKHRhcmdldFNvdXJjZVRleHR1cmUpIHtcbiAgICB0aGlzLl9iYWNrQnVmZmVyVGV4dHVyZSA9IHRoaXMuX2JhY2tCdWZmZXJUZXh0dXJlIHx8IG5ldyBUZXh0dXJlKHtcbiAgICAgIHNvdXJjZTogbmV3IFRleHR1cmVTb3VyY2Uoe1xuICAgICAgICB3aWR0aDogdGFyZ2V0U291cmNlVGV4dHVyZS53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiB0YXJnZXRTb3VyY2VUZXh0dXJlLmhlaWdodCxcbiAgICAgICAgcmVzb2x1dGlvbjogdGFyZ2V0U291cmNlVGV4dHVyZS5fcmVzb2x1dGlvbixcbiAgICAgICAgYW50aWFsaWFzOiB0aGlzLl9hbnRpYWxpYXNcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgdGhpcy5fYmFja0J1ZmZlclRleHR1cmUuc291cmNlLnJlc2l6ZShcbiAgICAgIHRhcmdldFNvdXJjZVRleHR1cmUud2lkdGgsXG4gICAgICB0YXJnZXRTb3VyY2VUZXh0dXJlLmhlaWdodCxcbiAgICAgIHRhcmdldFNvdXJjZVRleHR1cmUuX3Jlc29sdXRpb25cbiAgICApO1xuICAgIHJldHVybiB0aGlzLl9iYWNrQnVmZmVyVGV4dHVyZTtcbiAgfVxuICAvKiogZGVzdHJveXMgdGhlIGJhY2sgYnVmZmVyICovXG4gIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuX2JhY2tCdWZmZXJUZXh0dXJlKSB7XG4gICAgICB0aGlzLl9iYWNrQnVmZmVyVGV4dHVyZS5kZXN0cm95KCk7XG4gICAgICB0aGlzLl9iYWNrQnVmZmVyVGV4dHVyZSA9IG51bGw7XG4gICAgfVxuICB9XG59O1xuLyoqIEBpZ25vcmUgKi9cbl9HbEJhY2tCdWZmZXJTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbVxuICBdLFxuICBuYW1lOiBcImJhY2tCdWZmZXJcIixcbiAgcHJpb3JpdHk6IDFcbn07XG4vKiogZGVmYXVsdCBvcHRpb25zIGZvciB0aGUgYmFjayBidWZmZXIgc3lzdGVtICovXG5fR2xCYWNrQnVmZmVyU3lzdGVtLmRlZmF1bHRPcHRpb25zID0ge1xuICB1c2VCYWNrQnVmZmVyOiBmYWxzZVxufTtcbmxldCBHbEJhY2tCdWZmZXJTeXN0ZW0gPSBfR2xCYWNrQnVmZmVyU3lzdGVtO1xuXG5leHBvcnQgeyBHbEJhY2tCdWZmZXJTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsQmFja0J1ZmZlclN5c3RlbS5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR2xDb2xvck1hc2tTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMuX2NvbG9yTWFza0NhY2hlID0gMTU7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICBzZXRNYXNrKGNvbG9yTWFzaykge1xuICAgIGlmICh0aGlzLl9jb2xvck1hc2tDYWNoZSA9PT0gY29sb3JNYXNrKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuX2NvbG9yTWFza0NhY2hlID0gY29sb3JNYXNrO1xuICAgIHRoaXMuX3JlbmRlcmVyLmdsLmNvbG9yTWFzayhcbiAgICAgICEhKGNvbG9yTWFzayAmIDgpLFxuICAgICAgISEoY29sb3JNYXNrICYgNCksXG4gICAgICAhIShjb2xvck1hc2sgJiAyKSxcbiAgICAgICEhKGNvbG9yTWFzayAmIDEpXG4gICAgKTtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsQ29sb3JNYXNrU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJjb2xvck1hc2tcIlxufTtcblxuZXhwb3J0IHsgR2xDb2xvck1hc2tTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsQ29sb3JNYXNrU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHbEVuY29kZXJTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMuY29tbWFuZEZpbmlzaGVkID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICBzZXRHZW9tZXRyeShnZW9tZXRyeSwgc2hhZGVyKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIuZ2VvbWV0cnkuYmluZChnZW9tZXRyeSwgc2hhZGVyLmdsUHJvZ3JhbSk7XG4gIH1cbiAgZmluaXNoUmVuZGVyUGFzcygpIHtcbiAgfVxuICBkcmF3KG9wdGlvbnMpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuICAgIGNvbnN0IHsgZ2VvbWV0cnksIHNoYWRlciwgc3RhdGUsIHNraXBTeW5jLCB0b3BvbG9neTogdHlwZSwgc2l6ZSwgc3RhcnQsIGluc3RhbmNlQ291bnQgfSA9IG9wdGlvbnM7XG4gICAgcmVuZGVyZXIuc2hhZGVyLmJpbmQoc2hhZGVyLCBza2lwU3luYyk7XG4gICAgcmVuZGVyZXIuZ2VvbWV0cnkuYmluZChnZW9tZXRyeSwgcmVuZGVyZXIuc2hhZGVyLl9hY3RpdmVQcm9ncmFtKTtcbiAgICBpZiAoc3RhdGUpIHtcbiAgICAgIHJlbmRlcmVyLnN0YXRlLnNldChzdGF0ZSk7XG4gICAgfVxuICAgIHJlbmRlcmVyLmdlb21ldHJ5LmRyYXcodHlwZSwgc2l6ZSwgc3RhcnQsIGluc3RhbmNlQ291bnQgPz8gZ2VvbWV0cnkuaW5zdGFuY2VDb3VudCk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HbEVuY29kZXJTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbVxuICBdLFxuICBuYW1lOiBcImVuY29kZXJcIlxufTtcblxuZXhwb3J0IHsgR2xFbmNvZGVyU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbEVuY29kZXJTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgR3B1U3RlbmNpbE1vZGVzVG9QaXhpIH0gZnJvbSAnLi4vZ3B1L3N0YXRlL0dwdVN0ZW5jaWxNb2Rlc1RvUGl4aS5tanMnO1xuaW1wb3J0IHsgU1RFTkNJTF9NT0RFUyB9IGZyb20gJy4uL3NoYXJlZC9zdGF0ZS9jb25zdC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsU3RlbmNpbFN5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fc3RlbmNpbENhY2hlID0ge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBzdGVuY2lsUmVmZXJlbmNlOiAwLFxuICAgICAgc3RlbmNpbE1vZGU6IFNURU5DSUxfTU9ERVMuTk9ORVxuICAgIH07XG4gICAgdGhpcy5fcmVuZGVyVGFyZ2V0U3RlbmNpbFN0YXRlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmVuZGVyZXIucmVuZGVyVGFyZ2V0Lm9uUmVuZGVyVGFyZ2V0Q2hhbmdlLmFkZCh0aGlzKTtcbiAgfVxuICBjb250ZXh0Q2hhbmdlKGdsKSB7XG4gICAgdGhpcy5fZ2wgPSBnbDtcbiAgICB0aGlzLl9jb21wYXJpc29uRnVuY01hcHBpbmcgPSB7XG4gICAgICBhbHdheXM6IGdsLkFMV0FZUyxcbiAgICAgIG5ldmVyOiBnbC5ORVZFUixcbiAgICAgIGVxdWFsOiBnbC5FUVVBTCxcbiAgICAgIFwibm90LWVxdWFsXCI6IGdsLk5PVEVRVUFMLFxuICAgICAgbGVzczogZ2wuTEVTUyxcbiAgICAgIFwibGVzcy1lcXVhbFwiOiBnbC5MRVFVQUwsXG4gICAgICBncmVhdGVyOiBnbC5HUkVBVEVSLFxuICAgICAgXCJncmVhdGVyLWVxdWFsXCI6IGdsLkdFUVVBTFxuICAgIH07XG4gICAgdGhpcy5fc3RlbmNpbE9wc01hcHBpbmcgPSB7XG4gICAgICBrZWVwOiBnbC5LRUVQLFxuICAgICAgemVybzogZ2wuWkVSTyxcbiAgICAgIHJlcGxhY2U6IGdsLlJFUExBQ0UsXG4gICAgICBpbnZlcnQ6IGdsLklOVkVSVCxcbiAgICAgIFwiaW5jcmVtZW50LWNsYW1wXCI6IGdsLklOQ1IsXG4gICAgICBcImRlY3JlbWVudC1jbGFtcFwiOiBnbC5ERUNSLFxuICAgICAgXCJpbmNyZW1lbnQtd3JhcFwiOiBnbC5JTkNSX1dSQVAsXG4gICAgICBcImRlY3JlbWVudC13cmFwXCI6IGdsLkRFQ1JfV1JBUFxuICAgIH07XG4gIH1cbiAgb25SZW5kZXJUYXJnZXRDaGFuZ2UocmVuZGVyVGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZVJlbmRlclRhcmdldCA9PT0gcmVuZGVyVGFyZ2V0KVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuX2FjdGl2ZVJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDtcbiAgICBsZXQgc3RlbmNpbFN0YXRlID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3RlbmNpbFN0YXRlW3JlbmRlclRhcmdldC51aWRdO1xuICAgIGlmICghc3RlbmNpbFN0YXRlKSB7XG4gICAgICBzdGVuY2lsU3RhdGUgPSB0aGlzLl9yZW5kZXJUYXJnZXRTdGVuY2lsU3RhdGVbcmVuZGVyVGFyZ2V0LnVpZF0gPSB7XG4gICAgICAgIHN0ZW5jaWxNb2RlOiBTVEVOQ0lMX01PREVTLkRJU0FCTEVELFxuICAgICAgICBzdGVuY2lsUmVmZXJlbmNlOiAwXG4gICAgICB9O1xuICAgIH1cbiAgICB0aGlzLnNldFN0ZW5jaWxNb2RlKHN0ZW5jaWxTdGF0ZS5zdGVuY2lsTW9kZSwgc3RlbmNpbFN0YXRlLnN0ZW5jaWxSZWZlcmVuY2UpO1xuICB9XG4gIHNldFN0ZW5jaWxNb2RlKHN0ZW5jaWxNb2RlLCBzdGVuY2lsUmVmZXJlbmNlKSB7XG4gICAgY29uc3Qgc3RlbmNpbFN0YXRlID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3RlbmNpbFN0YXRlW3RoaXMuX2FjdGl2ZVJlbmRlclRhcmdldC51aWRdO1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgY29uc3QgbW9kZSA9IEdwdVN0ZW5jaWxNb2Rlc1RvUGl4aVtzdGVuY2lsTW9kZV07XG4gICAgY29uc3QgX3N0ZW5jaWxDYWNoZSA9IHRoaXMuX3N0ZW5jaWxDYWNoZTtcbiAgICBzdGVuY2lsU3RhdGUuc3RlbmNpbE1vZGUgPSBzdGVuY2lsTW9kZTtcbiAgICBzdGVuY2lsU3RhdGUuc3RlbmNpbFJlZmVyZW5jZSA9IHN0ZW5jaWxSZWZlcmVuY2U7XG4gICAgaWYgKHN0ZW5jaWxNb2RlID09PSBTVEVOQ0lMX01PREVTLkRJU0FCTEVEKSB7XG4gICAgICBpZiAodGhpcy5fc3RlbmNpbENhY2hlLmVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5fc3RlbmNpbENhY2hlLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgZ2wuZGlzYWJsZShnbC5TVEVOQ0lMX1RFU1QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX3N0ZW5jaWxDYWNoZS5lbmFibGVkKSB7XG4gICAgICB0aGlzLl9zdGVuY2lsQ2FjaGUuZW5hYmxlZCA9IHRydWU7XG4gICAgICBnbC5lbmFibGUoZ2wuU1RFTkNJTF9URVNUKTtcbiAgICB9XG4gICAgaWYgKHN0ZW5jaWxNb2RlICE9PSBfc3RlbmNpbENhY2hlLnN0ZW5jaWxNb2RlIHx8IF9zdGVuY2lsQ2FjaGUuc3RlbmNpbFJlZmVyZW5jZSAhPT0gc3RlbmNpbFJlZmVyZW5jZSkge1xuICAgICAgX3N0ZW5jaWxDYWNoZS5zdGVuY2lsTW9kZSA9IHN0ZW5jaWxNb2RlO1xuICAgICAgX3N0ZW5jaWxDYWNoZS5zdGVuY2lsUmVmZXJlbmNlID0gc3RlbmNpbFJlZmVyZW5jZTtcbiAgICAgIGdsLnN0ZW5jaWxGdW5jKHRoaXMuX2NvbXBhcmlzb25GdW5jTWFwcGluZ1ttb2RlLnN0ZW5jaWxCYWNrLmNvbXBhcmVdLCBzdGVuY2lsUmVmZXJlbmNlLCAyNTUpO1xuICAgICAgZ2wuc3RlbmNpbE9wKGdsLktFRVAsIGdsLktFRVAsIHRoaXMuX3N0ZW5jaWxPcHNNYXBwaW5nW21vZGUuc3RlbmNpbEJhY2sucGFzc09wXSk7XG4gICAgfVxuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR2xTdGVuY2lsU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJzdGVuY2lsXCJcbn07XG5cbmV4cG9ydCB7IEdsU3RlbmNpbFN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xTdGVuY2lsU3lzdGVtLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgV0dTTF9UT19TVEQ0MF9TSVpFID0ge1xuICBmMzI6IDQsXG4gIFwidmVjMjxmMzI+XCI6IDgsXG4gIFwidmVjMzxmMzI+XCI6IDEyLFxuICBcInZlYzQ8ZjMyPlwiOiAxNixcbiAgXCJtYXQyeDI8ZjMyPlwiOiAxNiAqIDIsXG4gIFwibWF0M3gzPGYzMj5cIjogMTYgKiAzLFxuICBcIm1hdDR4NDxmMzI+XCI6IDE2ICogNFxuICAvLyBUT0RPIC0gbm90IGVzc2VudGlhbCBmb3Igbm93IGJ1dCBzdXBwb3J0IHRoZXNlIGluIHRoZSBmdXR1cmVcbiAgLy8gaW50OiAgICAgIDQsXG4gIC8vIGl2ZWMyOiAgICA4LFxuICAvLyBpdmVjMzogICAgMTIsXG4gIC8vIGl2ZWM0OiAgICAxNixcbiAgLy8gdWludDogICAgIDQsXG4gIC8vIHV2ZWMyOiAgICA4LFxuICAvLyB1dmVjMzogICAgMTIsXG4gIC8vIHV2ZWM0OiAgICAxNixcbiAgLy8gYm9vbDogICAgIDQsXG4gIC8vIGJ2ZWMyOiAgICA4LFxuICAvLyBidmVjMzogICAgMTIsXG4gIC8vIGJ2ZWM0OiAgICAxNixcbiAgLy8gbWF0MjogICAgIDE2ICogMixcbiAgLy8gbWF0MzogICAgIDE2ICogMyxcbiAgLy8gbWF0NDogICAgIDE2ICogNCxcbn07XG5mdW5jdGlvbiBjcmVhdGVVYm9FbGVtZW50c1NURDQwKHVuaWZvcm1EYXRhKSB7XG4gIGNvbnN0IHVib0VsZW1lbnRzID0gdW5pZm9ybURhdGEubWFwKChkYXRhKSA9PiAoe1xuICAgIGRhdGEsXG4gICAgb2Zmc2V0OiAwLFxuICAgIHNpemU6IDBcbiAgfSkpO1xuICBsZXQgc2l6ZSA9IDA7XG4gIGxldCBjaHVua1NpemUgPSAwO1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB1Ym9FbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHVib0VsZW1lbnQgPSB1Ym9FbGVtZW50c1tpXTtcbiAgICBzaXplID0gV0dTTF9UT19TVEQ0MF9TSVpFW3Vib0VsZW1lbnQuZGF0YS50eXBlXTtcbiAgICBpZiAoIXNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biB0eXBlICR7dWJvRWxlbWVudC5kYXRhLnR5cGV9YCk7XG4gICAgfVxuICAgIGlmICh1Ym9FbGVtZW50LmRhdGEuc2l6ZSA+IDEpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChzaXplLCAxNikgKiB1Ym9FbGVtZW50LmRhdGEuc2l6ZTtcbiAgICB9XG4gICAgdWJvRWxlbWVudC5zaXplID0gc2l6ZTtcbiAgICBpZiAoY2h1bmtTaXplICUgc2l6ZSAhPT0gMCAmJiBjaHVua1NpemUgPCAxNikge1xuICAgICAgY29uc3QgbGluZVVwVmFsdWUgPSBjaHVua1NpemUgJSBzaXplICUgMTY7XG4gICAgICBjaHVua1NpemUgKz0gbGluZVVwVmFsdWU7XG4gICAgICBvZmZzZXQgKz0gbGluZVVwVmFsdWU7XG4gICAgfVxuICAgIGlmIChjaHVua1NpemUgKyBzaXplID4gMTYpIHtcbiAgICAgIG9mZnNldCA9IE1hdGguY2VpbChvZmZzZXQgLyAxNikgKiAxNjtcbiAgICAgIHVib0VsZW1lbnQub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgb2Zmc2V0ICs9IHNpemU7XG4gICAgICBjaHVua1NpemUgPSBzaXplO1xuICAgIH0gZWxzZSB7XG4gICAgICB1Ym9FbGVtZW50Lm9mZnNldCA9IG9mZnNldDtcbiAgICAgIGNodW5rU2l6ZSArPSBzaXplO1xuICAgICAgb2Zmc2V0ICs9IHNpemU7XG4gICAgfVxuICB9XG4gIG9mZnNldCA9IE1hdGguY2VpbChvZmZzZXQgLyAxNikgKiAxNjtcbiAgcmV0dXJuIHsgdWJvRWxlbWVudHMsIHNpemU6IG9mZnNldCB9O1xufVxuXG5leHBvcnQgeyBXR1NMX1RPX1NURDQwX1NJWkUsIGNyZWF0ZVVib0VsZW1lbnRzU1RENDAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZVVib0VsZW1lbnRzU1RENDAubWpzLm1hcFxuIiwiaW1wb3J0IHsgV0dTTF9UT19TVEQ0MF9TSVpFIH0gZnJvbSAnLi9jcmVhdGVVYm9FbGVtZW50c1NURDQwLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZ2VuZXJhdGVBcnJheVN5bmNTVEQ0MCh1Ym9FbGVtZW50LCBvZmZzZXRUb0FkZCkge1xuICBjb25zdCByb3dTaXplID0gTWF0aC5tYXgoV0dTTF9UT19TVEQ0MF9TSVpFW3Vib0VsZW1lbnQuZGF0YS50eXBlXSAvIDE2LCAxKTtcbiAgY29uc3QgZWxlbWVudFNpemUgPSB1Ym9FbGVtZW50LmRhdGEudmFsdWUubGVuZ3RoIC8gdWJvRWxlbWVudC5kYXRhLnNpemU7XG4gIGNvbnN0IHJlbWFpbmRlciA9ICg0IC0gZWxlbWVudFNpemUgJSA0KSAlIDQ7XG4gIHJldHVybiBgXG4gICAgICAgIHYgPSB1di4ke3Vib0VsZW1lbnQuZGF0YS5uYW1lfTtcbiAgICAgICAgb2Zmc2V0ICs9ICR7b2Zmc2V0VG9BZGR9O1xuXG4gICAgICAgIGFycmF5T2Zmc2V0ID0gb2Zmc2V0O1xuXG4gICAgICAgIHQgPSAwO1xuXG4gICAgICAgIGZvcih2YXIgaT0wOyBpIDwgJHt1Ym9FbGVtZW50LmRhdGEuc2l6ZSAqIHJvd1NpemV9OyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvcih2YXIgaiA9IDA7IGogPCAke2VsZW1lbnRTaXplfTsgaisrKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRhdGFbYXJyYXlPZmZzZXQrK10gPSB2W3QrK107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke3JlbWFpbmRlciAhPT0gMCA/IGBhcnJheU9mZnNldCArPSAke3JlbWFpbmRlcn07YCA6IFwiXCJ9XG4gICAgICAgIH1cbiAgICBgO1xufVxuXG5leHBvcnQgeyBnZW5lcmF0ZUFycmF5U3luY1NURDQwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmF0ZUFycmF5U3luY1NURDQwLm1qcy5tYXBcbiIsImltcG9ydCB7IGNyZWF0ZVVib1N5bmNGdW5jdGlvbiB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9zaGFkZXIvdXRpbHMvY3JlYXRlVWJvU3luY0Z1bmN0aW9uLm1qcyc7XG5pbXBvcnQgeyB1Ym9TeW5jRnVuY3Rpb25zU1RENDAgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvc2hhZGVyL3V0aWxzL3Vib1N5bmNGdW5jdGlvbnMubWpzJztcbmltcG9ydCB7IGdlbmVyYXRlQXJyYXlTeW5jU1RENDAgfSBmcm9tICcuL2dlbmVyYXRlQXJyYXlTeW5jU1RENDAubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBjcmVhdGVVYm9TeW5jRnVuY3Rpb25TVEQ0MCh1Ym9FbGVtZW50cykge1xuICByZXR1cm4gY3JlYXRlVWJvU3luY0Z1bmN0aW9uKFxuICAgIHVib0VsZW1lbnRzLFxuICAgIFwidWJvU3RkNDBcIixcbiAgICBnZW5lcmF0ZUFycmF5U3luY1NURDQwLFxuICAgIHVib1N5bmNGdW5jdGlvbnNTVEQ0MFxuICApO1xufVxuXG5leHBvcnQgeyBjcmVhdGVVYm9TeW5jRnVuY3Rpb25TVEQ0MCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlVWJvU3luY1NURDQwLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IFVib1N5c3RlbSB9IGZyb20gJy4uL3NoYXJlZC9zaGFkZXIvVWJvU3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVVYm9FbGVtZW50c1NURDQwIH0gZnJvbSAnLi9zaGFkZXIvdXRpbHMvY3JlYXRlVWJvRWxlbWVudHNTVEQ0MC5tanMnO1xuaW1wb3J0IHsgY3JlYXRlVWJvU3luY0Z1bmN0aW9uU1RENDAgfSBmcm9tICcuL3NoYWRlci91dGlscy9jcmVhdGVVYm9TeW5jU1RENDAubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHbFVib1N5c3RlbSBleHRlbmRzIFVib1N5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHtcbiAgICAgIGNyZWF0ZVVib0VsZW1lbnRzOiBjcmVhdGVVYm9FbGVtZW50c1NURDQwLFxuICAgICAgZ2VuZXJhdGVVYm9TeW5jOiBjcmVhdGVVYm9TeW5jRnVuY3Rpb25TVEQ0MFxuICAgIH0pO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR2xVYm9TeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbV0sXG4gIG5hbWU6IFwidWJvXCJcbn07XG5cbmV4cG9ydCB7IEdsVWJvU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbFVib1N5c3RlbS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsUmVuZGVyVGFyZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy53aWR0aCA9IC0xO1xuICAgIHRoaXMuaGVpZ2h0ID0gLTE7XG4gICAgdGhpcy5tc2FhID0gZmFsc2U7XG4gICAgdGhpcy5tc2FhUmVuZGVyQnVmZmVyID0gW107XG4gIH1cbn1cblxuZXhwb3J0IHsgR2xSZW5kZXJUYXJnZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsUmVuZGVyVGFyZ2V0Lm1qcy5tYXBcbiIsImltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gJy4uLy4uLy4uLy4uL21hdGhzL3NoYXBlcy9SZWN0YW5nbGUubWpzJztcbmltcG9ydCB7IHdhcm4gfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9sb2dnaW5nL3dhcm4ubWpzJztcbmltcG9ydCB7IENhbnZhc1NvdXJjZSB9IGZyb20gJy4uLy4uL3NoYXJlZC90ZXh0dXJlL3NvdXJjZXMvQ2FudmFzU291cmNlLm1qcyc7XG5pbXBvcnQgeyBDTEVBUiB9IGZyb20gJy4uL2NvbnN0Lm1qcyc7XG5pbXBvcnQgeyBHbFJlbmRlclRhcmdldCB9IGZyb20gJy4uL0dsUmVuZGVyVGFyZ2V0Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR2xSZW5kZXJUYXJnZXRBZGFwdG9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fY2xlYXJDb2xvckNhY2hlID0gWzAsIDAsIDAsIDBdO1xuICAgIHRoaXMuX3ZpZXdQb3J0Q2FjaGUgPSBuZXcgUmVjdGFuZ2xlKCk7XG4gIH1cbiAgaW5pdChyZW5kZXJlciwgcmVuZGVyVGFyZ2V0U3lzdGVtKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9yZW5kZXJUYXJnZXRTeXN0ZW0gPSByZW5kZXJUYXJnZXRTeXN0ZW07XG4gICAgcmVuZGVyZXIucnVubmVycy5jb250ZXh0Q2hhbmdlLmFkZCh0aGlzKTtcbiAgfVxuICBjb250ZXh0Q2hhbmdlKCkge1xuICAgIHRoaXMuX2NsZWFyQ29sb3JDYWNoZSA9IFswLCAwLCAwLCAwXTtcbiAgICB0aGlzLl92aWV3UG9ydENhY2hlID0gbmV3IFJlY3RhbmdsZSgpO1xuICB9XG4gIGNvcHlUb1RleHR1cmUoc291cmNlUmVuZGVyU3VyZmFjZVRleHR1cmUsIGRlc3RpbmF0aW9uVGV4dHVyZSwgb3JpZ2luU3JjLCBzaXplLCBvcmlnaW5EZXN0KSB7XG4gICAgY29uc3QgcmVuZGVyVGFyZ2V0U3lzdGVtID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3lzdGVtO1xuICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG4gICAgY29uc3QgZ2xSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXRTeXN0ZW0uZ2V0R3B1UmVuZGVyVGFyZ2V0KHNvdXJjZVJlbmRlclN1cmZhY2VUZXh0dXJlKTtcbiAgICBjb25zdCBnbCA9IHJlbmRlcmVyLmdsO1xuICAgIHRoaXMuZmluaXNoUmVuZGVyUGFzcyhzb3VyY2VSZW5kZXJTdXJmYWNlVGV4dHVyZSk7XG4gICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBnbFJlbmRlclRhcmdldC5yZXNvbHZlVGFyZ2V0RnJhbWVidWZmZXIpO1xuICAgIHJlbmRlcmVyLnRleHR1cmUuYmluZChkZXN0aW5hdGlvblRleHR1cmUsIDApO1xuICAgIGdsLmNvcHlUZXhTdWJJbWFnZTJEKFxuICAgICAgZ2wuVEVYVFVSRV8yRCxcbiAgICAgIDAsXG4gICAgICBvcmlnaW5EZXN0LngsXG4gICAgICBvcmlnaW5EZXN0LnksXG4gICAgICBvcmlnaW5TcmMueCxcbiAgICAgIG9yaWdpblNyYy55LFxuICAgICAgc2l6ZS53aWR0aCxcbiAgICAgIHNpemUuaGVpZ2h0XG4gICAgKTtcbiAgICByZXR1cm4gZGVzdGluYXRpb25UZXh0dXJlO1xuICB9XG4gIHN0YXJ0UmVuZGVyUGFzcyhyZW5kZXJUYXJnZXQsIGNsZWFyID0gdHJ1ZSwgY2xlYXJDb2xvciwgdmlld3BvcnQpIHtcbiAgICBjb25zdCByZW5kZXJUYXJnZXRTeXN0ZW0gPSB0aGlzLl9yZW5kZXJUYXJnZXRTeXN0ZW07XG4gICAgY29uc3Qgc291cmNlID0gcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZTtcbiAgICBjb25zdCBncHVSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXRTeXN0ZW0uZ2V0R3B1UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCk7XG4gICAgbGV0IHZpZXdQb3J0WSA9IHZpZXdwb3J0Lnk7XG4gICAgaWYgKHJlbmRlclRhcmdldC5pc1Jvb3QpIHtcbiAgICAgIHZpZXdQb3J0WSA9IHNvdXJjZS5waXhlbEhlaWdodCAtIHZpZXdwb3J0LmhlaWdodDtcbiAgICB9XG4gICAgcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZXMuZm9yRWFjaCgodGV4dHVyZSkgPT4ge1xuICAgICAgdGhpcy5fcmVuZGVyZXIudGV4dHVyZS51bmJpbmQodGV4dHVyZSk7XG4gICAgfSk7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9yZW5kZXJlci5nbDtcbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGdwdVJlbmRlclRhcmdldC5mcmFtZWJ1ZmZlcik7XG4gICAgY29uc3Qgdmlld1BvcnRDYWNoZSA9IHRoaXMuX3ZpZXdQb3J0Q2FjaGU7XG4gICAgaWYgKHZpZXdQb3J0Q2FjaGUueCAhPT0gdmlld3BvcnQueCB8fCB2aWV3UG9ydENhY2hlLnkgIT09IHZpZXdQb3J0WSB8fCB2aWV3UG9ydENhY2hlLndpZHRoICE9PSB2aWV3cG9ydC53aWR0aCB8fCB2aWV3UG9ydENhY2hlLmhlaWdodCAhPT0gdmlld3BvcnQuaGVpZ2h0KSB7XG4gICAgICB2aWV3UG9ydENhY2hlLnggPSB2aWV3cG9ydC54O1xuICAgICAgdmlld1BvcnRDYWNoZS55ID0gdmlld1BvcnRZO1xuICAgICAgdmlld1BvcnRDYWNoZS53aWR0aCA9IHZpZXdwb3J0LndpZHRoO1xuICAgICAgdmlld1BvcnRDYWNoZS5oZWlnaHQgPSB2aWV3cG9ydC5oZWlnaHQ7XG4gICAgICBnbC52aWV3cG9ydChcbiAgICAgICAgdmlld3BvcnQueCxcbiAgICAgICAgdmlld1BvcnRZLFxuICAgICAgICB2aWV3cG9ydC53aWR0aCxcbiAgICAgICAgdmlld3BvcnQuaGVpZ2h0XG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWdwdVJlbmRlclRhcmdldC5kZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXIgJiYgKHJlbmRlclRhcmdldC5zdGVuY2lsIHx8IHJlbmRlclRhcmdldC5kZXB0aCkpIHtcbiAgICAgIHRoaXMuX2luaXRTdGVuY2lsKGdwdVJlbmRlclRhcmdldCk7XG4gICAgfVxuICAgIHRoaXMuY2xlYXIocmVuZGVyVGFyZ2V0LCBjbGVhciwgY2xlYXJDb2xvcik7XG4gIH1cbiAgZmluaXNoUmVuZGVyUGFzcyhyZW5kZXJUYXJnZXQpIHtcbiAgICBjb25zdCByZW5kZXJUYXJnZXRTeXN0ZW0gPSB0aGlzLl9yZW5kZXJUYXJnZXRTeXN0ZW07XG4gICAgY29uc3QgZ2xSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXRTeXN0ZW0uZ2V0R3B1UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCk7XG4gICAgaWYgKCFnbFJlbmRlclRhcmdldC5tc2FhKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGdsID0gdGhpcy5fcmVuZGVyZXIuZ2w7XG4gICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBnbFJlbmRlclRhcmdldC5yZXNvbHZlVGFyZ2V0RnJhbWVidWZmZXIpO1xuICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5SRUFEX0ZSQU1FQlVGRkVSLCBnbFJlbmRlclRhcmdldC5mcmFtZWJ1ZmZlcik7XG4gICAgZ2wuYmxpdEZyYW1lYnVmZmVyKFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICBnbFJlbmRlclRhcmdldC53aWR0aCxcbiAgICAgIGdsUmVuZGVyVGFyZ2V0LmhlaWdodCxcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgZ2xSZW5kZXJUYXJnZXQud2lkdGgsXG4gICAgICBnbFJlbmRlclRhcmdldC5oZWlnaHQsXG4gICAgICBnbC5DT0xPUl9CVUZGRVJfQklULFxuICAgICAgZ2wuTkVBUkVTVFxuICAgICk7XG4gICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBnbFJlbmRlclRhcmdldC5mcmFtZWJ1ZmZlcik7XG4gIH1cbiAgaW5pdEdwdVJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuICAgIGNvbnN0IGdsID0gcmVuZGVyZXIuZ2w7XG4gICAgY29uc3QgZ2xSZW5kZXJUYXJnZXQgPSBuZXcgR2xSZW5kZXJUYXJnZXQoKTtcbiAgICBpZiAoQ2FudmFzU291cmNlLnRlc3QocmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZS5yZXNvdXJjZSkpIHtcbiAgICAgIGdsUmVuZGVyVGFyZ2V0LmZyYW1lYnVmZmVyID0gbnVsbDtcbiAgICAgIHJldHVybiBnbFJlbmRlclRhcmdldDtcbiAgICB9XG4gICAgdGhpcy5faW5pdENvbG9yKHJlbmRlclRhcmdldCwgZ2xSZW5kZXJUYXJnZXQpO1xuICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG4gICAgcmV0dXJuIGdsUmVuZGVyVGFyZ2V0O1xuICB9XG4gIGNsZWFyKF9yZW5kZXJUYXJnZXQsIGNsZWFyLCBjbGVhckNvbG9yKSB7XG4gICAgaWYgKCFjbGVhcilcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCByZW5kZXJUYXJnZXRTeXN0ZW0gPSB0aGlzLl9yZW5kZXJUYXJnZXRTeXN0ZW07XG4gICAgaWYgKHR5cGVvZiBjbGVhciA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIGNsZWFyID0gY2xlYXIgPyBDTEVBUi5BTEwgOiBDTEVBUi5OT05FO1xuICAgIH1cbiAgICBjb25zdCBnbCA9IHRoaXMuX3JlbmRlcmVyLmdsO1xuICAgIGlmIChjbGVhciAmIENMRUFSLkNPTE9SKSB7XG4gICAgICBjbGVhckNvbG9yID8/IChjbGVhckNvbG9yID0gcmVuZGVyVGFyZ2V0U3lzdGVtLmRlZmF1bHRDbGVhckNvbG9yKTtcbiAgICAgIGNvbnN0IGNsZWFyQ29sb3JDYWNoZSA9IHRoaXMuX2NsZWFyQ29sb3JDYWNoZTtcbiAgICAgIGNvbnN0IGNsZWFyQ29sb3JBcnJheSA9IGNsZWFyQ29sb3I7XG4gICAgICBpZiAoY2xlYXJDb2xvckNhY2hlWzBdICE9PSBjbGVhckNvbG9yQXJyYXlbMF0gfHwgY2xlYXJDb2xvckNhY2hlWzFdICE9PSBjbGVhckNvbG9yQXJyYXlbMV0gfHwgY2xlYXJDb2xvckNhY2hlWzJdICE9PSBjbGVhckNvbG9yQXJyYXlbMl0gfHwgY2xlYXJDb2xvckNhY2hlWzNdICE9PSBjbGVhckNvbG9yQXJyYXlbM10pIHtcbiAgICAgICAgY2xlYXJDb2xvckNhY2hlWzBdID0gY2xlYXJDb2xvckFycmF5WzBdO1xuICAgICAgICBjbGVhckNvbG9yQ2FjaGVbMV0gPSBjbGVhckNvbG9yQXJyYXlbMV07XG4gICAgICAgIGNsZWFyQ29sb3JDYWNoZVsyXSA9IGNsZWFyQ29sb3JBcnJheVsyXTtcbiAgICAgICAgY2xlYXJDb2xvckNhY2hlWzNdID0gY2xlYXJDb2xvckFycmF5WzNdO1xuICAgICAgICBnbC5jbGVhckNvbG9yKGNsZWFyQ29sb3JBcnJheVswXSwgY2xlYXJDb2xvckFycmF5WzFdLCBjbGVhckNvbG9yQXJyYXlbMl0sIGNsZWFyQ29sb3JBcnJheVszXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGdsLmNsZWFyKGNsZWFyKTtcbiAgfVxuICByZXNpemVHcHVSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KSB7XG4gICAgaWYgKHJlbmRlclRhcmdldC5pc1Jvb3QpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgcmVuZGVyVGFyZ2V0U3lzdGVtID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3lzdGVtO1xuICAgIGNvbnN0IGdsUmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0U3lzdGVtLmdldEdwdVJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQpO1xuICAgIHRoaXMuX3Jlc2l6ZUNvbG9yKHJlbmRlclRhcmdldCwgZ2xSZW5kZXJUYXJnZXQpO1xuICAgIGlmIChyZW5kZXJUYXJnZXQuc3RlbmNpbCkge1xuICAgICAgdGhpcy5fcmVzaXplU3RlbmNpbChnbFJlbmRlclRhcmdldCk7XG4gICAgfVxuICB9XG4gIF9pbml0Q29sb3IocmVuZGVyVGFyZ2V0LCBnbFJlbmRlclRhcmdldCkge1xuICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG4gICAgY29uc3QgZ2wgPSByZW5kZXJlci5nbDtcbiAgICBjb25zdCByZXNvbHZlVGFyZ2V0RnJhbWVidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuICAgIGdsUmVuZGVyVGFyZ2V0LnJlc29sdmVUYXJnZXRGcmFtZWJ1ZmZlciA9IHJlc29sdmVUYXJnZXRGcmFtZWJ1ZmZlcjtcbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHJlc29sdmVUYXJnZXRGcmFtZWJ1ZmZlcik7XG4gICAgZ2xSZW5kZXJUYXJnZXQud2lkdGggPSByZW5kZXJUYXJnZXQuY29sb3JUZXh0dXJlLnNvdXJjZS5waXhlbFdpZHRoO1xuICAgIGdsUmVuZGVyVGFyZ2V0LmhlaWdodCA9IHJlbmRlclRhcmdldC5jb2xvclRleHR1cmUuc291cmNlLnBpeGVsSGVpZ2h0O1xuICAgIHJlbmRlclRhcmdldC5jb2xvclRleHR1cmVzLmZvckVhY2goKGNvbG9yVGV4dHVyZSwgaSkgPT4ge1xuICAgICAgY29uc3Qgc291cmNlID0gY29sb3JUZXh0dXJlLnNvdXJjZTtcbiAgICAgIGlmIChzb3VyY2UuYW50aWFsaWFzKSB7XG4gICAgICAgIGlmIChyZW5kZXJlci5jb250ZXh0LnN1cHBvcnRzLm1zYWEpIHtcbiAgICAgICAgICBnbFJlbmRlclRhcmdldC5tc2FhID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuKFwiW1JlbmRlclRleHR1cmVdIEFudGlhbGlhc2luZyBvbiB0ZXh0dXJlcyBpcyBub3Qgc3VwcG9ydGVkIGluIFdlYkdMMVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVuZGVyZXIudGV4dHVyZS5iaW5kU291cmNlKHNvdXJjZSwgMCk7XG4gICAgICBjb25zdCBnbFNvdXJjZSA9IHJlbmRlcmVyLnRleHR1cmUuZ2V0R2xTb3VyY2Uoc291cmNlKTtcbiAgICAgIGNvbnN0IGdsVGV4dHVyZSA9IGdsU291cmNlLnRleHR1cmU7XG4gICAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChcbiAgICAgICAgZ2wuRlJBTUVCVUZGRVIsXG4gICAgICAgIGdsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSxcbiAgICAgICAgMzU1MyxcbiAgICAgICAgLy8gdGV4dHVyZS50YXJnZXQsXG4gICAgICAgIGdsVGV4dHVyZSxcbiAgICAgICAgMFxuICAgICAgKTtcbiAgICB9KTtcbiAgICBpZiAoZ2xSZW5kZXJUYXJnZXQubXNhYSkge1xuICAgICAgY29uc3Qgdmlld0ZyYW1lYnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcbiAgICAgIGdsUmVuZGVyVGFyZ2V0LmZyYW1lYnVmZmVyID0gdmlld0ZyYW1lYnVmZmVyO1xuICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB2aWV3RnJhbWVidWZmZXIpO1xuICAgICAgcmVuZGVyVGFyZ2V0LmNvbG9yVGV4dHVyZXMuZm9yRWFjaCgoXywgaSkgPT4ge1xuICAgICAgICBjb25zdCBtc2FhUmVuZGVyQnVmZmVyID0gZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG4gICAgICAgIGdsUmVuZGVyVGFyZ2V0Lm1zYWFSZW5kZXJCdWZmZXJbaV0gPSBtc2FhUmVuZGVyQnVmZmVyO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsUmVuZGVyVGFyZ2V0LmZyYW1lYnVmZmVyID0gcmVzb2x2ZVRhcmdldEZyYW1lYnVmZmVyO1xuICAgIH1cbiAgICB0aGlzLl9yZXNpemVDb2xvcihyZW5kZXJUYXJnZXQsIGdsUmVuZGVyVGFyZ2V0KTtcbiAgfVxuICBfcmVzaXplQ29sb3IocmVuZGVyVGFyZ2V0LCBnbFJlbmRlclRhcmdldCkge1xuICAgIGNvbnN0IHNvdXJjZSA9IHJlbmRlclRhcmdldC5jb2xvclRleHR1cmUuc291cmNlO1xuICAgIGdsUmVuZGVyVGFyZ2V0LndpZHRoID0gc291cmNlLnBpeGVsV2lkdGg7XG4gICAgZ2xSZW5kZXJUYXJnZXQuaGVpZ2h0ID0gc291cmNlLnBpeGVsSGVpZ2h0O1xuICAgIHJlbmRlclRhcmdldC5jb2xvclRleHR1cmVzLmZvckVhY2goKGNvbG9yVGV4dHVyZSwgaSkgPT4ge1xuICAgICAgaWYgKGkgPT09IDApXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbG9yVGV4dHVyZS5zb3VyY2UucmVzaXplKHNvdXJjZS53aWR0aCwgc291cmNlLmhlaWdodCwgc291cmNlLl9yZXNvbHV0aW9uKTtcbiAgICB9KTtcbiAgICBpZiAoZ2xSZW5kZXJUYXJnZXQubXNhYSkge1xuICAgICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICAgIGNvbnN0IGdsID0gcmVuZGVyZXIuZ2w7XG4gICAgICBjb25zdCB2aWV3RnJhbWVidWZmZXIgPSBnbFJlbmRlclRhcmdldC5mcmFtZWJ1ZmZlcjtcbiAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdmlld0ZyYW1lYnVmZmVyKTtcbiAgICAgIHJlbmRlclRhcmdldC5jb2xvclRleHR1cmVzLmZvckVhY2goKGNvbG9yVGV4dHVyZSwgaSkgPT4ge1xuICAgICAgICBjb25zdCBzb3VyY2UyID0gY29sb3JUZXh0dXJlLnNvdXJjZTtcbiAgICAgICAgcmVuZGVyZXIudGV4dHVyZS5iaW5kU291cmNlKHNvdXJjZTIsIDApO1xuICAgICAgICBjb25zdCBnbFNvdXJjZSA9IHJlbmRlcmVyLnRleHR1cmUuZ2V0R2xTb3VyY2Uoc291cmNlMik7XG4gICAgICAgIGNvbnN0IGdsSW50ZXJuYWxGb3JtYXQgPSBnbFNvdXJjZS5pbnRlcm5hbEZvcm1hdDtcbiAgICAgICAgY29uc3QgbXNhYVJlbmRlckJ1ZmZlciA9IGdsUmVuZGVyVGFyZ2V0Lm1zYWFSZW5kZXJCdWZmZXJbaV07XG4gICAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoXG4gICAgICAgICAgZ2wuUkVOREVSQlVGRkVSLFxuICAgICAgICAgIG1zYWFSZW5kZXJCdWZmZXJcbiAgICAgICAgKTtcbiAgICAgICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKFxuICAgICAgICAgIGdsLlJFTkRFUkJVRkZFUixcbiAgICAgICAgICA0LFxuICAgICAgICAgIGdsSW50ZXJuYWxGb3JtYXQsXG4gICAgICAgICAgc291cmNlMi5waXhlbFdpZHRoLFxuICAgICAgICAgIHNvdXJjZTIucGl4ZWxIZWlnaHRcbiAgICAgICAgKTtcbiAgICAgICAgZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoXG4gICAgICAgICAgZ2wuRlJBTUVCVUZGRVIsXG4gICAgICAgICAgZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpLFxuICAgICAgICAgIGdsLlJFTkRFUkJVRkZFUixcbiAgICAgICAgICBtc2FhUmVuZGVyQnVmZmVyXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgX2luaXRTdGVuY2lsKGdsUmVuZGVyVGFyZ2V0KSB7XG4gICAgaWYgKGdsUmVuZGVyVGFyZ2V0LmZyYW1lYnVmZmVyID09PSBudWxsKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGdsID0gdGhpcy5fcmVuZGVyZXIuZ2w7XG4gICAgY29uc3QgZGVwdGhTdGVuY2lsUmVuZGVyQnVmZmVyID0gZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG4gICAgZ2xSZW5kZXJUYXJnZXQuZGVwdGhTdGVuY2lsUmVuZGVyQnVmZmVyID0gZGVwdGhTdGVuY2lsUmVuZGVyQnVmZmVyO1xuICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoXG4gICAgICBnbC5SRU5ERVJCVUZGRVIsXG4gICAgICBkZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXJcbiAgICApO1xuICAgIGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKFxuICAgICAgZ2wuRlJBTUVCVUZGRVIsXG4gICAgICBnbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQsXG4gICAgICBnbC5SRU5ERVJCVUZGRVIsXG4gICAgICBkZXB0aFN0ZW5jaWxSZW5kZXJCdWZmZXJcbiAgICApO1xuICAgIHRoaXMuX3Jlc2l6ZVN0ZW5jaWwoZ2xSZW5kZXJUYXJnZXQpO1xuICB9XG4gIF9yZXNpemVTdGVuY2lsKGdsUmVuZGVyVGFyZ2V0KSB7XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9yZW5kZXJlci5nbDtcbiAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKFxuICAgICAgZ2wuUkVOREVSQlVGRkVSLFxuICAgICAgZ2xSZW5kZXJUYXJnZXQuZGVwdGhTdGVuY2lsUmVuZGVyQnVmZmVyXG4gICAgKTtcbiAgICBpZiAoZ2xSZW5kZXJUYXJnZXQubXNhYSkge1xuICAgICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKFxuICAgICAgICBnbC5SRU5ERVJCVUZGRVIsXG4gICAgICAgIDQsXG4gICAgICAgIGdsLkRFUFRIMjRfU1RFTkNJTDgsXG4gICAgICAgIGdsUmVuZGVyVGFyZ2V0LndpZHRoLFxuICAgICAgICBnbFJlbmRlclRhcmdldC5oZWlnaHRcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoXG4gICAgICAgIGdsLlJFTkRFUkJVRkZFUixcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIuY29udGV4dC53ZWJHTFZlcnNpb24gPT09IDIgPyBnbC5ERVBUSDI0X1NURU5DSUw4IDogZ2wuREVQVEhfU1RFTkNJTCxcbiAgICAgICAgZ2xSZW5kZXJUYXJnZXQud2lkdGgsXG4gICAgICAgIGdsUmVuZGVyVGFyZ2V0LmhlaWdodFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgR2xSZW5kZXJUYXJnZXRBZGFwdG9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbFJlbmRlclRhcmdldEFkYXB0b3IubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgUmVuZGVyVGFyZ2V0U3lzdGVtIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3JlbmRlclRhcmdldC9SZW5kZXJUYXJnZXRTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdsUmVuZGVyVGFyZ2V0QWRhcHRvciB9IGZyb20gJy4vR2xSZW5kZXJUYXJnZXRBZGFwdG9yLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR2xSZW5kZXJUYXJnZXRTeXN0ZW0gZXh0ZW5kcyBSZW5kZXJUYXJnZXRTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHN1cGVyKHJlbmRlcmVyKTtcbiAgICB0aGlzLmFkYXB0b3IgPSBuZXcgR2xSZW5kZXJUYXJnZXRBZGFwdG9yKCk7XG4gICAgdGhpcy5hZGFwdG9yLmluaXQocmVuZGVyZXIsIHRoaXMpO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR2xSZW5kZXJUYXJnZXRTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbV0sXG4gIG5hbWU6IFwicmVuZGVyVGFyZ2V0XCJcbn07XG5cbmV4cG9ydCB7IEdsUmVuZGVyVGFyZ2V0U3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbFJlbmRlclRhcmdldFN5c3RlbS5tanMubWFwXG4iLCJpbXBvcnQgeyBCdWZmZXJSZXNvdXJjZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9idWZmZXIvQnVmZmVyUmVzb3VyY2UubWpzJztcbmltcG9ydCB7IFVuaWZvcm1Hcm91cCB9IGZyb20gJy4uLy4uL3NoYXJlZC9zaGFkZXIvVW5pZm9ybUdyb3VwLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlU291cmNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3RleHR1cmUvc291cmNlcy9UZXh0dXJlU291cmNlLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZ2VuZXJhdGVTaGFkZXJTeW5jQ29kZShzaGFkZXIsIHNoYWRlclN5c3RlbSkge1xuICBjb25zdCBmdW5jRnJhZ21lbnRzID0gW107XG4gIGNvbnN0IGhlYWRlckZyYWdtZW50cyA9IFtgXG4gICAgICAgIHZhciBnID0gcy5ncm91cHM7XG4gICAgICAgIHZhciBzUyA9IHIuc2hhZGVyO1xuICAgICAgICB2YXIgcCA9IHMuZ2xQcm9ncmFtO1xuICAgICAgICB2YXIgdWdTID0gci51bmlmb3JtR3JvdXA7XG4gICAgICAgIHZhciByZXNvdXJjZXM7XG4gICAgYF07XG4gIGxldCBhZGRlZFRleHRyZVN5c3RlbSA9IGZhbHNlO1xuICBsZXQgYmxvY2tJbmRleCA9IDA7XG4gIGxldCB0ZXh0dXJlQ291bnQgPSAwO1xuICBjb25zdCBwcm9ncmFtRGF0YSA9IHNoYWRlclN5c3RlbS5fZ2V0UHJvZ3JhbURhdGEoc2hhZGVyLmdsUHJvZ3JhbSk7XG4gIGZvciAoY29uc3QgaSBpbiBzaGFkZXIuZ3JvdXBzKSB7XG4gICAgY29uc3QgZ3JvdXAgPSBzaGFkZXIuZ3JvdXBzW2ldO1xuICAgIGZ1bmNGcmFnbWVudHMucHVzaChgXG4gICAgICAgICAgICByZXNvdXJjZXMgPSBnWyR7aX1dLnJlc291cmNlcztcbiAgICAgICAgYCk7XG4gICAgZm9yIChjb25zdCBqIGluIGdyb3VwLnJlc291cmNlcykge1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSBncm91cC5yZXNvdXJjZXNbal07XG4gICAgICBpZiAocmVzb3VyY2UgaW5zdGFuY2VvZiBVbmlmb3JtR3JvdXApIHtcbiAgICAgICAgaWYgKHJlc291cmNlLnVibykge1xuICAgICAgICAgIGZ1bmNGcmFnbWVudHMucHVzaChgXG4gICAgICAgICAgICAgICAgICAgICAgICBzUy5iaW5kVW5pZm9ybUJsb2NrKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlc1ske2p9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzUy5fdW5pZm9ybUJpbmRNYXBbJHtpfVske2p9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAke2Jsb2NrSW5kZXgrK31cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZ1bmNGcmFnbWVudHMucHVzaChgXG4gICAgICAgICAgICAgICAgICAgICAgICB1Z1MudXBkYXRlVW5pZm9ybUdyb3VwKHJlc291cmNlc1ske2p9XSwgcCwgc0QpO1xuICAgICAgICAgICAgICAgICAgICBgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZXNvdXJjZSBpbnN0YW5jZW9mIEJ1ZmZlclJlc291cmNlKSB7XG4gICAgICAgIGZ1bmNGcmFnbWVudHMucHVzaChgXG4gICAgICAgICAgICAgICAgICAgIHNTLmJpbmRVbmlmb3JtQmxvY2soXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXNbJHtqfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzUy5fdW5pZm9ybUJpbmRNYXBbJHtpfVske2p9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICR7YmxvY2tJbmRleCsrfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGApO1xuICAgICAgfSBlbHNlIGlmIChyZXNvdXJjZSBpbnN0YW5jZW9mIFRleHR1cmVTb3VyY2UpIHtcbiAgICAgICAgY29uc3QgdW5pZm9ybU5hbWUgPSBzaGFkZXIuX3VuaWZvcm1CaW5kTWFwW2ldW2pdO1xuICAgICAgICBjb25zdCB1bmlmb3JtRGF0YSA9IHByb2dyYW1EYXRhLnVuaWZvcm1EYXRhW3VuaWZvcm1OYW1lXTtcbiAgICAgICAgaWYgKHVuaWZvcm1EYXRhKSB7XG4gICAgICAgICAgaWYgKCFhZGRlZFRleHRyZVN5c3RlbSkge1xuICAgICAgICAgICAgYWRkZWRUZXh0cmVTeXN0ZW0gPSB0cnVlO1xuICAgICAgICAgICAgaGVhZGVyRnJhZ21lbnRzLnB1c2goYFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRTID0gci50ZXh0dXJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNoYWRlclN5c3RlbS5fZ2wudW5pZm9ybTFpKHVuaWZvcm1EYXRhLmxvY2F0aW9uLCB0ZXh0dXJlQ291bnQpO1xuICAgICAgICAgIGZ1bmNGcmFnbWVudHMucHVzaChgXG4gICAgICAgICAgICAgICAgICAgICAgICB0Uy5iaW5kKHJlc291cmNlc1ske2p9XSwgJHt0ZXh0dXJlQ291bnR9KTtcbiAgICAgICAgICAgICAgICAgICAgYCk7XG4gICAgICAgICAgdGV4dHVyZUNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3QgZnVuY3Rpb25Tb3VyY2UgPSBbLi4uaGVhZGVyRnJhZ21lbnRzLCAuLi5mdW5jRnJhZ21lbnRzXS5qb2luKFwiXFxuXCIpO1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiclwiLCBcInNcIiwgXCJzRFwiLCBmdW5jdGlvblNvdXJjZSk7XG59XG5cbmV4cG9ydCB7IGdlbmVyYXRlU2hhZGVyU3luY0NvZGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdlbmVyYXRlU2hhZGVyU3luY0NvZGUubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBJR0xVbmlmb3JtRGF0YSB7XG59XG5jbGFzcyBHbFByb2dyYW1EYXRhIHtcbiAgLyoqXG4gICAqIE1ha2VzIGEgbmV3IFBpeGkgcHJvZ3JhbS5cbiAgICogQHBhcmFtIHByb2dyYW0gLSB3ZWJnbCBwcm9ncmFtXG4gICAqIEBwYXJhbSB1bmlmb3JtRGF0YSAtIHVuaWZvcm1zXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9ncmFtLCB1bmlmb3JtRGF0YSkge1xuICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XG4gICAgdGhpcy51bmlmb3JtRGF0YSA9IHVuaWZvcm1EYXRhO1xuICAgIHRoaXMudW5pZm9ybUdyb3VwcyA9IHt9O1xuICAgIHRoaXMudW5pZm9ybURpcnR5R3JvdXBzID0ge307XG4gICAgdGhpcy51bmlmb3JtQmxvY2tCaW5kaW5ncyA9IHt9O1xuICB9XG4gIC8qKiBEZXN0cm95cyB0aGlzIHByb2dyYW0uICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy51bmlmb3JtRGF0YSA9IG51bGw7XG4gICAgdGhpcy51bmlmb3JtR3JvdXBzID0gbnVsbDtcbiAgICB0aGlzLnVuaWZvcm1EaXJ0eUdyb3VwcyA9IG51bGw7XG4gICAgdGhpcy51bmlmb3JtQmxvY2tCaW5kaW5ncyA9IG51bGw7XG4gICAgdGhpcy5wcm9ncmFtID0gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgeyBHbFByb2dyYW1EYXRhLCBJR0xVbmlmb3JtRGF0YSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xQcm9ncmFtRGF0YS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGNvbXBpbGVTaGFkZXIoZ2wsIHR5cGUsIHNyYykge1xuICBjb25zdCBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIodHlwZSk7XG4gIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNyYyk7XG4gIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcbiAgcmV0dXJuIHNoYWRlcjtcbn1cblxuZXhwb3J0IHsgY29tcGlsZVNoYWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGlsZVNoYWRlci5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGJvb2xlYW5BcnJheShzaXplKSB7XG4gIGNvbnN0IGFycmF5ID0gbmV3IEFycmF5KHNpemUpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgYXJyYXlbaV0gPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiBkZWZhdWx0VmFsdWUodHlwZSwgc2l6ZSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwiZmxvYXRcIjpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgXCJ2ZWMyXCI6XG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSgyICogc2l6ZSk7XG4gICAgY2FzZSBcInZlYzNcIjpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDMgKiBzaXplKTtcbiAgICBjYXNlIFwidmVjNFwiOlxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoNCAqIHNpemUpO1xuICAgIGNhc2UgXCJpbnRcIjpcbiAgICBjYXNlIFwidWludFwiOlxuICAgIGNhc2UgXCJzYW1wbGVyMkRcIjpcbiAgICBjYXNlIFwic2FtcGxlcjJEQXJyYXlcIjpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgXCJpdmVjMlwiOlxuICAgICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KDIgKiBzaXplKTtcbiAgICBjYXNlIFwiaXZlYzNcIjpcbiAgICAgIHJldHVybiBuZXcgSW50MzJBcnJheSgzICogc2l6ZSk7XG4gICAgY2FzZSBcIml2ZWM0XCI6XG4gICAgICByZXR1cm4gbmV3IEludDMyQXJyYXkoNCAqIHNpemUpO1xuICAgIGNhc2UgXCJ1dmVjMlwiOlxuICAgICAgcmV0dXJuIG5ldyBVaW50MzJBcnJheSgyICogc2l6ZSk7XG4gICAgY2FzZSBcInV2ZWMzXCI6XG4gICAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KDMgKiBzaXplKTtcbiAgICBjYXNlIFwidXZlYzRcIjpcbiAgICAgIHJldHVybiBuZXcgVWludDMyQXJyYXkoNCAqIHNpemUpO1xuICAgIGNhc2UgXCJib29sXCI6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcImJ2ZWMyXCI6XG4gICAgICByZXR1cm4gYm9vbGVhbkFycmF5KDIgKiBzaXplKTtcbiAgICBjYXNlIFwiYnZlYzNcIjpcbiAgICAgIHJldHVybiBib29sZWFuQXJyYXkoMyAqIHNpemUpO1xuICAgIGNhc2UgXCJidmVjNFwiOlxuICAgICAgcmV0dXJuIGJvb2xlYW5BcnJheSg0ICogc2l6ZSk7XG4gICAgY2FzZSBcIm1hdDJcIjpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMVxuICAgICAgXSk7XG4gICAgY2FzZSBcIm1hdDNcIjpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMVxuICAgICAgXSk7XG4gICAgY2FzZSBcIm1hdDRcIjpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMVxuICAgICAgXSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCB7IGRlZmF1bHRWYWx1ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdFZhbHVlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xubGV0IEdMX1RBQkxFID0gbnVsbDtcbmNvbnN0IEdMX1RPX0dMU0xfVFlQRVMgPSB7XG4gIEZMT0FUOiBcImZsb2F0XCIsXG4gIEZMT0FUX1ZFQzI6IFwidmVjMlwiLFxuICBGTE9BVF9WRUMzOiBcInZlYzNcIixcbiAgRkxPQVRfVkVDNDogXCJ2ZWM0XCIsXG4gIElOVDogXCJpbnRcIixcbiAgSU5UX1ZFQzI6IFwiaXZlYzJcIixcbiAgSU5UX1ZFQzM6IFwiaXZlYzNcIixcbiAgSU5UX1ZFQzQ6IFwiaXZlYzRcIixcbiAgVU5TSUdORURfSU5UOiBcInVpbnRcIixcbiAgVU5TSUdORURfSU5UX1ZFQzI6IFwidXZlYzJcIixcbiAgVU5TSUdORURfSU5UX1ZFQzM6IFwidXZlYzNcIixcbiAgVU5TSUdORURfSU5UX1ZFQzQ6IFwidXZlYzRcIixcbiAgQk9PTDogXCJib29sXCIsXG4gIEJPT0xfVkVDMjogXCJidmVjMlwiLFxuICBCT09MX1ZFQzM6IFwiYnZlYzNcIixcbiAgQk9PTF9WRUM0OiBcImJ2ZWM0XCIsXG4gIEZMT0FUX01BVDI6IFwibWF0MlwiLFxuICBGTE9BVF9NQVQzOiBcIm1hdDNcIixcbiAgRkxPQVRfTUFUNDogXCJtYXQ0XCIsXG4gIFNBTVBMRVJfMkQ6IFwic2FtcGxlcjJEXCIsXG4gIElOVF9TQU1QTEVSXzJEOiBcInNhbXBsZXIyRFwiLFxuICBVTlNJR05FRF9JTlRfU0FNUExFUl8yRDogXCJzYW1wbGVyMkRcIixcbiAgU0FNUExFUl9DVUJFOiBcInNhbXBsZXJDdWJlXCIsXG4gIElOVF9TQU1QTEVSX0NVQkU6IFwic2FtcGxlckN1YmVcIixcbiAgVU5TSUdORURfSU5UX1NBTVBMRVJfQ1VCRTogXCJzYW1wbGVyQ3ViZVwiLFxuICBTQU1QTEVSXzJEX0FSUkFZOiBcInNhbXBsZXIyREFycmF5XCIsXG4gIElOVF9TQU1QTEVSXzJEX0FSUkFZOiBcInNhbXBsZXIyREFycmF5XCIsXG4gIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEX0FSUkFZOiBcInNhbXBsZXIyREFycmF5XCJcbn07XG5jb25zdCBHTFNMX1RPX1ZFUlRFWF9UWVBFUyA9IHtcbiAgZmxvYXQ6IFwiZmxvYXQzMlwiLFxuICB2ZWMyOiBcImZsb2F0MzJ4MlwiLFxuICB2ZWMzOiBcImZsb2F0MzJ4M1wiLFxuICB2ZWM0OiBcImZsb2F0MzJ4NFwiLFxuICBpbnQ6IFwic2ludDMyXCIsXG4gIGl2ZWMyOiBcInNpbnQzMngyXCIsXG4gIGl2ZWMzOiBcInNpbnQzMngzXCIsXG4gIGl2ZWM0OiBcInNpbnQzMng0XCIsXG4gIHVpbnQ6IFwidWludDMyXCIsXG4gIHV2ZWMyOiBcInVpbnQzMngyXCIsXG4gIHV2ZWMzOiBcInVpbnQzMngzXCIsXG4gIHV2ZWM0OiBcInVpbnQzMng0XCIsXG4gIGJvb2w6IFwidWludDMyXCIsXG4gIGJ2ZWMyOiBcInVpbnQzMngyXCIsXG4gIGJ2ZWMzOiBcInVpbnQzMngzXCIsXG4gIGJ2ZWM0OiBcInVpbnQzMng0XCJcbn07XG5mdW5jdGlvbiBtYXBUeXBlKGdsLCB0eXBlKSB7XG4gIGlmICghR0xfVEFCTEUpIHtcbiAgICBjb25zdCB0eXBlTmFtZXMgPSBPYmplY3Qua2V5cyhHTF9UT19HTFNMX1RZUEVTKTtcbiAgICBHTF9UQUJMRSA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHlwZU5hbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCB0biA9IHR5cGVOYW1lc1tpXTtcbiAgICAgIEdMX1RBQkxFW2dsW3RuXV0gPSBHTF9UT19HTFNMX1RZUEVTW3RuXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIEdMX1RBQkxFW3R5cGVdO1xufVxuZnVuY3Rpb24gbWFwR2xUb1ZlcnRleEZvcm1hdChnbCwgdHlwZSkge1xuICBjb25zdCB0eXBlVmFsdWUgPSBtYXBUeXBlKGdsLCB0eXBlKTtcbiAgcmV0dXJuIEdMU0xfVE9fVkVSVEVYX1RZUEVTW3R5cGVWYWx1ZV0gfHwgXCJmbG9hdDMyXCI7XG59XG5cbmV4cG9ydCB7IG1hcEdsVG9WZXJ0ZXhGb3JtYXQsIG1hcFR5cGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcFR5cGUubWpzLm1hcFxuIiwiaW1wb3J0IHsgZ2V0QXR0cmlidXRlSW5mb0Zyb21Gb3JtYXQgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvZ2VvbWV0cnkvdXRpbHMvZ2V0QXR0cmlidXRlSW5mb0Zyb21Gb3JtYXQubWpzJztcbmltcG9ydCB7IG1hcEdsVG9WZXJ0ZXhGb3JtYXQgfSBmcm9tICcuL21hcFR5cGUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBleHRyYWN0QXR0cmlidXRlc0Zyb21HbFByb2dyYW0ocHJvZ3JhbSwgZ2wsIHNvcnRBdHRyaWJ1dGVzID0gZmFsc2UpIHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IHt9O1xuICBjb25zdCB0b3RhbEF0dHJpYnV0ZXMgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkFDVElWRV9BVFRSSUJVVEVTKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3RhbEF0dHJpYnV0ZXM7IGkrKykge1xuICAgIGNvbnN0IGF0dHJpYkRhdGEgPSBnbC5nZXRBY3RpdmVBdHRyaWIocHJvZ3JhbSwgaSk7XG4gICAgaWYgKGF0dHJpYkRhdGEubmFtZS5zdGFydHNXaXRoKFwiZ2xfXCIpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgZm9ybWF0ID0gbWFwR2xUb1ZlcnRleEZvcm1hdChnbCwgYXR0cmliRGF0YS50eXBlKTtcbiAgICBhdHRyaWJ1dGVzW2F0dHJpYkRhdGEubmFtZV0gPSB7XG4gICAgICBsb2NhdGlvbjogMCxcbiAgICAgIC8vIHNldCBmdXJ0aGVyIGRvd24uLlxuICAgICAgZm9ybWF0LFxuICAgICAgc3RyaWRlOiBnZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdChmb3JtYXQpLnN0cmlkZSxcbiAgICAgIG9mZnNldDogMCxcbiAgICAgIGluc3RhbmNlOiBmYWxzZSxcbiAgICAgIHN0YXJ0OiAwXG4gICAgfTtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlcyk7XG4gIGlmIChzb3J0QXR0cmlidXRlcykge1xuICAgIGtleXMuc29ydCgoYSwgYikgPT4gYSA+IGIgPyAxIDogLTEpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgYXR0cmlidXRlc1trZXlzW2ldXS5sb2NhdGlvbiA9IGk7XG4gICAgICBnbC5iaW5kQXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgaSwga2V5c1tpXSk7XG4gICAgfVxuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgYXR0cmlidXRlc1trZXlzW2ldXS5sb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIGtleXNbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXR0cmlidXRlcztcbn1cblxuZXhwb3J0IHsgZXh0cmFjdEF0dHJpYnV0ZXNGcm9tR2xQcm9ncmFtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0QXR0cmlidXRlc0Zyb21HbFByb2dyYW0ubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBnZXRVYm9EYXRhKHByb2dyYW0sIGdsKSB7XG4gIGlmICghZ2wuQUNUSVZFX1VOSUZPUk1fQkxPQ0tTKVxuICAgIHJldHVybiB7fTtcbiAgY29uc3QgdW5pZm9ybUJsb2NrcyA9IHt9O1xuICBjb25zdCB0b3RhbFVuaWZvcm1zQmxvY2tzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STV9CTE9DS1MpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsVW5pZm9ybXNCbG9ja3M7IGkrKykge1xuICAgIGNvbnN0IG5hbWUgPSBnbC5nZXRBY3RpdmVVbmlmb3JtQmxvY2tOYW1lKHByb2dyYW0sIGkpO1xuICAgIGNvbnN0IHVuaWZvcm1CbG9ja0luZGV4ID0gZ2wuZ2V0VW5pZm9ybUJsb2NrSW5kZXgocHJvZ3JhbSwgbmFtZSk7XG4gICAgY29uc3Qgc2l6ZSA9IGdsLmdldEFjdGl2ZVVuaWZvcm1CbG9ja1BhcmFtZXRlcihwcm9ncmFtLCBpLCBnbC5VTklGT1JNX0JMT0NLX0RBVEFfU0laRSk7XG4gICAgdW5pZm9ybUJsb2Nrc1tuYW1lXSA9IHtcbiAgICAgIG5hbWUsXG4gICAgICBpbmRleDogdW5pZm9ybUJsb2NrSW5kZXgsXG4gICAgICBzaXplXG4gICAgfTtcbiAgfVxuICByZXR1cm4gdW5pZm9ybUJsb2Nrcztcbn1cblxuZXhwb3J0IHsgZ2V0VWJvRGF0YSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VWJvRGF0YS5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZhdWx0VmFsdWUgfSBmcm9tICcuL2RlZmF1bHRWYWx1ZS5tanMnO1xuaW1wb3J0IHsgbWFwVHlwZSB9IGZyb20gJy4vbWFwVHlwZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGdldFVuaWZvcm1EYXRhKHByb2dyYW0sIGdsKSB7XG4gIGNvbnN0IHVuaWZvcm1zID0ge307XG4gIGNvbnN0IHRvdGFsVW5pZm9ybXMgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkFDVElWRV9VTklGT1JNUyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWxVbmlmb3JtczsgaSsrKSB7XG4gICAgY29uc3QgdW5pZm9ybURhdGEgPSBnbC5nZXRBY3RpdmVVbmlmb3JtKHByb2dyYW0sIGkpO1xuICAgIGNvbnN0IG5hbWUgPSB1bmlmb3JtRGF0YS5uYW1lLnJlcGxhY2UoL1xcWy4qP1xcXSQvLCBcIlwiKTtcbiAgICBjb25zdCBpc0FycmF5ID0gISF1bmlmb3JtRGF0YS5uYW1lLm1hdGNoKC9cXFsuKj9cXF0kLyk7XG4gICAgY29uc3QgdHlwZSA9IG1hcFR5cGUoZ2wsIHVuaWZvcm1EYXRhLnR5cGUpO1xuICAgIHVuaWZvcm1zW25hbWVdID0ge1xuICAgICAgbmFtZSxcbiAgICAgIGluZGV4OiBpLFxuICAgICAgdHlwZSxcbiAgICAgIHNpemU6IHVuaWZvcm1EYXRhLnNpemUsXG4gICAgICBpc0FycmF5LFxuICAgICAgdmFsdWU6IGRlZmF1bHRWYWx1ZSh0eXBlLCB1bmlmb3JtRGF0YS5zaXplKVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHVuaWZvcm1zO1xufVxuXG5leHBvcnQgeyBnZXRVbmlmb3JtRGF0YSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VW5pZm9ybURhdGEubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBsb2dQcmV0dHlTaGFkZXJFcnJvcihnbCwgc2hhZGVyKSB7XG4gIGNvbnN0IHNoYWRlclNyYyA9IGdsLmdldFNoYWRlclNvdXJjZShzaGFkZXIpLnNwbGl0KFwiXFxuXCIpLm1hcCgobGluZSwgaW5kZXgpID0+IGAke2luZGV4fTogJHtsaW5lfWApO1xuICBjb25zdCBzaGFkZXJMb2cgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcik7XG4gIGNvbnN0IHNwbGl0U2hhZGVyID0gc2hhZGVyTG9nLnNwbGl0KFwiXFxuXCIpO1xuICBjb25zdCBkZWR1cGUgPSB7fTtcbiAgY29uc3QgbGluZU51bWJlcnMgPSBzcGxpdFNoYWRlci5tYXAoKGxpbmUpID0+IHBhcnNlRmxvYXQobGluZS5yZXBsYWNlKC9eRVJST1JcXDogMFxcOihbXFxkXSspXFw6LiokLywgXCIkMVwiKSkpLmZpbHRlcigobikgPT4ge1xuICAgIGlmIChuICYmICFkZWR1cGVbbl0pIHtcbiAgICAgIGRlZHVwZVtuXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbiAgY29uc3QgbG9nQXJncyA9IFtcIlwiXTtcbiAgbGluZU51bWJlcnMuZm9yRWFjaCgobnVtYmVyKSA9PiB7XG4gICAgc2hhZGVyU3JjW251bWJlciAtIDFdID0gYCVjJHtzaGFkZXJTcmNbbnVtYmVyIC0gMV19JWNgO1xuICAgIGxvZ0FyZ3MucHVzaChcImJhY2tncm91bmQ6ICNGRjAwMDA7IGNvbG9yOiNGRkZGRkY7IGZvbnQtc2l6ZTogMTBweFwiLCBcImZvbnQtc2l6ZTogMTBweFwiKTtcbiAgfSk7XG4gIGNvbnN0IGZyYWdtZW50U291cmNlVG9Mb2cgPSBzaGFkZXJTcmMuam9pbihcIlxcblwiKTtcbiAgbG9nQXJnc1swXSA9IGZyYWdtZW50U291cmNlVG9Mb2c7XG4gIGNvbnNvbGUuZXJyb3Ioc2hhZGVyTG9nKTtcbiAgY29uc29sZS5ncm91cENvbGxhcHNlZChcImNsaWNrIHRvIHZpZXcgZnVsbCBzaGFkZXIgY29kZVwiKTtcbiAgY29uc29sZS53YXJuKC4uLmxvZ0FyZ3MpO1xuICBjb25zb2xlLmdyb3VwRW5kKCk7XG59XG5mdW5jdGlvbiBsb2dQcm9ncmFtRXJyb3IoZ2wsIHByb2dyYW0sIHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIpIHtcbiAgaWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xuICAgIGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHZlcnRleFNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICBsb2dQcmV0dHlTaGFkZXJFcnJvcihnbCwgdmVydGV4U2hhZGVyKTtcbiAgICB9XG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoZnJhZ21lbnRTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuICAgICAgbG9nUHJldHR5U2hhZGVyRXJyb3IoZ2wsIGZyYWdtZW50U2hhZGVyKTtcbiAgICB9XG4gICAgY29uc29sZS5lcnJvcihcIlBpeGlKUyBFcnJvcjogQ291bGQgbm90IGluaXRpYWxpemUgc2hhZGVyLlwiKTtcbiAgICBpZiAoZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSkgIT09IFwiXCIpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlBpeGlKUyBXYXJuaW5nOiBnbC5nZXRQcm9ncmFtSW5mb0xvZygpXCIsIGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgbG9nUHJvZ3JhbUVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dQcm9ncmFtRXJyb3IubWpzLm1hcFxuIiwiaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxzL2xvZ2dpbmcvd2Fybi5tanMnO1xuaW1wb3J0IHsgR2xQcm9ncmFtRGF0YSB9IGZyb20gJy4uL0dsUHJvZ3JhbURhdGEubWpzJztcbmltcG9ydCB7IGNvbXBpbGVTaGFkZXIgfSBmcm9tICcuL2NvbXBpbGVTaGFkZXIubWpzJztcbmltcG9ydCB7IGRlZmF1bHRWYWx1ZSB9IGZyb20gJy4vZGVmYXVsdFZhbHVlLm1qcyc7XG5pbXBvcnQgeyBleHRyYWN0QXR0cmlidXRlc0Zyb21HbFByb2dyYW0gfSBmcm9tICcuL2V4dHJhY3RBdHRyaWJ1dGVzRnJvbUdsUHJvZ3JhbS5tanMnO1xuaW1wb3J0IHsgZ2V0VWJvRGF0YSB9IGZyb20gJy4vZ2V0VWJvRGF0YS5tanMnO1xuaW1wb3J0IHsgZ2V0VW5pZm9ybURhdGEgfSBmcm9tICcuL2dldFVuaWZvcm1EYXRhLm1qcyc7XG5pbXBvcnQgeyBsb2dQcm9ncmFtRXJyb3IgfSBmcm9tICcuL2xvZ1Byb2dyYW1FcnJvci5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGdlbmVyYXRlUHJvZ3JhbShnbCwgcHJvZ3JhbSkge1xuICBjb25zdCBnbFZlcnRTaGFkZXIgPSBjb21waWxlU2hhZGVyKGdsLCBnbC5WRVJURVhfU0hBREVSLCBwcm9ncmFtLnZlcnRleCk7XG4gIGNvbnN0IGdsRnJhZ1NoYWRlciA9IGNvbXBpbGVTaGFkZXIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgcHJvZ3JhbS5mcmFnbWVudCk7XG4gIGNvbnN0IHdlYkdMUHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgZ2wuYXR0YWNoU2hhZGVyKHdlYkdMUHJvZ3JhbSwgZ2xWZXJ0U2hhZGVyKTtcbiAgZ2wuYXR0YWNoU2hhZGVyKHdlYkdMUHJvZ3JhbSwgZ2xGcmFnU2hhZGVyKTtcbiAgY29uc3QgdHJhbnNmb3JtRmVlZGJhY2tWYXJ5aW5ncyA9IHByb2dyYW0udHJhbnNmb3JtRmVlZGJhY2tWYXJ5aW5ncztcbiAgaWYgKHRyYW5zZm9ybUZlZWRiYWNrVmFyeWluZ3MpIHtcbiAgICBpZiAodHlwZW9mIGdsLnRyYW5zZm9ybUZlZWRiYWNrVmFyeWluZ3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgd2FybihgVHJhbnNmb3JtRmVlZGJhY2sgaXMgbm90IHN1cHBvcnRlZCBidXQgVHJhbnNmb3JtRmVlZGJhY2tWYXJ5aW5ncyBhcmUgZ2l2ZW4uYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLnRyYW5zZm9ybUZlZWRiYWNrVmFyeWluZ3MoXG4gICAgICAgIHdlYkdMUHJvZ3JhbSxcbiAgICAgICAgdHJhbnNmb3JtRmVlZGJhY2tWYXJ5aW5ncy5uYW1lcyxcbiAgICAgICAgdHJhbnNmb3JtRmVlZGJhY2tWYXJ5aW5ncy5idWZmZXJNb2RlID09PSBcInNlcGFyYXRlXCIgPyBnbC5TRVBBUkFURV9BVFRSSUJTIDogZ2wuSU5URVJMRUFWRURfQVRUUklCU1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgZ2wubGlua1Byb2dyYW0od2ViR0xQcm9ncmFtKTtcbiAgaWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHdlYkdMUHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpKSB7XG4gICAgbG9nUHJvZ3JhbUVycm9yKGdsLCB3ZWJHTFByb2dyYW0sIGdsVmVydFNoYWRlciwgZ2xGcmFnU2hhZGVyKTtcbiAgfVxuICBwcm9ncmFtLl9hdHRyaWJ1dGVEYXRhID0gZXh0cmFjdEF0dHJpYnV0ZXNGcm9tR2xQcm9ncmFtKFxuICAgIHdlYkdMUHJvZ3JhbSxcbiAgICBnbCxcbiAgICAhL15bIFxcdF0qI1sgXFx0XSp2ZXJzaW9uWyBcXHRdKzMwMFsgXFx0XStlc1sgXFx0XSokL20udGVzdChwcm9ncmFtLnZlcnRleClcbiAgKTtcbiAgcHJvZ3JhbS5fdW5pZm9ybURhdGEgPSBnZXRVbmlmb3JtRGF0YSh3ZWJHTFByb2dyYW0sIGdsKTtcbiAgcHJvZ3JhbS5fdW5pZm9ybUJsb2NrRGF0YSA9IGdldFVib0RhdGEod2ViR0xQcm9ncmFtLCBnbCk7XG4gIGdsLmRlbGV0ZVNoYWRlcihnbFZlcnRTaGFkZXIpO1xuICBnbC5kZWxldGVTaGFkZXIoZ2xGcmFnU2hhZGVyKTtcbiAgY29uc3QgdW5pZm9ybURhdGEgPSB7fTtcbiAgZm9yIChjb25zdCBpIGluIHByb2dyYW0uX3VuaWZvcm1EYXRhKSB7XG4gICAgY29uc3QgZGF0YSA9IHByb2dyYW0uX3VuaWZvcm1EYXRhW2ldO1xuICAgIHVuaWZvcm1EYXRhW2ldID0ge1xuICAgICAgbG9jYXRpb246IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih3ZWJHTFByb2dyYW0sIGkpLFxuICAgICAgdmFsdWU6IGRlZmF1bHRWYWx1ZShkYXRhLnR5cGUsIGRhdGEuc2l6ZSlcbiAgICB9O1xuICB9XG4gIGNvbnN0IGdsUHJvZ3JhbSA9IG5ldyBHbFByb2dyYW1EYXRhKHdlYkdMUHJvZ3JhbSwgdW5pZm9ybURhdGEpO1xuICByZXR1cm4gZ2xQcm9ncmFtO1xufVxuXG5leHBvcnQgeyBnZW5lcmF0ZVByb2dyYW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRlUHJvZ3JhbS5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVNoYWRlclN5bmNDb2RlIH0gZnJvbSAnLi9HZW5lcmF0ZVNoYWRlclN5bmNDb2RlLm1qcyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVByb2dyYW0gfSBmcm9tICcuL3Byb2dyYW0vZ2VuZXJhdGVQcm9ncmFtLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY29uc3QgZGVmYXVsdFN5bmNEYXRhID0ge1xuICB0ZXh0dXJlQ291bnQ6IDAsXG4gIGJsb2NrSW5kZXg6IDBcbn07XG5jbGFzcyBHbFNoYWRlclN5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9hY3RpdmVQcm9ncmFtID0gbnVsbDtcbiAgICB0aGlzLl9wcm9ncmFtRGF0YUhhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9uZXh0SW5kZXggPSAwO1xuICAgIHRoaXMuX2JvdW5kVW5pZm9ybXNJZHNUb0luZGV4SGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2JvdW5kSW5kZXhUb1VuaWZvcm1zSGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX3NoYWRlclN5bmNGdW5jdGlvbnMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG4gIGNvbnRleHRDaGFuZ2UoZ2wpIHtcbiAgICB0aGlzLl9nbCA9IGdsO1xuICAgIHRoaXMuX21heEJpbmRpbmdzID0gZ2wuTUFYX1VOSUZPUk1fQlVGRkVSX0JJTkRJTkdTID8gZ2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9VTklGT1JNX0JVRkZFUl9CSU5ESU5HUykgOiAwO1xuICAgIHRoaXMuX3Byb2dyYW1EYXRhSGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2JvdW5kVW5pZm9ybXNJZHNUb0luZGV4SGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2JvdW5kSW5kZXhUb1VuaWZvcm1zSGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2FjdGl2ZVByb2dyYW0gPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDaGFuZ2VzIHRoZSBjdXJyZW50IHNoYWRlciB0byB0aGUgb25lIGdpdmVuIGluIHBhcmFtZXRlci5cbiAgICogQHBhcmFtIHNoYWRlciAtIHRoZSBuZXcgc2hhZGVyXG4gICAqIEBwYXJhbSBza2lwU3luYyAtIGZhbHNlIGlmIHRoZSBzaGFkZXIgc2hvdWxkIGF1dG9tYXRpY2FsbHkgc3luYyBpdHMgdW5pZm9ybXMuXG4gICAqIEByZXR1cm5zIHRoZSBnbFByb2dyYW0gdGhhdCBiZWxvbmdzIHRvIHRoZSBzaGFkZXIuXG4gICAqL1xuICBiaW5kKHNoYWRlciwgc2tpcFN5bmMpIHtcbiAgICB0aGlzLl9zZXRQcm9ncmFtKHNoYWRlci5nbFByb2dyYW0pO1xuICAgIGlmIChza2lwU3luYylcbiAgICAgIHJldHVybjtcbiAgICBkZWZhdWx0U3luY0RhdGEudGV4dHVyZUNvdW50ID0gMDtcbiAgICBkZWZhdWx0U3luY0RhdGEuYmxvY2tJbmRleCA9IDA7XG4gICAgbGV0IHN5bmNGdW5jdGlvbiA9IHRoaXMuX3NoYWRlclN5bmNGdW5jdGlvbnNbc2hhZGVyLmdsUHJvZ3JhbS5fa2V5XTtcbiAgICBpZiAoIXN5bmNGdW5jdGlvbikge1xuICAgICAgc3luY0Z1bmN0aW9uID0gdGhpcy5fc2hhZGVyU3luY0Z1bmN0aW9uc1tzaGFkZXIuZ2xQcm9ncmFtLl9rZXldID0gdGhpcy5fZ2VuZXJhdGVTaGFkZXJTeW5jKHNoYWRlciwgdGhpcyk7XG4gICAgfVxuICAgIHN5bmNGdW5jdGlvbih0aGlzLl9yZW5kZXJlciwgc2hhZGVyLCBkZWZhdWx0U3luY0RhdGEpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSB1bmlmb3JtIGdyb3VwLlxuICAgKiBAcGFyYW0gdW5pZm9ybUdyb3VwIC0gdGhlIHVuaWZvcm0gZ3JvdXAgdG8gdXBkYXRlXG4gICAqL1xuICB1cGRhdGVVbmlmb3JtR3JvdXAodW5pZm9ybUdyb3VwKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIudW5pZm9ybUdyb3VwLnVwZGF0ZVVuaWZvcm1Hcm91cCh1bmlmb3JtR3JvdXAsIHRoaXMuX2FjdGl2ZVByb2dyYW0sIGRlZmF1bHRTeW5jRGF0YSk7XG4gIH1cbiAgLyoqXG4gICAqIEJpbmRzIGEgdW5pZm9ybSBibG9jayB0byB0aGUgc2hhZGVyLlxuICAgKiBAcGFyYW0gdW5pZm9ybUdyb3VwIC0gdGhlIHVuaWZvcm0gZ3JvdXAgdG8gYmluZFxuICAgKiBAcGFyYW0gbmFtZSAtIHRoZSBuYW1lIG9mIHRoZSB1bmlmb3JtIGJsb2NrXG4gICAqIEBwYXJhbSBpbmRleCAtIHRoZSBpbmRleCBvZiB0aGUgdW5pZm9ybSBibG9ja1xuICAgKi9cbiAgYmluZFVuaWZvcm1CbG9jayh1bmlmb3JtR3JvdXAsIG5hbWUsIGluZGV4ID0gMCkge1xuICAgIGNvbnN0IGJ1ZmZlclN5c3RlbSA9IHRoaXMuX3JlbmRlcmVyLmJ1ZmZlcjtcbiAgICBjb25zdCBwcm9ncmFtRGF0YSA9IHRoaXMuX2dldFByb2dyYW1EYXRhKHRoaXMuX2FjdGl2ZVByb2dyYW0pO1xuICAgIGNvbnN0IGlzQnVmZmVyUmVzb3VyY2UgPSB1bmlmb3JtR3JvdXAuX2J1ZmZlclJlc291cmNlO1xuICAgIGlmIChpc0J1ZmZlclJlc291cmNlKSB7XG4gICAgICB0aGlzLl9yZW5kZXJlci51Ym8udXBkYXRlVW5pZm9ybUdyb3VwKHVuaWZvcm1Hcm91cCk7XG4gICAgfVxuICAgIGJ1ZmZlclN5c3RlbS51cGRhdGVCdWZmZXIodW5pZm9ybUdyb3VwLmJ1ZmZlcik7XG4gICAgbGV0IGJvdW5kSW5kZXggPSB0aGlzLl9ib3VuZFVuaWZvcm1zSWRzVG9JbmRleEhhc2hbdW5pZm9ybUdyb3VwLnVpZF07XG4gICAgaWYgKGJvdW5kSW5kZXggPT09IHZvaWQgMCkge1xuICAgICAgY29uc3QgbmV4dEluZGV4ID0gdGhpcy5fbmV4dEluZGV4KysgJSB0aGlzLl9tYXhCaW5kaW5ncztcbiAgICAgIGNvbnN0IGN1cnJlbnRCb3VuZFVuaWZvcm1Hcm91cCA9IHRoaXMuX2JvdW5kSW5kZXhUb1VuaWZvcm1zSGFzaFtuZXh0SW5kZXhdO1xuICAgICAgaWYgKGN1cnJlbnRCb3VuZFVuaWZvcm1Hcm91cCkge1xuICAgICAgICB0aGlzLl9ib3VuZFVuaWZvcm1zSWRzVG9JbmRleEhhc2hbY3VycmVudEJvdW5kVW5pZm9ybUdyb3VwLnVpZF0gPSB2b2lkIDA7XG4gICAgICB9XG4gICAgICBib3VuZEluZGV4ID0gdGhpcy5fYm91bmRVbmlmb3Jtc0lkc1RvSW5kZXhIYXNoW3VuaWZvcm1Hcm91cC51aWRdID0gbmV4dEluZGV4O1xuICAgICAgdGhpcy5fYm91bmRJbmRleFRvVW5pZm9ybXNIYXNoW25leHRJbmRleF0gPSB1bmlmb3JtR3JvdXA7XG4gICAgICBpZiAoaXNCdWZmZXJSZXNvdXJjZSkge1xuICAgICAgICBidWZmZXJTeXN0ZW0uYmluZEJ1ZmZlclJhbmdlKHVuaWZvcm1Hcm91cC5idWZmZXIsIG5leHRJbmRleCwgdW5pZm9ybUdyb3VwLm9mZnNldCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidWZmZXJTeXN0ZW0uYmluZEJ1ZmZlckJhc2UodW5pZm9ybUdyb3VwLmJ1ZmZlciwgbmV4dEluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZ2wgPSB0aGlzLl9nbDtcbiAgICBjb25zdCB1bmlmb3JtQmxvY2tJbmRleCA9IHRoaXMuX2FjdGl2ZVByb2dyYW0uX3VuaWZvcm1CbG9ja0RhdGFbbmFtZV0uaW5kZXg7XG4gICAgaWYgKHByb2dyYW1EYXRhLnVuaWZvcm1CbG9ja0JpbmRpbmdzW2luZGV4XSA9PT0gYm91bmRJbmRleClcbiAgICAgIHJldHVybjtcbiAgICBwcm9ncmFtRGF0YS51bmlmb3JtQmxvY2tCaW5kaW5nc1tpbmRleF0gPSBib3VuZEluZGV4O1xuICAgIGdsLnVuaWZvcm1CbG9ja0JpbmRpbmcocHJvZ3JhbURhdGEucHJvZ3JhbSwgdW5pZm9ybUJsb2NrSW5kZXgsIGJvdW5kSW5kZXgpO1xuICB9XG4gIF9zZXRQcm9ncmFtKHByb2dyYW0pIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlUHJvZ3JhbSA9PT0gcHJvZ3JhbSlcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLl9hY3RpdmVQcm9ncmFtID0gcHJvZ3JhbTtcbiAgICBjb25zdCBwcm9ncmFtRGF0YSA9IHRoaXMuX2dldFByb2dyYW1EYXRhKHByb2dyYW0pO1xuICAgIHRoaXMuX2dsLnVzZVByb2dyYW0ocHJvZ3JhbURhdGEucHJvZ3JhbSk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSBwcm9ncmFtIC0gdGhlIHByb2dyYW0gdG8gZ2V0IHRoZSBkYXRhIGZvclxuICAgKiBAaW50ZXJuYWxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRQcm9ncmFtRGF0YShwcm9ncmFtKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb2dyYW1EYXRhSGFzaFtwcm9ncmFtLl9rZXldIHx8IHRoaXMuX2NyZWF0ZVByb2dyYW1EYXRhKHByb2dyYW0pO1xuICB9XG4gIF9jcmVhdGVQcm9ncmFtRGF0YShwcm9ncmFtKSB7XG4gICAgY29uc3Qga2V5ID0gcHJvZ3JhbS5fa2V5O1xuICAgIHRoaXMuX3Byb2dyYW1EYXRhSGFzaFtrZXldID0gZ2VuZXJhdGVQcm9ncmFtKHRoaXMuX2dsLCBwcm9ncmFtKTtcbiAgICByZXR1cm4gdGhpcy5fcHJvZ3JhbURhdGFIYXNoW2tleV07XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLl9wcm9ncmFtRGF0YUhhc2gpKSB7XG4gICAgICBjb25zdCBwcm9ncmFtRGF0YSA9IHRoaXMuX3Byb2dyYW1EYXRhSGFzaFtrZXldO1xuICAgICAgcHJvZ3JhbURhdGEuZGVzdHJveSgpO1xuICAgICAgdGhpcy5fcHJvZ3JhbURhdGFIYXNoW2tleV0gPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLl9wcm9ncmFtRGF0YUhhc2ggPSBudWxsO1xuICAgIHRoaXMuX2JvdW5kVW5pZm9ybXNJZHNUb0luZGV4SGFzaCA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNhbiBiZSBleGVjdXRlZCB0aGF0IHdpbGwgc3luYyB0aGUgc2hhZGVyIGFzIGVmZmljaWVudGx5IGFzIHBvc3NpYmxlLlxuICAgKiBPdmVycmlkZGVuIGJ5IHRoZSB1bnNhZmUgZXZhbCBwYWNrYWdlIGlmIHlvdSBkb24ndCB3YW50IGV2YWwgdXNlZCBpbiB5b3VyIHByb2plY3QuXG4gICAqIEBwYXJhbSBzaGFkZXIgLSB0aGUgc2hhZGVyIHRvIGdlbmVyYXRlIHRoZSBzeW5jIGZ1bmN0aW9uIGZvclxuICAgKiBAcGFyYW0gc2hhZGVyU3lzdGVtIC0gdGhlIHNoYWRlciBzeXN0ZW0gdG8gdXNlXG4gICAqIEByZXR1cm5zIC0gdGhlIGdlbmVyYXRlZCBzeW5jIGZ1bmN0aW9uXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIF9nZW5lcmF0ZVNoYWRlclN5bmMoc2hhZGVyLCBzaGFkZXJTeXN0ZW0pIHtcbiAgICByZXR1cm4gZ2VuZXJhdGVTaGFkZXJTeW5jQ29kZShzaGFkZXIsIHNoYWRlclN5c3RlbSk7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HbFNoYWRlclN5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwic2hhZGVyXCJcbn07XG5cbmV4cG9ydCB7IEdsU2hhZGVyU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbFNoYWRlclN5c3RlbS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFVOSUZPUk1fVE9fU0lOR0xFX1NFVFRFUlMgPSB7XG4gIGYzMjogYGlmIChjdiAhPT0gdikge1xuICAgICAgICAgICAgY3UudmFsdWUgPSB2O1xuICAgICAgICAgICAgZ2wudW5pZm9ybTFmKGxvY2F0aW9uLCB2KTtcbiAgICAgICAgfWAsXG4gIFwidmVjMjxmMzI+XCI6IGBpZiAoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0pIHtcbiAgICAgICAgICAgIGN2WzBdID0gdlswXTtcbiAgICAgICAgICAgIGN2WzFdID0gdlsxXTtcbiAgICAgICAgICAgIGdsLnVuaWZvcm0yZihsb2NhdGlvbiwgdlswXSwgdlsxXSk7XG4gICAgICAgIH1gLFxuICBcInZlYzM8ZjMyPlwiOiBgaWYgKGN2WzBdICE9PSB2WzBdIHx8IGN2WzFdICE9PSB2WzFdIHx8IGN2WzJdICE9PSB2WzJdKSB7XG4gICAgICAgICAgICBjdlswXSA9IHZbMF07XG4gICAgICAgICAgICBjdlsxXSA9IHZbMV07XG4gICAgICAgICAgICBjdlsyXSA9IHZbMl07XG4gICAgICAgICAgICBnbC51bmlmb3JtM2YobG9jYXRpb24sIHZbMF0sIHZbMV0sIHZbMl0pO1xuICAgICAgICB9YCxcbiAgXCJ2ZWM0PGYzMj5cIjogYGlmIChjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSB8fCBjdlsyXSAhPT0gdlsyXSB8fCBjdlszXSAhPT0gdlszXSkge1xuICAgICAgICAgICAgY3ZbMF0gPSB2WzBdO1xuICAgICAgICAgICAgY3ZbMV0gPSB2WzFdO1xuICAgICAgICAgICAgY3ZbMl0gPSB2WzJdO1xuICAgICAgICAgICAgY3ZbM10gPSB2WzNdO1xuICAgICAgICAgICAgZ2wudW5pZm9ybTRmKGxvY2F0aW9uLCB2WzBdLCB2WzFdLCB2WzJdLCB2WzNdKTtcbiAgICAgICAgfWAsXG4gIGkzMjogYGlmIChjdiAhPT0gdikge1xuICAgICAgICAgICAgY3UudmFsdWUgPSB2O1xuICAgICAgICAgICAgZ2wudW5pZm9ybTFpKGxvY2F0aW9uLCB2KTtcbiAgICAgICAgfWAsXG4gIFwidmVjMjxpMzI+XCI6IGBpZiAoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0pIHtcbiAgICAgICAgICAgIGN2WzBdID0gdlswXTtcbiAgICAgICAgICAgIGN2WzFdID0gdlsxXTtcbiAgICAgICAgICAgIGdsLnVuaWZvcm0yaShsb2NhdGlvbiwgdlswXSwgdlsxXSk7XG4gICAgICAgIH1gLFxuICBcInZlYzM8aTMyPlwiOiBgaWYgKGN2WzBdICE9PSB2WzBdIHx8IGN2WzFdICE9PSB2WzFdIHx8IGN2WzJdICE9PSB2WzJdKSB7XG4gICAgICAgICAgICBjdlswXSA9IHZbMF07XG4gICAgICAgICAgICBjdlsxXSA9IHZbMV07XG4gICAgICAgICAgICBjdlsyXSA9IHZbMl07XG4gICAgICAgICAgICBnbC51bmlmb3JtM2kobG9jYXRpb24sIHZbMF0sIHZbMV0sIHZbMl0pO1xuICAgICAgICB9YCxcbiAgXCJ2ZWM0PGkzMj5cIjogYGlmIChjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSB8fCBjdlsyXSAhPT0gdlsyXSB8fCBjdlszXSAhPT0gdlszXSkge1xuICAgICAgICAgICAgY3ZbMF0gPSB2WzBdO1xuICAgICAgICAgICAgY3ZbMV0gPSB2WzFdO1xuICAgICAgICAgICAgY3ZbMl0gPSB2WzJdO1xuICAgICAgICAgICAgY3ZbM10gPSB2WzNdO1xuICAgICAgICAgICAgZ2wudW5pZm9ybTRpKGxvY2F0aW9uLCB2WzBdLCB2WzFdLCB2WzJdLCB2WzNdKTtcbiAgICAgICAgfWAsXG4gIHUzMjogYGlmIChjdiAhPT0gdikge1xuICAgICAgICAgICAgY3UudmFsdWUgPSB2O1xuICAgICAgICAgICAgZ2wudW5pZm9ybTF1aShsb2NhdGlvbiwgdik7XG4gICAgICAgIH1gLFxuICBcInZlYzI8dTMyPlwiOiBgaWYgKGN2WzBdICE9PSB2WzBdIHx8IGN2WzFdICE9PSB2WzFdKSB7XG4gICAgICAgICAgICBjdlswXSA9IHZbMF07XG4gICAgICAgICAgICBjdlsxXSA9IHZbMV07XG4gICAgICAgICAgICBnbC51bmlmb3JtMnVpKGxvY2F0aW9uLCB2WzBdLCB2WzFdKTtcbiAgICAgICAgfWAsXG4gIFwidmVjMzx1MzI+XCI6IGBpZiAoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0gfHwgY3ZbMl0gIT09IHZbMl0pIHtcbiAgICAgICAgICAgIGN2WzBdID0gdlswXTtcbiAgICAgICAgICAgIGN2WzFdID0gdlsxXTtcbiAgICAgICAgICAgIGN2WzJdID0gdlsyXTtcbiAgICAgICAgICAgIGdsLnVuaWZvcm0zdWkobG9jYXRpb24sIHZbMF0sIHZbMV0sIHZbMl0pO1xuICAgICAgICB9YCxcbiAgXCJ2ZWM0PHUzMj5cIjogYGlmIChjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSB8fCBjdlsyXSAhPT0gdlsyXSB8fCBjdlszXSAhPT0gdlszXSkge1xuICAgICAgICAgICAgY3ZbMF0gPSB2WzBdO1xuICAgICAgICAgICAgY3ZbMV0gPSB2WzFdO1xuICAgICAgICAgICAgY3ZbMl0gPSB2WzJdO1xuICAgICAgICAgICAgY3ZbM10gPSB2WzNdO1xuICAgICAgICAgICAgZ2wudW5pZm9ybTR1aShsb2NhdGlvbiwgdlswXSwgdlsxXSwgdlsyXSwgdlszXSk7XG4gICAgICAgIH1gLFxuICBib29sOiBgaWYgKGN2ICE9PSB2KSB7XG4gICAgICAgICAgICBjdS52YWx1ZSA9IHY7XG4gICAgICAgICAgICBnbC51bmlmb3JtMWkobG9jYXRpb24sIHYpO1xuICAgICAgICB9YCxcbiAgXCJ2ZWMyPGJvb2w+XCI6IGBpZiAoY3ZbMF0gIT09IHZbMF0gfHwgY3ZbMV0gIT09IHZbMV0pIHtcbiAgICAgICAgICAgIGN2WzBdID0gdlswXTtcbiAgICAgICAgICAgIGN2WzFdID0gdlsxXTtcbiAgICAgICAgICAgIGdsLnVuaWZvcm0yaShsb2NhdGlvbiwgdlswXSwgdlsxXSk7XG4gICAgICAgIH1gLFxuICBcInZlYzM8Ym9vbD5cIjogYGlmIChjdlswXSAhPT0gdlswXSB8fCBjdlsxXSAhPT0gdlsxXSB8fCBjdlsyXSAhPT0gdlsyXSkge1xuICAgICAgICAgICAgY3ZbMF0gPSB2WzBdO1xuICAgICAgICAgICAgY3ZbMV0gPSB2WzFdO1xuICAgICAgICAgICAgY3ZbMl0gPSB2WzJdO1xuICAgICAgICAgICAgZ2wudW5pZm9ybTNpKGxvY2F0aW9uLCB2WzBdLCB2WzFdLCB2WzJdKTtcbiAgICAgICAgfWAsXG4gIFwidmVjNDxib29sPlwiOiBgaWYgKGN2WzBdICE9PSB2WzBdIHx8IGN2WzFdICE9PSB2WzFdIHx8IGN2WzJdICE9PSB2WzJdIHx8IGN2WzNdICE9PSB2WzNdKSB7XG4gICAgICAgICAgICBjdlswXSA9IHZbMF07XG4gICAgICAgICAgICBjdlsxXSA9IHZbMV07XG4gICAgICAgICAgICBjdlsyXSA9IHZbMl07XG4gICAgICAgICAgICBjdlszXSA9IHZbM107XG4gICAgICAgICAgICBnbC51bmlmb3JtNGkobG9jYXRpb24sIHZbMF0sIHZbMV0sIHZbMl0sIHZbM10pO1xuICAgICAgICB9YCxcbiAgXCJtYXQyeDI8ZjMyPlwiOiBgZ2wudW5pZm9ybU1hdHJpeDJmdihsb2NhdGlvbiwgZmFsc2UsIHYpO2AsXG4gIFwibWF0M3gzPGYzMj5cIjogYGdsLnVuaWZvcm1NYXRyaXgzZnYobG9jYXRpb24sIGZhbHNlLCB2KTtgLFxuICBcIm1hdDR4NDxmMzI+XCI6IGBnbC51bmlmb3JtTWF0cml4NGZ2KGxvY2F0aW9uLCBmYWxzZSwgdik7YFxufTtcbmNvbnN0IFVOSUZPUk1fVE9fQVJSQVlfU0VUVEVSUyA9IHtcbiAgZjMyOiBgZ2wudW5pZm9ybTFmdihsb2NhdGlvbiwgdik7YCxcbiAgXCJ2ZWMyPGYzMj5cIjogYGdsLnVuaWZvcm0yZnYobG9jYXRpb24sIHYpO2AsXG4gIFwidmVjMzxmMzI+XCI6IGBnbC51bmlmb3JtM2Z2KGxvY2F0aW9uLCB2KTtgLFxuICBcInZlYzQ8ZjMyPlwiOiBgZ2wudW5pZm9ybTRmdihsb2NhdGlvbiwgdik7YCxcbiAgXCJtYXQyeDI8ZjMyPlwiOiBgZ2wudW5pZm9ybU1hdHJpeDJmdihsb2NhdGlvbiwgZmFsc2UsIHYpO2AsXG4gIFwibWF0M3gzPGYzMj5cIjogYGdsLnVuaWZvcm1NYXRyaXgzZnYobG9jYXRpb24sIGZhbHNlLCB2KTtgLFxuICBcIm1hdDR4NDxmMzI+XCI6IGBnbC51bmlmb3JtTWF0cml4NGZ2KGxvY2F0aW9uLCBmYWxzZSwgdik7YCxcbiAgaTMyOiBgZ2wudW5pZm9ybTFpdihsb2NhdGlvbiwgdik7YCxcbiAgXCJ2ZWMyPGkzMj5cIjogYGdsLnVuaWZvcm0yaXYobG9jYXRpb24sIHYpO2AsXG4gIFwidmVjMzxpMzI+XCI6IGBnbC51bmlmb3JtM2l2KGxvY2F0aW9uLCB2KTtgLFxuICBcInZlYzQ8aTMyPlwiOiBgZ2wudW5pZm9ybTRpdihsb2NhdGlvbiwgdik7YCxcbiAgdTMyOiBgZ2wudW5pZm9ybTFpdihsb2NhdGlvbiwgdik7YCxcbiAgXCJ2ZWMyPHUzMj5cIjogYGdsLnVuaWZvcm0yaXYobG9jYXRpb24sIHYpO2AsXG4gIFwidmVjMzx1MzI+XCI6IGBnbC51bmlmb3JtM2l2KGxvY2F0aW9uLCB2KTtgLFxuICBcInZlYzQ8dTMyPlwiOiBgZ2wudW5pZm9ybTRpdihsb2NhdGlvbiwgdik7YCxcbiAgYm9vbDogYGdsLnVuaWZvcm0xaXYobG9jYXRpb24sIHYpO2AsXG4gIFwidmVjMjxib29sPlwiOiBgZ2wudW5pZm9ybTJpdihsb2NhdGlvbiwgdik7YCxcbiAgXCJ2ZWMzPGJvb2w+XCI6IGBnbC51bmlmb3JtM2l2KGxvY2F0aW9uLCB2KTtgLFxuICBcInZlYzQ8Ym9vbD5cIjogYGdsLnVuaWZvcm00aXYobG9jYXRpb24sIHYpO2Bcbn07XG5cbmV4cG9ydCB7IFVOSUZPUk1fVE9fQVJSQVlfU0VUVEVSUywgVU5JRk9STV9UT19TSU5HTEVfU0VUVEVSUyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VuZXJhdGVVbmlmb3Jtc1N5bmNUeXBlcy5tanMubWFwXG4iLCJpbXBvcnQgeyBCdWZmZXJSZXNvdXJjZSB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9idWZmZXIvQnVmZmVyUmVzb3VyY2UubWpzJztcbmltcG9ydCB7IFVuaWZvcm1Hcm91cCB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9zaGFkZXIvVW5pZm9ybUdyb3VwLm1qcyc7XG5pbXBvcnQgeyB1bmlmb3JtUGFyc2VycyB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9zaGFkZXIvdXRpbHMvdW5pZm9ybVBhcnNlcnMubWpzJztcbmltcG9ydCB7IFVOSUZPUk1fVE9fU0lOR0xFX1NFVFRFUlMsIFVOSUZPUk1fVE9fQVJSQVlfU0VUVEVSUyB9IGZyb20gJy4vZ2VuZXJhdGVVbmlmb3Jtc1N5bmNUeXBlcy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGdlbmVyYXRlVW5pZm9ybXNTeW5jKGdyb3VwLCB1bmlmb3JtRGF0YSkge1xuICBjb25zdCBmdW5jRnJhZ21lbnRzID0gW2BcbiAgICAgICAgdmFyIHYgPSBudWxsO1xuICAgICAgICB2YXIgY3YgPSBudWxsO1xuICAgICAgICB2YXIgY3UgPSBudWxsO1xuICAgICAgICB2YXIgdCA9IDA7XG4gICAgICAgIHZhciBnbCA9IHJlbmRlcmVyLmdsO1xuICAgICAgICB2YXIgbmFtZSA9IG51bGw7XG4gICAgYF07XG4gIGZvciAoY29uc3QgaSBpbiBncm91cC51bmlmb3Jtcykge1xuICAgIGlmICghdW5pZm9ybURhdGFbaV0pIHtcbiAgICAgIGlmIChncm91cC51bmlmb3Jtc1tpXSBpbnN0YW5jZW9mIFVuaWZvcm1Hcm91cCkge1xuICAgICAgICBpZiAoZ3JvdXAudW5pZm9ybXNbaV0udWJvKSB7XG4gICAgICAgICAgZnVuY0ZyYWdtZW50cy5wdXNoKGBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLnNoYWRlci5iaW5kVW5pZm9ybUJsb2NrKHV2LiR7aX0sIFwiJHtpfVwiKTtcbiAgICAgICAgICAgICAgICAgICAgYCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZnVuY0ZyYWdtZW50cy5wdXNoKGBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLnNoYWRlci51cGRhdGVVbmlmb3JtR3JvdXAodXYuJHtpfSk7XG4gICAgICAgICAgICAgICAgICAgIGApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGdyb3VwLnVuaWZvcm1zW2ldIGluc3RhbmNlb2YgQnVmZmVyUmVzb3VyY2UpIHtcbiAgICAgICAgZnVuY0ZyYWdtZW50cy5wdXNoKGBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLnNoYWRlci5iaW5kQnVmZmVyUmVzb3VyY2UodXYuJHtpfSwgXCIke2l9XCIpO1xuICAgICAgICAgICAgICAgICAgICBgKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCB1bmlmb3JtID0gZ3JvdXAudW5pZm9ybVN0cnVjdHVyZXNbaV07XG4gICAgbGV0IHBhcnNlZCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdW5pZm9ybVBhcnNlcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGNvbnN0IHBhcnNlciA9IHVuaWZvcm1QYXJzZXJzW2pdO1xuICAgICAgaWYgKHVuaWZvcm0udHlwZSA9PT0gcGFyc2VyLnR5cGUgJiYgcGFyc2VyLnRlc3QodW5pZm9ybSkpIHtcbiAgICAgICAgZnVuY0ZyYWdtZW50cy5wdXNoKGBuYW1lID0gXCIke2l9XCI7YCwgdW5pZm9ybVBhcnNlcnNbal0udW5pZm9ybSk7XG4gICAgICAgIHBhcnNlZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXBhcnNlZCkge1xuICAgICAgY29uc3QgdGVtcGxhdGVUeXBlID0gdW5pZm9ybS5zaXplID09PSAxID8gVU5JRk9STV9UT19TSU5HTEVfU0VUVEVSUyA6IFVOSUZPUk1fVE9fQVJSQVlfU0VUVEVSUztcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVUeXBlW3VuaWZvcm0udHlwZV0ucmVwbGFjZShcImxvY2F0aW9uXCIsIGB1ZFtcIiR7aX1cIl0ubG9jYXRpb25gKTtcbiAgICAgIGZ1bmNGcmFnbWVudHMucHVzaChgXG4gICAgICAgICAgICBjdSA9IHVkW1wiJHtpfVwiXTtcbiAgICAgICAgICAgIGN2ID0gY3UudmFsdWU7XG4gICAgICAgICAgICB2ID0gdXZbXCIke2l9XCJdO1xuICAgICAgICAgICAgJHt0ZW1wbGF0ZX07YCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oXCJ1ZFwiLCBcInV2XCIsIFwicmVuZGVyZXJcIiwgXCJzeW5jRGF0YVwiLCBmdW5jRnJhZ21lbnRzLmpvaW4oXCJcXG5cIikpO1xufVxuXG5leHBvcnQgeyBnZW5lcmF0ZVVuaWZvcm1zU3luYyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VuZXJhdGVVbmlmb3Jtc1N5bmMubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVVbmlmb3Jtc1N5bmMgfSBmcm9tICcuL3V0aWxzL2dlbmVyYXRlVW5pZm9ybXNTeW5jLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR2xVbmlmb3JtR3JvdXBTeXN0ZW0ge1xuICAvKiogQHBhcmFtIHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyIHRoaXMgU3lzdGVtIHdvcmtzIGZvci4gKi9cbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICAvKiogQ2FjaGUgdG8gaG9sZHMgdGhlIGdlbmVyYXRlZCBmdW5jdGlvbnMuIFN0b3JlZCBhZ2FpbnN0IFVuaWZvcm1PYmplY3RzIHVuaXF1ZSBzaWduYXR1cmUuICovXG4gICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICB0aGlzLl91bmlmb3JtR3JvdXBTeW5jSGFzaCA9IHt9O1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5nbCA9IG51bGw7XG4gICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgfVxuICBjb250ZXh0Q2hhbmdlKGdsKSB7XG4gICAgdGhpcy5nbCA9IGdsO1xuICB9XG4gIC8qKlxuICAgKiBVcGxvYWRzIHRoZSB1bmlmb3JtcyB2YWx1ZXMgdG8gdGhlIGN1cnJlbnRseSBib3VuZCBzaGFkZXIuXG4gICAqIEBwYXJhbSBncm91cCAtIHRoZSB1bmlmb3JtcyB2YWx1ZXMgdGhhdCBiZSBhcHBsaWVkIHRvIHRoZSBjdXJyZW50IHNoYWRlclxuICAgKiBAcGFyYW0gcHJvZ3JhbVxuICAgKiBAcGFyYW0gc3luY0RhdGFcbiAgICogQHBhcmFtIHN5bmNEYXRhLnRleHR1cmVDb3VudFxuICAgKi9cbiAgdXBkYXRlVW5pZm9ybUdyb3VwKGdyb3VwLCBwcm9ncmFtLCBzeW5jRGF0YSkge1xuICAgIGNvbnN0IHByb2dyYW1EYXRhID0gdGhpcy5fcmVuZGVyZXIuc2hhZGVyLl9nZXRQcm9ncmFtRGF0YShwcm9ncmFtKTtcbiAgICBpZiAoIWdyb3VwLmlzU3RhdGljIHx8IGdyb3VwLl9kaXJ0eUlkICE9PSBwcm9ncmFtRGF0YS51bmlmb3JtRGlydHlHcm91cHNbZ3JvdXAudWlkXSkge1xuICAgICAgcHJvZ3JhbURhdGEudW5pZm9ybURpcnR5R3JvdXBzW2dyb3VwLnVpZF0gPSBncm91cC5fZGlydHlJZDtcbiAgICAgIGNvbnN0IHN5bmNGdW5jID0gdGhpcy5fZ2V0VW5pZm9ybVN5bmNGdW5jdGlvbihncm91cCwgcHJvZ3JhbSk7XG4gICAgICBzeW5jRnVuYyhwcm9ncmFtRGF0YS51bmlmb3JtRGF0YSwgZ3JvdXAudW5pZm9ybXMsIHRoaXMuX3JlbmRlcmVyLCBzeW5jRGF0YSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBPdmVycmlkZWFibGUgYnkgdGhlIHBpeGkuanMvdW5zYWZlLWV2YWwgcGFja2FnZSB0byB1c2Ugc3RhdGljIHN5bmNVbmlmb3JtcyBpbnN0ZWFkLlxuICAgKiBAcGFyYW0gZ3JvdXBcbiAgICogQHBhcmFtIHByb2dyYW1cbiAgICovXG4gIF9nZXRVbmlmb3JtU3luY0Z1bmN0aW9uKGdyb3VwLCBwcm9ncmFtKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VuaWZvcm1Hcm91cFN5bmNIYXNoW2dyb3VwLl9zaWduYXR1cmVdPy5bcHJvZ3JhbS5fa2V5XSB8fCB0aGlzLl9jcmVhdGVVbmlmb3JtU3luY0Z1bmN0aW9uKGdyb3VwLCBwcm9ncmFtKTtcbiAgfVxuICBfY3JlYXRlVW5pZm9ybVN5bmNGdW5jdGlvbihncm91cCwgcHJvZ3JhbSkge1xuICAgIGNvbnN0IHVuaWZvcm1Hcm91cFN5bmNIYXNoID0gdGhpcy5fdW5pZm9ybUdyb3VwU3luY0hhc2hbZ3JvdXAuX3NpZ25hdHVyZV0gfHwgKHRoaXMuX3VuaWZvcm1Hcm91cFN5bmNIYXNoW2dyb3VwLl9zaWduYXR1cmVdID0ge30pO1xuICAgIGNvbnN0IGlkID0gdGhpcy5fZ2V0U2lnbmF0dXJlKGdyb3VwLCBwcm9ncmFtLl91bmlmb3JtRGF0YSwgXCJ1XCIpO1xuICAgIGlmICghdGhpcy5fY2FjaGVbaWRdKSB7XG4gICAgICB0aGlzLl9jYWNoZVtpZF0gPSB0aGlzLl9nZW5lcmF0ZVVuaWZvcm1zU3luYyhncm91cCwgcHJvZ3JhbS5fdW5pZm9ybURhdGEpO1xuICAgIH1cbiAgICB1bmlmb3JtR3JvdXBTeW5jSGFzaFtwcm9ncmFtLl9rZXldID0gdGhpcy5fY2FjaGVbaWRdO1xuICAgIHJldHVybiB1bmlmb3JtR3JvdXBTeW5jSGFzaFtwcm9ncmFtLl9rZXldO1xuICB9XG4gIF9nZW5lcmF0ZVVuaWZvcm1zU3luYyhncm91cCwgdW5pZm9ybURhdGEpIHtcbiAgICByZXR1cm4gZ2VuZXJhdGVVbmlmb3Jtc1N5bmMoZ3JvdXAsIHVuaWZvcm1EYXRhKTtcbiAgfVxuICAvKipcbiAgICogVGFrZXMgYSB1bmlmb3JtIGdyb3VwIGFuZCBkYXRhIGFuZCBnZW5lcmF0ZXMgYSB1bmlxdWUgc2lnbmF0dXJlIGZvciB0aGVtLlxuICAgKiBAcGFyYW0gZ3JvdXAgLSBUaGUgdW5pZm9ybSBncm91cCB0byBnZXQgc2lnbmF0dXJlIG9mXG4gICAqIEBwYXJhbSBncm91cC51bmlmb3Jtc1xuICAgKiBAcGFyYW0gdW5pZm9ybURhdGEgLSBVbmlmb3JtIGluZm9ybWF0aW9uIGdlbmVyYXRlZCBieSB0aGUgc2hhZGVyXG4gICAqIEBwYXJhbSBwcmVGaXhcbiAgICogQHJldHVybnMgVW5pcXVlIHNpZ25hdHVyZSBvZiB0aGUgdW5pZm9ybSBncm91cFxuICAgKi9cbiAgX2dldFNpZ25hdHVyZShncm91cCwgdW5pZm9ybURhdGEsIHByZUZpeCkge1xuICAgIGNvbnN0IHVuaWZvcm1zID0gZ3JvdXAudW5pZm9ybXM7XG4gICAgY29uc3Qgc3RyaW5ncyA9IFtgJHtwcmVGaXh9LWBdO1xuICAgIGZvciAoY29uc3QgaSBpbiB1bmlmb3Jtcykge1xuICAgICAgc3RyaW5ncy5wdXNoKGkpO1xuICAgICAgaWYgKHVuaWZvcm1EYXRhW2ldKSB7XG4gICAgICAgIHN0cmluZ3MucHVzaCh1bmlmb3JtRGF0YVtpXS50eXBlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZ3Muam9pbihcIi1cIik7XG4gIH1cbiAgLyoqIERlc3Ryb3lzIHRoaXMgU3lzdGVtIGFuZCByZW1vdmVzIGFsbCBpdHMgdGV4dHVyZXMuICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuX2NhY2hlID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdsVW5pZm9ybUdyb3VwU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJ1bmlmb3JtR3JvdXBcIlxufTtcblxuZXhwb3J0IHsgR2xVbmlmb3JtR3JvdXBTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsVW5pZm9ybUdyb3VwU3lzdGVtLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gbWFwV2ViR0xCbGVuZE1vZGVzVG9QaXhpKGdsKSB7XG4gIGNvbnN0IGJsZW5kTWFwID0ge307XG4gIGJsZW5kTWFwLm5vcm1hbCA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICBibGVuZE1hcC5hZGQgPSBbZ2wuT05FLCBnbC5PTkVdO1xuICBibGVuZE1hcC5tdWx0aXBseSA9IFtnbC5EU1RfQ09MT1IsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gIGJsZW5kTWFwLnNjcmVlbiA9IFtnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQ09MT1IsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gIGJsZW5kTWFwLm5vbmUgPSBbMCwgMF07XG4gIGJsZW5kTWFwW1wibm9ybWFsLW5wbVwiXSA9IFtnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQV07XG4gIGJsZW5kTWFwW1wiYWRkLW5wbVwiXSA9IFtnbC5TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FLCBnbC5PTkVdO1xuICBibGVuZE1hcFtcInNjcmVlbi1ucG1cIl0gPSBbZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0NPTE9SLCBnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFdO1xuICBibGVuZE1hcC5lcmFzZSA9IFtnbC5aRVJPLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXTtcbiAgcmV0dXJuIGJsZW5kTWFwO1xufVxuXG5leHBvcnQgeyBtYXBXZWJHTEJsZW5kTW9kZXNUb1BpeGkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcFdlYkdMQmxlbmRNb2Rlc1RvUGl4aS5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9zdGF0ZS9TdGF0ZS5tanMnO1xuaW1wb3J0IHsgbWFwV2ViR0xCbGVuZE1vZGVzVG9QaXhpIH0gZnJvbSAnLi9tYXBXZWJHTEJsZW5kTW9kZXNUb1BpeGkubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBCTEVORCA9IDA7XG5jb25zdCBPRkZTRVQgPSAxO1xuY29uc3QgQ1VMTElORyA9IDI7XG5jb25zdCBERVBUSF9URVNUID0gMztcbmNvbnN0IFdJTkRJTkcgPSA0O1xuY29uc3QgREVQVEhfTUFTSyA9IDU7XG5jb25zdCBfR2xTdGF0ZVN5c3RlbSA9IGNsYXNzIF9HbFN0YXRlU3lzdGVtIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5nbCA9IG51bGw7XG4gICAgdGhpcy5zdGF0ZUlkID0gMDtcbiAgICB0aGlzLnBvbHlnb25PZmZzZXQgPSAwO1xuICAgIHRoaXMuYmxlbmRNb2RlID0gXCJub25lXCI7XG4gICAgdGhpcy5fYmxlbmRFcSA9IGZhbHNlO1xuICAgIHRoaXMubWFwID0gW107XG4gICAgdGhpcy5tYXBbQkxFTkRdID0gdGhpcy5zZXRCbGVuZDtcbiAgICB0aGlzLm1hcFtPRkZTRVRdID0gdGhpcy5zZXRPZmZzZXQ7XG4gICAgdGhpcy5tYXBbQ1VMTElOR10gPSB0aGlzLnNldEN1bGxGYWNlO1xuICAgIHRoaXMubWFwW0RFUFRIX1RFU1RdID0gdGhpcy5zZXREZXB0aFRlc3Q7XG4gICAgdGhpcy5tYXBbV0lORElOR10gPSB0aGlzLnNldEZyb250RmFjZTtcbiAgICB0aGlzLm1hcFtERVBUSF9NQVNLXSA9IHRoaXMuc2V0RGVwdGhNYXNrO1xuICAgIHRoaXMuY2hlY2tzID0gW107XG4gICAgdGhpcy5kZWZhdWx0U3RhdGUgPSBTdGF0ZS5mb3IyZCgpO1xuICB9XG4gIGNvbnRleHRDaGFuZ2UoZ2wpIHtcbiAgICB0aGlzLmdsID0gZ2w7XG4gICAgdGhpcy5ibGVuZE1vZGVzTWFwID0gbWFwV2ViR0xCbGVuZE1vZGVzVG9QaXhpKGdsKTtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICogQHBhcmFtIHsqfSBzdGF0ZSAtIFRoZSBzdGF0ZSB0byBzZXQuXG4gICAqL1xuICBzZXQoc3RhdGUpIHtcbiAgICBzdGF0ZSA9IHN0YXRlIHx8IHRoaXMuZGVmYXVsdFN0YXRlO1xuICAgIGlmICh0aGlzLnN0YXRlSWQgIT09IHN0YXRlLmRhdGEpIHtcbiAgICAgIGxldCBkaWZmID0gdGhpcy5zdGF0ZUlkIF4gc3RhdGUuZGF0YTtcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIHdoaWxlIChkaWZmKSB7XG4gICAgICAgIGlmIChkaWZmICYgMSkge1xuICAgICAgICAgIHRoaXMubWFwW2ldLmNhbGwodGhpcywgISEoc3RhdGUuZGF0YSAmIDEgPDwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIGRpZmYgPSBkaWZmID4+IDE7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdGVJZCA9IHN0YXRlLmRhdGE7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGVja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuY2hlY2tzW2ldKHRoaXMsIHN0YXRlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIHN0YXRlLCB3aGVuIHByZXZpb3VzIHN0YXRlIGlzIHVua25vd24uXG4gICAqIEBwYXJhbSB7Kn0gc3RhdGUgLSBUaGUgc3RhdGUgdG8gc2V0XG4gICAqL1xuICBmb3JjZVN0YXRlKHN0YXRlKSB7XG4gICAgc3RhdGUgPSBzdGF0ZSB8fCB0aGlzLmRlZmF1bHRTdGF0ZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWFwLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLm1hcFtpXS5jYWxsKHRoaXMsICEhKHN0YXRlLmRhdGEgJiAxIDw8IGkpKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoZWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5jaGVja3NbaV0odGhpcywgc3RhdGUpO1xuICAgIH1cbiAgICB0aGlzLnN0YXRlSWQgPSBzdGF0ZS5kYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHdoZXRoZXIgdG8gZW5hYmxlIG9yIGRpc2FibGUgYmxlbmRpbmcuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIFdlYkdsIGJsZW5kaW5nLlxuICAgKi9cbiAgc2V0QmxlbmQodmFsdWUpIHtcbiAgICB0aGlzLl91cGRhdGVDaGVjayhfR2xTdGF0ZVN5c3RlbS5fY2hlY2tCbGVuZE1vZGUsIHZhbHVlKTtcbiAgICB0aGlzLmdsW3ZhbHVlID8gXCJlbmFibGVcIiA6IFwiZGlzYWJsZVwiXSh0aGlzLmdsLkJMRU5EKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIHRvIGVuYWJsZSBvciBkaXNhYmxlIHBvbHlnb24gb2Zmc2V0IGZpbGwuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIHdlYmdsIHBvbHlnb24gb2Zmc2V0IHRlc3RpbmcuXG4gICAqL1xuICBzZXRPZmZzZXQodmFsdWUpIHtcbiAgICB0aGlzLl91cGRhdGVDaGVjayhfR2xTdGF0ZVN5c3RlbS5fY2hlY2tQb2x5Z29uT2Zmc2V0LCB2YWx1ZSk7XG4gICAgdGhpcy5nbFt2YWx1ZSA/IFwiZW5hYmxlXCIgOiBcImRpc2FibGVcIl0odGhpcy5nbC5QT0xZR09OX09GRlNFVF9GSUxMKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIHRvIGVuYWJsZSBvciBkaXNhYmxlIGRlcHRoIHRlc3QuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIHdlYmdsIGRlcHRoIHRlc3RpbmcuXG4gICAqL1xuICBzZXREZXB0aFRlc3QodmFsdWUpIHtcbiAgICB0aGlzLmdsW3ZhbHVlID8gXCJlbmFibGVcIiA6IFwiZGlzYWJsZVwiXSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHdoZXRoZXIgdG8gZW5hYmxlIG9yIGRpc2FibGUgZGVwdGggbWFzay5cbiAgICogQHBhcmFtIHZhbHVlIC0gVHVybiBvbiBvciBvZmYgd2ViZ2wgZGVwdGggbWFzay5cbiAgICovXG4gIHNldERlcHRoTWFzayh2YWx1ZSkge1xuICAgIHRoaXMuZ2wuZGVwdGhNYXNrKHZhbHVlKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIHRvIGVuYWJsZSBvciBkaXNhYmxlIGN1bGwgZmFjZS5cbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIFR1cm4gb24gb3Igb2ZmIHdlYmdsIGN1bGwgZmFjZS5cbiAgICovXG4gIHNldEN1bGxGYWNlKHZhbHVlKSB7XG4gICAgdGhpcy5nbFt2YWx1ZSA/IFwiZW5hYmxlXCIgOiBcImRpc2FibGVcIl0odGhpcy5nbC5DVUxMX0ZBQ0UpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBnbCBmcm9udCBmYWNlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIC0gdHJ1ZSBpcyBjbG9ja3dpc2UgYW5kIGZhbHNlIGlzIGNvdW50ZXItY2xvY2t3aXNlXG4gICAqL1xuICBzZXRGcm9udEZhY2UodmFsdWUpIHtcbiAgICB0aGlzLmdsLmZyb250RmFjZSh0aGlzLmdsW3ZhbHVlID8gXCJDV1wiIDogXCJDQ1dcIl0pO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBibGVuZCBtb2RlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgYmxlbmQgbW9kZSB0byBzZXQgdG8uXG4gICAqL1xuICBzZXRCbGVuZE1vZGUodmFsdWUpIHtcbiAgICBpZiAoIXRoaXMuYmxlbmRNb2Rlc01hcFt2YWx1ZV0pIHtcbiAgICAgIHZhbHVlID0gXCJub3JtYWxcIjtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSB0aGlzLmJsZW5kTW9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmJsZW5kTW9kZSA9IHZhbHVlO1xuICAgIGNvbnN0IG1vZGUgPSB0aGlzLmJsZW5kTW9kZXNNYXBbdmFsdWVdO1xuICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICBpZiAobW9kZS5sZW5ndGggPT09IDIpIHtcbiAgICAgIGdsLmJsZW5kRnVuYyhtb2RlWzBdLCBtb2RlWzFdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2wuYmxlbmRGdW5jU2VwYXJhdGUobW9kZVswXSwgbW9kZVsxXSwgbW9kZVsyXSwgbW9kZVszXSk7XG4gICAgfVxuICAgIGlmIChtb2RlLmxlbmd0aCA9PT0gNikge1xuICAgICAgdGhpcy5fYmxlbmRFcSA9IHRydWU7XG4gICAgICBnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUobW9kZVs0XSwgbW9kZVs1XSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9ibGVuZEVxKSB7XG4gICAgICB0aGlzLl9ibGVuZEVxID0gZmFsc2U7XG4gICAgICBnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoZ2wuRlVOQ19BREQsIGdsLkZVTkNfQUREKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBvbHlnb24gb2Zmc2V0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB0aGUgcG9seWdvbiBvZmZzZXRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlIC0gdGhlIHBvbHlnb24gb2Zmc2V0IHNjYWxlXG4gICAqL1xuICBzZXRQb2x5Z29uT2Zmc2V0KHZhbHVlLCBzY2FsZSkge1xuICAgIHRoaXMuZ2wucG9seWdvbk9mZnNldCh2YWx1ZSwgc2NhbGUpO1xuICB9XG4gIC8vIHVzZWRcbiAgLyoqIFJlc2V0cyBhbGwgdGhlIGxvZ2ljIGFuZCBkaXNhYmxlcyB0aGUgVkFPcy4gKi9cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5nbC5waXhlbFN0b3JlaSh0aGlzLmdsLlVOUEFDS19GTElQX1lfV0VCR0wsIGZhbHNlKTtcbiAgICB0aGlzLmZvcmNlU3RhdGUodGhpcy5kZWZhdWx0U3RhdGUpO1xuICAgIHRoaXMuX2JsZW5kRXEgPSB0cnVlO1xuICAgIHRoaXMuYmxlbmRNb2RlID0gXCJcIjtcbiAgICB0aGlzLnNldEJsZW5kTW9kZShcIm5vcm1hbFwiKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2tzIHRvIHNlZSB3aGljaCB1cGRhdGVzIHNob3VsZCBiZSBjaGVja2VkIGJhc2VkIG9uIHdoaWNoIHNldHRpbmdzIGhhdmUgYmVlbiBhY3RpdmF0ZWQuXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCBpZiBibGVuZCBpcyBlbmFibGVkIHRoZW4gd2Ugc2hvdWxkIGNoZWNrIHRoZSBibGVuZCBtb2RlcyBlYWNoIHRpbWUgdGhlIHN0YXRlIGlzIGNoYW5nZWRcbiAgICogb3IgaWYgcG9seWdvbiBmaWxsIGlzIGFjdGl2YXRlZCB0aGVuIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHBvbHlnb24gb2Zmc2V0IGNoYW5nZXMuXG4gICAqIFRoZSBpZGVhIGlzIHRoYXQgd2Ugb25seSBjaGVjayB3aGF0IHdlIGhhdmUgdG9vLlxuICAgKiBAcGFyYW0gZnVuYyAtIHRoZSBjaGVja2luZyBmdW5jdGlvbiB0byBhZGQgb3IgcmVtb3ZlXG4gICAqIEBwYXJhbSB2YWx1ZSAtIHNob3VsZCB0aGUgY2hlY2sgZnVuY3Rpb24gYmUgYWRkZWQgb3IgcmVtb3ZlZC5cbiAgICovXG4gIF91cGRhdGVDaGVjayhmdW5jLCB2YWx1ZSkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jaGVja3MuaW5kZXhPZihmdW5jKTtcbiAgICBpZiAodmFsdWUgJiYgaW5kZXggPT09IC0xKSB7XG4gICAgICB0aGlzLmNoZWNrcy5wdXNoKGZ1bmMpO1xuICAgIH0gZWxzZSBpZiAoIXZhbHVlICYmIGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5jaGVja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEEgcHJpdmF0ZSBsaXR0bGUgd3JhcHBlciBmdW5jdGlvbiB0aGF0IHdlIGNhbGwgdG8gY2hlY2sgdGhlIGJsZW5kIG1vZGUuXG4gICAqIEBwYXJhbSBzeXN0ZW0gLSB0aGUgU3lzdGVtIHRvIHBlcmZvcm0gdGhlIHN0YXRlIGNoZWNrIG9uXG4gICAqIEBwYXJhbSBzdGF0ZSAtIHRoZSBzdGF0ZSB0aGF0IHRoZSBibGVuZE1vZGUgd2lsbCBwdWxsZWQgZnJvbVxuICAgKi9cbiAgc3RhdGljIF9jaGVja0JsZW5kTW9kZShzeXN0ZW0sIHN0YXRlKSB7XG4gICAgc3lzdGVtLnNldEJsZW5kTW9kZShzdGF0ZS5ibGVuZE1vZGUpO1xuICB9XG4gIC8qKlxuICAgKiBBIHByaXZhdGUgbGl0dGxlIHdyYXBwZXIgZnVuY3Rpb24gdGhhdCB3ZSBjYWxsIHRvIGNoZWNrIHRoZSBwb2x5Z29uIG9mZnNldC5cbiAgICogQHBhcmFtIHN5c3RlbSAtIHRoZSBTeXN0ZW0gdG8gcGVyZm9ybSB0aGUgc3RhdGUgY2hlY2sgb25cbiAgICogQHBhcmFtIHN0YXRlIC0gdGhlIHN0YXRlIHRoYXQgdGhlIGJsZW5kTW9kZSB3aWxsIHB1bGxlZCBmcm9tXG4gICAqL1xuICBzdGF0aWMgX2NoZWNrUG9seWdvbk9mZnNldChzeXN0ZW0sIHN0YXRlKSB7XG4gICAgc3lzdGVtLnNldFBvbHlnb25PZmZzZXQoMSwgc3RhdGUucG9seWdvbk9mZnNldCk7XG4gIH1cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5nbCA9IG51bGw7XG4gICAgdGhpcy5jaGVja3MubGVuZ3RoID0gMDtcbiAgfVxufTtcbi8qKiBAaWdub3JlICovXG5fR2xTdGF0ZVN5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwic3RhdGVcIlxufTtcbmxldCBHbFN0YXRlU3lzdGVtID0gX0dsU3RhdGVTeXN0ZW07XG5cbmV4cG9ydCB7IEdsU3RhdGVTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsU3RhdGVTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgR0xfVEFSR0VUUywgR0xfVFlQRVMsIEdMX0ZPUk1BVFMgfSBmcm9tICcuL2NvbnN0Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR2xUZXh0dXJlIHtcbiAgY29uc3RydWN0b3IodGV4dHVyZSkge1xuICAgIHRoaXMudGFyZ2V0ID0gR0xfVEFSR0VUUy5URVhUVVJFXzJEO1xuICAgIHRoaXMudGV4dHVyZSA9IHRleHR1cmU7XG4gICAgdGhpcy53aWR0aCA9IC0xO1xuICAgIHRoaXMuaGVpZ2h0ID0gLTE7XG4gICAgdGhpcy50eXBlID0gR0xfVFlQRVMuVU5TSUdORURfQllURTtcbiAgICB0aGlzLmludGVybmFsRm9ybWF0ID0gR0xfRk9STUFUUy5SR0JBO1xuICAgIHRoaXMuZm9ybWF0ID0gR0xfRk9STUFUUy5SR0JBO1xuICAgIHRoaXMuc2FtcGxlclR5cGUgPSAwO1xuICB9XG59XG5cbmV4cG9ydCB7IEdsVGV4dHVyZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xUZXh0dXJlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgZ2xVcGxvYWRCdWZmZXJJbWFnZVJlc291cmNlID0ge1xuICBpZDogXCJpbWFnZVwiLFxuICB1cGxvYWQoc291cmNlLCBnbFRleHR1cmUsIGdsKSB7XG4gICAgaWYgKGdsVGV4dHVyZS53aWR0aCA9PT0gc291cmNlLndpZHRoIHx8IGdsVGV4dHVyZS5oZWlnaHQgPT09IHNvdXJjZS5oZWlnaHQpIHtcbiAgICAgIGdsLnRleFN1YkltYWdlMkQoXG4gICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIGdsVGV4dHVyZS5mb3JtYXQsXG4gICAgICAgIGdsVGV4dHVyZS50eXBlLFxuICAgICAgICBzb3VyY2UucmVzb3VyY2VcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLnRleEltYWdlMkQoXG4gICAgICAgIGdsVGV4dHVyZS50YXJnZXQsXG4gICAgICAgIDAsXG4gICAgICAgIGdsVGV4dHVyZS5pbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgc291cmNlLndpZHRoLFxuICAgICAgICBzb3VyY2UuaGVpZ2h0LFxuICAgICAgICAwLFxuICAgICAgICBnbFRleHR1cmUuZm9ybWF0LFxuICAgICAgICBnbFRleHR1cmUudHlwZSxcbiAgICAgICAgc291cmNlLnJlc291cmNlXG4gICAgICApO1xuICAgIH1cbiAgICBnbFRleHR1cmUud2lkdGggPSBzb3VyY2Uud2lkdGg7XG4gICAgZ2xUZXh0dXJlLmhlaWdodCA9IHNvdXJjZS5oZWlnaHQ7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdsVXBsb2FkQnVmZmVySW1hZ2VSZXNvdXJjZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xVcGxvYWRCdWZmZXJJbWFnZVJlc291cmNlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgY29tcHJlc3NlZEZvcm1hdE1hcCA9IHtcbiAgXCJiYzEtcmdiYS11bm9ybVwiOiB0cnVlLFxuICBcImJjMS1yZ2JhLXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJiYzItcmdiYS11bm9ybVwiOiB0cnVlLFxuICBcImJjMi1yZ2JhLXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJiYzMtcmdiYS11bm9ybVwiOiB0cnVlLFxuICBcImJjMy1yZ2JhLXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJiYzQtci11bm9ybVwiOiB0cnVlLFxuICBcImJjNC1yLXNub3JtXCI6IHRydWUsXG4gIFwiYmM1LXJnLXVub3JtXCI6IHRydWUsXG4gIFwiYmM1LXJnLXNub3JtXCI6IHRydWUsXG4gIFwiYmM2aC1yZ2ItdWZsb2F0XCI6IHRydWUsXG4gIFwiYmM2aC1yZ2ItZmxvYXRcIjogdHJ1ZSxcbiAgXCJiYzctcmdiYS11bm9ybVwiOiB0cnVlLFxuICBcImJjNy1yZ2JhLXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgLy8gRVRDMiBjb21wcmVzc2VkIGZvcm1hdHMgdXNhYmxlIGlmIFwidGV4dHVyZS1jb21wcmVzc2lvbi1ldGMyXCIgaXMgYm90aFxuICAvLyBzdXBwb3J0ZWQgYnkgdGhlIGRldmljZS91c2VyIGFnZW50IGFuZCBlbmFibGVkIGluIHJlcXVlc3REZXZpY2UuXG4gIFwiZXRjMi1yZ2I4dW5vcm1cIjogdHJ1ZSxcbiAgXCJldGMyLXJnYjh1bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiZXRjMi1yZ2I4YTF1bm9ybVwiOiB0cnVlLFxuICBcImV0YzItcmdiOGExdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImV0YzItcmdiYTh1bm9ybVwiOiB0cnVlLFxuICBcImV0YzItcmdiYTh1bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiZWFjLXIxMXVub3JtXCI6IHRydWUsXG4gIFwiZWFjLXIxMXNub3JtXCI6IHRydWUsXG4gIFwiZWFjLXJnMTF1bm9ybVwiOiB0cnVlLFxuICBcImVhYy1yZzExc25vcm1cIjogdHJ1ZSxcbiAgLy8gQVNUQyBjb21wcmVzc2VkIGZvcm1hdHMgdXNhYmxlIGlmIFwidGV4dHVyZS1jb21wcmVzc2lvbi1hc3RjXCIgaXMgYm90aFxuICAvLyBzdXBwb3J0ZWQgYnkgdGhlIGRldmljZS91c2VyIGFnZW50IGFuZCBlbmFibGVkIGluIHJlcXVlc3REZXZpY2UuXG4gIFwiYXN0Yy00eDQtdW5vcm1cIjogdHJ1ZSxcbiAgXCJhc3RjLTR4NC11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYXN0Yy01eDQtdW5vcm1cIjogdHJ1ZSxcbiAgXCJhc3RjLTV4NC11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYXN0Yy01eDUtdW5vcm1cIjogdHJ1ZSxcbiAgXCJhc3RjLTV4NS11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYXN0Yy02eDUtdW5vcm1cIjogdHJ1ZSxcbiAgXCJhc3RjLTZ4NS11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYXN0Yy02eDYtdW5vcm1cIjogdHJ1ZSxcbiAgXCJhc3RjLTZ4Ni11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYXN0Yy04eDUtdW5vcm1cIjogdHJ1ZSxcbiAgXCJhc3RjLTh4NS11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYXN0Yy04eDYtdW5vcm1cIjogdHJ1ZSxcbiAgXCJhc3RjLTh4Ni11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYXN0Yy04eDgtdW5vcm1cIjogdHJ1ZSxcbiAgXCJhc3RjLTh4OC11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYXN0Yy0xMHg1LXVub3JtXCI6IHRydWUsXG4gIFwiYXN0Yy0xMHg1LXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJhc3RjLTEweDYtdW5vcm1cIjogdHJ1ZSxcbiAgXCJhc3RjLTEweDYtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImFzdGMtMTB4OC11bm9ybVwiOiB0cnVlLFxuICBcImFzdGMtMTB4OC11bm9ybS1zcmdiXCI6IHRydWUsXG4gIFwiYXN0Yy0xMHgxMC11bm9ybVwiOiB0cnVlLFxuICBcImFzdGMtMTB4MTAtdW5vcm0tc3JnYlwiOiB0cnVlLFxuICBcImFzdGMtMTJ4MTAtdW5vcm1cIjogdHJ1ZSxcbiAgXCJhc3RjLTEyeDEwLXVub3JtLXNyZ2JcIjogdHJ1ZSxcbiAgXCJhc3RjLTEyeDEyLXVub3JtXCI6IHRydWUsXG4gIFwiYXN0Yy0xMngxMi11bm9ybS1zcmdiXCI6IHRydWVcbn07XG5jb25zdCBnbFVwbG9hZENvbXByZXNzZWRUZXh0dXJlUmVzb3VyY2UgPSB7XG4gIGlkOiBcImNvbXByZXNzZWRcIixcbiAgdXBsb2FkKHNvdXJjZSwgZ2xUZXh0dXJlLCBnbCkge1xuICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19BTElHTk1FTlQsIDQpO1xuICAgIGxldCBtaXBXaWR0aCA9IHNvdXJjZS5waXhlbFdpZHRoO1xuICAgIGxldCBtaXBIZWlnaHQgPSBzb3VyY2UucGl4ZWxIZWlnaHQ7XG4gICAgY29uc3QgY29tcHJlc3NlZCA9ICEhY29tcHJlc3NlZEZvcm1hdE1hcFtzb3VyY2UuZm9ybWF0XTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZS5yZXNvdXJjZS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbGV2ZWxCdWZmZXIgPSBzb3VyY2UucmVzb3VyY2VbaV07XG4gICAgICBpZiAoY29tcHJlc3NlZCkge1xuICAgICAgICBnbC5jb21wcmVzc2VkVGV4SW1hZ2UyRChcbiAgICAgICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgICAgIGksXG4gICAgICAgICAgZ2xUZXh0dXJlLmludGVybmFsRm9ybWF0LFxuICAgICAgICAgIG1pcFdpZHRoLFxuICAgICAgICAgIG1pcEhlaWdodCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIGxldmVsQnVmZmVyXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnbC50ZXhJbWFnZTJEKFxuICAgICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBnbFRleHR1cmUuaW50ZXJuYWxGb3JtYXQsXG4gICAgICAgICAgbWlwV2lkdGgsXG4gICAgICAgICAgbWlwSGVpZ2h0LFxuICAgICAgICAgIDAsXG4gICAgICAgICAgZ2xUZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgICBnbFRleHR1cmUudHlwZSxcbiAgICAgICAgICBsZXZlbEJ1ZmZlclxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgbWlwV2lkdGggPSBNYXRoLm1heChtaXBXaWR0aCA+PiAxLCAxKTtcbiAgICAgIG1pcEhlaWdodCA9IE1hdGgubWF4KG1pcEhlaWdodCA+PiAxLCAxKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdsVXBsb2FkQ29tcHJlc3NlZFRleHR1cmVSZXNvdXJjZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgZ2xVcGxvYWRJbWFnZVJlc291cmNlID0ge1xuICBpZDogXCJpbWFnZVwiLFxuICB1cGxvYWQoc291cmNlLCBnbFRleHR1cmUsIGdsLCB3ZWJHTFZlcnNpb24pIHtcbiAgICBjb25zdCBwcmVtdWx0aXBsaWVkQWxwaGEgPSBzb3VyY2UuYWxwaGFNb2RlID09PSBcInByZW11bHRpcGx5LWFscGhhLW9uLXVwbG9hZFwiO1xuICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgcHJlbXVsdGlwbGllZEFscGhhKTtcbiAgICBjb25zdCBnbFdpZHRoID0gZ2xUZXh0dXJlLndpZHRoO1xuICAgIGNvbnN0IGdsSGVpZ2h0ID0gZ2xUZXh0dXJlLmhlaWdodDtcbiAgICBjb25zdCB0ZXh0dXJlV2lkdGggPSBzb3VyY2UucGl4ZWxXaWR0aDtcbiAgICBjb25zdCB0ZXh0dXJlSGVpZ2h0ID0gc291cmNlLnBpeGVsSGVpZ2h0O1xuICAgIGNvbnN0IHJlc291cmNlV2lkdGggPSBzb3VyY2UucmVzb3VyY2VXaWR0aDtcbiAgICBjb25zdCByZXNvdXJjZUhlaWdodCA9IHNvdXJjZS5yZXNvdXJjZUhlaWdodDtcbiAgICBpZiAocmVzb3VyY2VXaWR0aCA8IHRleHR1cmVXaWR0aCB8fCByZXNvdXJjZUhlaWdodCA8IHRleHR1cmVIZWlnaHQpIHtcbiAgICAgIGlmIChnbFdpZHRoICE9PSB0ZXh0dXJlV2lkdGggfHwgZ2xIZWlnaHQgIT09IHRleHR1cmVIZWlnaHQpIHtcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgICBnbFRleHR1cmUudGFyZ2V0LFxuICAgICAgICAgIDAsXG4gICAgICAgICAgZ2xUZXh0dXJlLmludGVybmFsRm9ybWF0LFxuICAgICAgICAgIHRleHR1cmVXaWR0aCxcbiAgICAgICAgICB0ZXh0dXJlSGVpZ2h0LFxuICAgICAgICAgIDAsXG4gICAgICAgICAgZ2xUZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgICBnbFRleHR1cmUudHlwZSxcbiAgICAgICAgICBudWxsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAod2ViR0xWZXJzaW9uID09PSAyKSB7XG4gICAgICAgIGdsLnRleFN1YkltYWdlMkQoXG4gICAgICAgICAgZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIDAsXG4gICAgICAgICAgMCxcbiAgICAgICAgICByZXNvdXJjZVdpZHRoLFxuICAgICAgICAgIHJlc291cmNlSGVpZ2h0LFxuICAgICAgICAgIGdsVGV4dHVyZS5mb3JtYXQsXG4gICAgICAgICAgZ2xUZXh0dXJlLnR5cGUsXG4gICAgICAgICAgc291cmNlLnJlc291cmNlXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnbC50ZXhTdWJJbWFnZTJEKFxuICAgICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIDAsXG4gICAgICAgICAgZ2xUZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgICBnbFRleHR1cmUudHlwZSxcbiAgICAgICAgICBzb3VyY2UucmVzb3VyY2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGdsV2lkdGggPT09IHRleHR1cmVXaWR0aCB8fCBnbEhlaWdodCA9PT0gdGV4dHVyZUhlaWdodCkge1xuICAgICAgZ2wudGV4U3ViSW1hZ2UyRChcbiAgICAgICAgZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgZ2xUZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgZ2xUZXh0dXJlLnR5cGUsXG4gICAgICAgIHNvdXJjZS5yZXNvdXJjZVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHdlYkdMVmVyc2lvbiA9PT0gMikge1xuICAgICAgZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgZ2xUZXh0dXJlLnRhcmdldCxcbiAgICAgICAgMCxcbiAgICAgICAgZ2xUZXh0dXJlLmludGVybmFsRm9ybWF0LFxuICAgICAgICB0ZXh0dXJlV2lkdGgsXG4gICAgICAgIHRleHR1cmVIZWlnaHQsXG4gICAgICAgIDAsXG4gICAgICAgIGdsVGV4dHVyZS5mb3JtYXQsXG4gICAgICAgIGdsVGV4dHVyZS50eXBlLFxuICAgICAgICBzb3VyY2UucmVzb3VyY2VcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLnRleEltYWdlMkQoXG4gICAgICAgIGdsVGV4dHVyZS50YXJnZXQsXG4gICAgICAgIDAsXG4gICAgICAgIGdsVGV4dHVyZS5pbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgZ2xUZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgZ2xUZXh0dXJlLnR5cGUsXG4gICAgICAgIHNvdXJjZS5yZXNvdXJjZVxuICAgICAgKTtcbiAgICB9XG4gICAgZ2xUZXh0dXJlLndpZHRoID0gdGV4dHVyZVdpZHRoO1xuICAgIGdsVGV4dHVyZS5oZWlnaHQgPSB0ZXh0dXJlSGVpZ2h0O1xuICB9XG59O1xuXG5leHBvcnQgeyBnbFVwbG9hZEltYWdlUmVzb3VyY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsVXBsb2FkSW1hZ2VSZXNvdXJjZS5tanMubWFwXG4iLCJpbXBvcnQgeyBnbFVwbG9hZEltYWdlUmVzb3VyY2UgfSBmcm9tICcuL2dsVXBsb2FkSW1hZ2VSZXNvdXJjZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IGdsVXBsb2FkVmlkZW9SZXNvdXJjZSA9IHtcbiAgaWQ6IFwidmlkZW9cIixcbiAgdXBsb2FkKHNvdXJjZSwgZ2xUZXh0dXJlLCBnbCwgd2ViR0xWZXJzaW9uKSB7XG4gICAgaWYgKCFzb3VyY2UuaXNWYWxpZCkge1xuICAgICAgZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgZ2xUZXh0dXJlLnRhcmdldCxcbiAgICAgICAgMCxcbiAgICAgICAgZ2xUZXh0dXJlLmludGVybmFsRm9ybWF0LFxuICAgICAgICAxLFxuICAgICAgICAxLFxuICAgICAgICAwLFxuICAgICAgICBnbFRleHR1cmUuZm9ybWF0LFxuICAgICAgICBnbFRleHR1cmUudHlwZSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZ2xVcGxvYWRJbWFnZVJlc291cmNlLnVwbG9hZChzb3VyY2UsIGdsVGV4dHVyZSwgZ2wsIHdlYkdMVmVyc2lvbik7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdsVXBsb2FkVmlkZW9SZXNvdXJjZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xVcGxvYWRWaWRlb1Jlc291cmNlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3Qgc2NhbGVNb2RlVG9HbEZpbHRlciA9IHtcbiAgbGluZWFyOiA5NzI5LFxuICBuZWFyZXN0OiA5NzI4XG59O1xuY29uc3QgbWlwbWFwU2NhbGVNb2RlVG9HbEZpbHRlciA9IHtcbiAgbGluZWFyOiB7XG4gICAgbGluZWFyOiA5OTg3LFxuICAgIG5lYXJlc3Q6IDk5ODVcbiAgfSxcbiAgbmVhcmVzdDoge1xuICAgIGxpbmVhcjogOTk4NixcbiAgICBuZWFyZXN0OiA5OTg0XG4gIH1cbn07XG5jb25zdCB3cmFwTW9kZVRvR2xBZGRyZXNzID0ge1xuICBcImNsYW1wLXRvLWVkZ2VcIjogMzMwNzEsXG4gIHJlcGVhdDogMTA0OTcsXG4gIFwibWlycm9yLXJlcGVhdFwiOiAzMzY0OFxufTtcbmNvbnN0IGNvbXBhcmVNb2RlVG9HbENvbXBhcmUgPSB7XG4gIG5ldmVyOiA1MTIsXG4gIGxlc3M6IDUxMyxcbiAgZXF1YWw6IDUxNCxcbiAgXCJsZXNzLWVxdWFsXCI6IDUxNSxcbiAgZ3JlYXRlcjogNTE2LFxuICBcIm5vdC1lcXVhbFwiOiA1MTcsXG4gIFwiZ3JlYXRlci1lcXVhbFwiOiA1MTgsXG4gIGFsd2F5czogNTE5XG59O1xuXG5leHBvcnQgeyBjb21wYXJlTW9kZVRvR2xDb21wYXJlLCBtaXBtYXBTY2FsZU1vZGVUb0dsRmlsdGVyLCBzY2FsZU1vZGVUb0dsRmlsdGVyLCB3cmFwTW9kZVRvR2xBZGRyZXNzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXhpVG9HbE1hcHMubWpzLm1hcFxuIiwiaW1wb3J0IHsgd3JhcE1vZGVUb0dsQWRkcmVzcywgc2NhbGVNb2RlVG9HbEZpbHRlciwgbWlwbWFwU2NhbGVNb2RlVG9HbEZpbHRlciwgY29tcGFyZU1vZGVUb0dsQ29tcGFyZSB9IGZyb20gJy4vcGl4aVRvR2xNYXBzLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gYXBwbHlTdHlsZVBhcmFtcyhzdHlsZSwgZ2wsIG1pcG1hcHMsIGFuaXNvdHJvcGljRXh0LCBnbEZ1bmN0aW9uTmFtZSwgZmlyc3RQYXJhbSwgZm9yY2VDbGFtcCkge1xuICBjb25zdCBjYXN0UGFyYW0gPSBmaXJzdFBhcmFtO1xuICBjb25zdCB3cmFwTW9kZVMgPSB3cmFwTW9kZVRvR2xBZGRyZXNzW2ZvcmNlQ2xhbXAgPyBcImNsYW1wLXRvLWVkZ2VcIiA6IHN0eWxlLmFkZHJlc3NNb2RlVV07XG4gIGNvbnN0IHdyYXBNb2RlVCA9IHdyYXBNb2RlVG9HbEFkZHJlc3NbZm9yY2VDbGFtcCA/IFwiY2xhbXAtdG8tZWRnZVwiIDogc3R5bGUuYWRkcmVzc01vZGVWXTtcbiAgY29uc3Qgd3JhcE1vZGVSID0gd3JhcE1vZGVUb0dsQWRkcmVzc1tmb3JjZUNsYW1wID8gXCJjbGFtcC10by1lZGdlXCIgOiBzdHlsZS5hZGRyZXNzTW9kZVddO1xuICBnbFtnbEZ1bmN0aW9uTmFtZV0oY2FzdFBhcmFtLCBnbC5URVhUVVJFX1dSQVBfUywgd3JhcE1vZGVTKTtcbiAgZ2xbZ2xGdW5jdGlvbk5hbWVdKGNhc3RQYXJhbSwgZ2wuVEVYVFVSRV9XUkFQX1QsIHdyYXBNb2RlVCk7XG4gIGlmIChnbC5URVhUVVJFX1dSQVBfUilcbiAgICBnbFtnbEZ1bmN0aW9uTmFtZV0oY2FzdFBhcmFtLCBnbC5URVhUVVJFX1dSQVBfUiwgd3JhcE1vZGVSKTtcbiAgZ2xbZ2xGdW5jdGlvbk5hbWVdKGNhc3RQYXJhbSwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBzY2FsZU1vZGVUb0dsRmlsdGVyW3N0eWxlLm1hZ0ZpbHRlcl0pO1xuICBpZiAobWlwbWFwcykge1xuICAgIGNvbnN0IGdsRmlsdGVyTW9kZSA9IG1pcG1hcFNjYWxlTW9kZVRvR2xGaWx0ZXJbc3R5bGUubWluRmlsdGVyXVtzdHlsZS5taXBtYXBGaWx0ZXJdO1xuICAgIGdsW2dsRnVuY3Rpb25OYW1lXShjYXN0UGFyYW0sIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2xGaWx0ZXJNb2RlKTtcbiAgfSBlbHNlIHtcbiAgICBnbFtnbEZ1bmN0aW9uTmFtZV0oY2FzdFBhcmFtLCBnbC5URVhUVVJFX01JTl9GSUxURVIsIHNjYWxlTW9kZVRvR2xGaWx0ZXJbc3R5bGUubWluRmlsdGVyXSk7XG4gIH1cbiAgaWYgKGFuaXNvdHJvcGljRXh0ICYmIHN0eWxlLm1heEFuaXNvdHJvcHkgPiAxKSB7XG4gICAgY29uc3QgbGV2ZWwgPSBNYXRoLm1pbihzdHlsZS5tYXhBbmlzb3Ryb3B5LCBnbC5nZXRQYXJhbWV0ZXIoYW5pc290cm9waWNFeHQuTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUKSk7XG4gICAgZ2xbZ2xGdW5jdGlvbk5hbWVdKGNhc3RQYXJhbSwgYW5pc290cm9waWNFeHQuVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIGxldmVsKTtcbiAgfVxuICBpZiAoc3R5bGUuY29tcGFyZSkge1xuICAgIGdsW2dsRnVuY3Rpb25OYW1lXShjYXN0UGFyYW0sIGdsLlRFWFRVUkVfQ09NUEFSRV9GVU5DLCBjb21wYXJlTW9kZVRvR2xDb21wYXJlW3N0eWxlLmNvbXBhcmVdKTtcbiAgfVxufVxuXG5leHBvcnQgeyBhcHBseVN0eWxlUGFyYW1zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHBseVN0eWxlUGFyYW1zLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gbWFwRm9ybWF0VG9HbEZvcm1hdChnbCkge1xuICByZXR1cm4ge1xuICAgIC8vIDgtYml0IGZvcm1hdHNcbiAgICByOHVub3JtOiBnbC5SRUQsXG4gICAgcjhzbm9ybTogZ2wuUkVELFxuICAgIHI4dWludDogZ2wuUkVELFxuICAgIHI4c2ludDogZ2wuUkVELFxuICAgIC8vIDE2LWJpdCBmb3JtYXRzXG4gICAgcjE2dWludDogZ2wuUkVELFxuICAgIHIxNnNpbnQ6IGdsLlJFRCxcbiAgICByMTZmbG9hdDogZ2wuUkVELFxuICAgIHJnOHVub3JtOiBnbC5SRyxcbiAgICByZzhzbm9ybTogZ2wuUkcsXG4gICAgcmc4dWludDogZ2wuUkcsXG4gICAgcmc4c2ludDogZ2wuUkcsXG4gICAgLy8gMzItYml0IGZvcm1hdHNcbiAgICByMzJ1aW50OiBnbC5SRUQsXG4gICAgcjMyc2ludDogZ2wuUkVELFxuICAgIHIzMmZsb2F0OiBnbC5SRUQsXG4gICAgcmcxNnVpbnQ6IGdsLlJHLFxuICAgIHJnMTZzaW50OiBnbC5SRyxcbiAgICByZzE2ZmxvYXQ6IGdsLlJHLFxuICAgIHJnYmE4dW5vcm06IGdsLlJHQkEsXG4gICAgXCJyZ2JhOHVub3JtLXNyZ2JcIjogZ2wuUkdCQSxcbiAgICAvLyBQYWNrZWQgMzItYml0IGZvcm1hdHNcbiAgICByZ2JhOHNub3JtOiBnbC5SR0JBLFxuICAgIHJnYmE4dWludDogZ2wuUkdCQSxcbiAgICByZ2JhOHNpbnQ6IGdsLlJHQkEsXG4gICAgYmdyYTh1bm9ybTogZ2wuUkdCQSxcbiAgICBcImJncmE4dW5vcm0tc3JnYlwiOiBnbC5SR0JBLFxuICAgIHJnYjllNXVmbG9hdDogZ2wuUkdCLFxuICAgIHJnYjEwYTJ1bm9ybTogZ2wuUkdCQSxcbiAgICByZzExYjEwdWZsb2F0OiBnbC5SR0IsXG4gICAgLy8gNjQtYml0IGZvcm1hdHNcbiAgICByZzMydWludDogZ2wuUkcsXG4gICAgcmczMnNpbnQ6IGdsLlJHLFxuICAgIHJnMzJmbG9hdDogZ2wuUkcsXG4gICAgcmdiYTE2dWludDogZ2wuUkdCQSxcbiAgICByZ2JhMTZzaW50OiBnbC5SR0JBLFxuICAgIHJnYmExNmZsb2F0OiBnbC5SR0JBLFxuICAgIC8vIDEyOC1iaXQgZm9ybWF0c1xuICAgIHJnYmEzMnVpbnQ6IGdsLlJHQkEsXG4gICAgcmdiYTMyc2ludDogZ2wuUkdCQSxcbiAgICByZ2JhMzJmbG9hdDogZ2wuUkdCQSxcbiAgICAvLyBEZXB0aC9zdGVuY2lsIGZvcm1hdHNcbiAgICBzdGVuY2lsODogZ2wuU1RFTkNJTF9JTkRFWDgsXG4gICAgZGVwdGgxNnVub3JtOiBnbC5ERVBUSF9DT01QT05FTlQsXG4gICAgZGVwdGgyNHBsdXM6IGdsLkRFUFRIX0NPTVBPTkVOVCxcbiAgICBcImRlcHRoMjRwbHVzLXN0ZW5jaWw4XCI6IGdsLkRFUFRIX1NURU5DSUwsXG4gICAgZGVwdGgzMmZsb2F0OiBnbC5ERVBUSF9DT01QT05FTlQsXG4gICAgXCJkZXB0aDMyZmxvYXQtc3RlbmNpbDhcIjogZ2wuREVQVEhfU1RFTkNJTFxuICB9O1xufVxuXG5leHBvcnQgeyBtYXBGb3JtYXRUb0dsRm9ybWF0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBGb3JtYXRUb0dsRm9ybWF0Lm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gbWFwRm9ybWF0VG9HbEludGVybmFsRm9ybWF0KGdsLCBleHRlbnNpb25zKSB7XG4gIGxldCBzcmdiID0ge307XG4gIGxldCBiZ3JhOHVub3JtID0gZ2wuUkdCQTtcbiAgaWYgKGdsIGluc3RhbmNlb2YgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkge1xuICAgIHNyZ2IgPSB7XG4gICAgICBcInJnYmE4dW5vcm0tc3JnYlwiOiBnbC5TUkdCOF9BTFBIQTgsXG4gICAgICBcImJncmE4dW5vcm0tc3JnYlwiOiBnbC5TUkdCOF9BTFBIQThcbiAgICB9O1xuICAgIGJncmE4dW5vcm0gPSBnbC5SR0JBODtcbiAgfSBlbHNlIGlmIChleHRlbnNpb25zLnNyZ2IpIHtcbiAgICBzcmdiID0ge1xuICAgICAgXCJyZ2JhOHVub3JtLXNyZ2JcIjogZXh0ZW5zaW9ucy5zcmdiLlNSR0I4X0FMUEhBOF9FWFQsXG4gICAgICBcImJncmE4dW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLnNyZ2IuU1JHQjhfQUxQSEE4X0VYVFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICAvLyA4LWJpdCBmb3JtYXRzXG4gICAgcjh1bm9ybTogZ2wuUjgsXG4gICAgcjhzbm9ybTogZ2wuUjhfU05PUk0sXG4gICAgcjh1aW50OiBnbC5SOFVJLFxuICAgIHI4c2ludDogZ2wuUjhJLFxuICAgIC8vIDE2LWJpdCBmb3JtYXRzXG4gICAgcjE2dWludDogZ2wuUjE2VUksXG4gICAgcjE2c2ludDogZ2wuUjE2SSxcbiAgICByMTZmbG9hdDogZ2wuUjE2RixcbiAgICByZzh1bm9ybTogZ2wuUkc4LFxuICAgIHJnOHNub3JtOiBnbC5SRzhfU05PUk0sXG4gICAgcmc4dWludDogZ2wuUkc4VUksXG4gICAgcmc4c2ludDogZ2wuUkc4SSxcbiAgICAvLyAzMi1iaXQgZm9ybWF0c1xuICAgIHIzMnVpbnQ6IGdsLlIzMlVJLFxuICAgIHIzMnNpbnQ6IGdsLlIzMkksXG4gICAgcjMyZmxvYXQ6IGdsLlIzMkYsXG4gICAgcmcxNnVpbnQ6IGdsLlJHMTZVSSxcbiAgICByZzE2c2ludDogZ2wuUkcxNkksXG4gICAgcmcxNmZsb2F0OiBnbC5SRzE2RixcbiAgICByZ2JhOHVub3JtOiBnbC5SR0JBLFxuICAgIC4uLnNyZ2IsXG4gICAgLy8gUGFja2VkIDMyLWJpdCBmb3JtYXRzXG4gICAgcmdiYThzbm9ybTogZ2wuUkdCQThfU05PUk0sXG4gICAgcmdiYTh1aW50OiBnbC5SR0JBOFVJLFxuICAgIHJnYmE4c2ludDogZ2wuUkdCQThJLFxuICAgIGJncmE4dW5vcm0sXG4gICAgcmdiOWU1dWZsb2F0OiBnbC5SR0I5X0U1LFxuICAgIHJnYjEwYTJ1bm9ybTogZ2wuUkdCMTBfQTIsXG4gICAgcmcxMWIxMHVmbG9hdDogZ2wuUjExRl9HMTFGX0IxMEYsXG4gICAgLy8gNjQtYml0IGZvcm1hdHNcbiAgICByZzMydWludDogZ2wuUkczMlVJLFxuICAgIHJnMzJzaW50OiBnbC5SRzMySSxcbiAgICByZzMyZmxvYXQ6IGdsLlJHMzJGLFxuICAgIHJnYmExNnVpbnQ6IGdsLlJHQkExNlVJLFxuICAgIHJnYmExNnNpbnQ6IGdsLlJHQkExNkksXG4gICAgcmdiYTE2ZmxvYXQ6IGdsLlJHQkExNkYsXG4gICAgLy8gMTI4LWJpdCBmb3JtYXRzXG4gICAgcmdiYTMydWludDogZ2wuUkdCQTMyVUksXG4gICAgcmdiYTMyc2ludDogZ2wuUkdCQTMySSxcbiAgICByZ2JhMzJmbG9hdDogZ2wuUkdCQTMyRixcbiAgICAvLyBEZXB0aC9zdGVuY2lsIGZvcm1hdHNcbiAgICBzdGVuY2lsODogZ2wuU1RFTkNJTF9JTkRFWDgsXG4gICAgZGVwdGgxNnVub3JtOiBnbC5ERVBUSF9DT01QT05FTlQxNixcbiAgICBkZXB0aDI0cGx1czogZ2wuREVQVEhfQ09NUE9ORU5UMjQsXG4gICAgXCJkZXB0aDI0cGx1cy1zdGVuY2lsOFwiOiBnbC5ERVBUSDI0X1NURU5DSUw4LFxuICAgIGRlcHRoMzJmbG9hdDogZ2wuREVQVEhfQ09NUE9ORU5UMzJGLFxuICAgIFwiZGVwdGgzMmZsb2F0LXN0ZW5jaWw4XCI6IGdsLkRFUFRIMzJGX1NURU5DSUw4LFxuICAgIC8vIENvbXByZXNzZWQgZm9ybWF0c1xuICAgIC4uLmV4dGVuc2lvbnMuczN0YyA/IHtcbiAgICAgIFwiYmMxLXJnYmEtdW5vcm1cIjogZXh0ZW5zaW9ucy5zM3RjLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDFfRVhULFxuICAgICAgXCJiYzItcmdiYS11bm9ybVwiOiBleHRlbnNpb25zLnMzdGMuQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQsXG4gICAgICBcImJjMy1yZ2JhLXVub3JtXCI6IGV4dGVuc2lvbnMuczN0Yy5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVFxuICAgIH0gOiB7fSxcbiAgICAuLi5leHRlbnNpb25zLnMzdGNfc1JHQiA/IHtcbiAgICAgIFwiYmMxLXJnYmEtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLnMzdGNfc1JHQi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQxX0VYVCxcbiAgICAgIFwiYmMyLXJnYmEtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLnMzdGNfc1JHQi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQzX0VYVCxcbiAgICAgIFwiYmMzLXJnYmEtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLnMzdGNfc1JHQi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQ1X0VYVFxuICAgIH0gOiB7fSxcbiAgICAuLi5leHRlbnNpb25zLnJndGMgPyB7XG4gICAgICBcImJjNC1yLXVub3JtXCI6IGV4dGVuc2lvbnMucmd0Yy5DT01QUkVTU0VEX1JFRF9SR1RDMV9FWFQsXG4gICAgICBcImJjNC1yLXNub3JtXCI6IGV4dGVuc2lvbnMucmd0Yy5DT01QUkVTU0VEX1NJR05FRF9SRURfUkdUQzFfRVhULFxuICAgICAgXCJiYzUtcmctdW5vcm1cIjogZXh0ZW5zaW9ucy5yZ3RjLkNPTVBSRVNTRURfUkVEX0dSRUVOX1JHVEMyX0VYVCxcbiAgICAgIFwiYmM1LXJnLXNub3JtXCI6IGV4dGVuc2lvbnMucmd0Yy5DT01QUkVTU0VEX1NJR05FRF9SRURfR1JFRU5fUkdUQzJfRVhUXG4gICAgfSA6IHt9LFxuICAgIC4uLmV4dGVuc2lvbnMuYnB0YyA/IHtcbiAgICAgIFwiYmM2aC1yZ2ItZmxvYXRcIjogZXh0ZW5zaW9ucy5icHRjLkNPTVBSRVNTRURfUkdCX0JQVENfU0lHTkVEX0ZMT0FUX0VYVCxcbiAgICAgIFwiYmM2aC1yZ2ItdWZsb2F0XCI6IGV4dGVuc2lvbnMuYnB0Yy5DT01QUkVTU0VEX1JHQl9CUFRDX1VOU0lHTkVEX0ZMT0FUX0VYVCxcbiAgICAgIFwiYmM3LXJnYmEtdW5vcm1cIjogZXh0ZW5zaW9ucy5icHRjLkNPTVBSRVNTRURfUkdCQV9CUFRDX1VOT1JNX0VYVCxcbiAgICAgIFwiYmM3LXJnYmEtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmJwdGMuQ09NUFJFU1NFRF9TUkdCX0FMUEhBX0JQVENfVU5PUk1fRVhUXG4gICAgfSA6IHt9LFxuICAgIC4uLmV4dGVuc2lvbnMuZXRjID8ge1xuICAgICAgXCJldGMyLXJnYjh1bm9ybVwiOiBleHRlbnNpb25zLmV0Yy5DT01QUkVTU0VEX1JHQjhfRVRDMixcbiAgICAgIFwiZXRjMi1yZ2I4dW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmV0Yy5DT01QUkVTU0VEX1NSR0I4X0VUQzIsXG4gICAgICBcImV0YzItcmdiOGExdW5vcm1cIjogZXh0ZW5zaW9ucy5ldGMuQ09NUFJFU1NFRF9SR0I4X1BVTkNIVEhST1VHSF9BTFBIQTFfRVRDMixcbiAgICAgIFwiZXRjMi1yZ2I4YTF1bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuZXRjLkNPTVBSRVNTRURfU1JHQjhfUFVOQ0hUSFJPVUdIX0FMUEhBMV9FVEMyLFxuICAgICAgXCJldGMyLXJnYmE4dW5vcm1cIjogZXh0ZW5zaW9ucy5ldGMuQ09NUFJFU1NFRF9SR0JBOF9FVEMyX0VBQyxcbiAgICAgIFwiZXRjMi1yZ2JhOHVub3JtLXNyZ2JcIjogZXh0ZW5zaW9ucy5ldGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfRVRDMl9FQUMsXG4gICAgICBcImVhYy1yMTF1bm9ybVwiOiBleHRlbnNpb25zLmV0Yy5DT01QUkVTU0VEX1IxMV9FQUMsXG4gICAgICAvLyAnZWFjLXIxMXNub3JtJ1xuICAgICAgXCJlYWMtcmcxMXVub3JtXCI6IGV4dGVuc2lvbnMuZXRjLkNPTVBSRVNTRURfU0lHTkVEX1JHMTFfRUFDXG4gICAgICAvLyAnZWFjLXJnMTFzbm9ybSdcbiAgICB9IDoge30sXG4gICAgLi4uZXh0ZW5zaW9ucy5hc3RjID8ge1xuICAgICAgXCJhc3RjLTR4NC11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfNHg0X0tIUixcbiAgICAgIFwiYXN0Yy00eDQtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ180eDRfS0hSLFxuICAgICAgXCJhc3RjLTV4NC11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg0X0tIUixcbiAgICAgIFwiYXN0Yy01eDQtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ181eDRfS0hSLFxuICAgICAgXCJhc3RjLTV4NS11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg1X0tIUixcbiAgICAgIFwiYXN0Yy01eDUtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ181eDVfS0hSLFxuICAgICAgXCJhc3RjLTZ4NS11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfNng1X0tIUixcbiAgICAgIFwiYXN0Yy02eDUtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ182eDVfS0hSLFxuICAgICAgXCJhc3RjLTZ4Ni11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfNng2X0tIUixcbiAgICAgIFwiYXN0Yy02eDYtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ182eDZfS0hSLFxuICAgICAgXCJhc3RjLTh4NS11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg1X0tIUixcbiAgICAgIFwiYXN0Yy04eDUtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDVfS0hSLFxuICAgICAgXCJhc3RjLTh4Ni11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg2X0tIUixcbiAgICAgIFwiYXN0Yy04eDYtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDZfS0hSLFxuICAgICAgXCJhc3RjLTh4OC11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg4X0tIUixcbiAgICAgIFwiYXN0Yy04eDgtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDhfS0hSLFxuICAgICAgXCJhc3RjLTEweDUtdW5vcm1cIjogZXh0ZW5zaW9ucy5hc3RjLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDVfS0hSLFxuICAgICAgXCJhc3RjLTEweDUtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg1X0tIUixcbiAgICAgIFwiYXN0Yy0xMHg2LXVub3JtXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg2X0tIUixcbiAgICAgIFwiYXN0Yy0xMHg2LXVub3JtLXNyZ2JcIjogZXh0ZW5zaW9ucy5hc3RjLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4Nl9LSFIsXG4gICAgICBcImFzdGMtMTB4OC11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4OF9LSFIsXG4gICAgICBcImFzdGMtMTB4OC11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDhfS0hSLFxuICAgICAgXCJhc3RjLTEweDEwLXVub3JtXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHgxMF9LSFIsXG4gICAgICBcImFzdGMtMTB4MTAtdW5vcm0tc3JnYlwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHgxMF9LSFIsXG4gICAgICBcImFzdGMtMTJ4MTAtdW5vcm1cIjogZXh0ZW5zaW9ucy5hc3RjLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEwX0tIUixcbiAgICAgIFwiYXN0Yy0xMngxMC11bm9ybS1zcmdiXCI6IGV4dGVuc2lvbnMuYXN0Yy5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEyeDEwX0tIUixcbiAgICAgIFwiYXN0Yy0xMngxMi11bm9ybVwiOiBleHRlbnNpb25zLmFzdGMuQ09NUFJFU1NFRF9SR0JBX0FTVENfMTJ4MTJfS0hSLFxuICAgICAgXCJhc3RjLTEyeDEyLXVub3JtLXNyZ2JcIjogZXh0ZW5zaW9ucy5hc3RjLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTJfS0hSXG4gICAgfSA6IHt9XG4gIH07XG59XG5cbmV4cG9ydCB7IG1hcEZvcm1hdFRvR2xJbnRlcm5hbEZvcm1hdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwRm9ybWF0VG9HbEludGVybmFsRm9ybWF0Lm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gbWFwRm9ybWF0VG9HbFR5cGUoZ2wpIHtcbiAgcmV0dXJuIHtcbiAgICAvLyA4LWJpdCBmb3JtYXRzXG4gICAgcjh1bm9ybTogZ2wuVU5TSUdORURfQllURSxcbiAgICByOHNub3JtOiBnbC5CWVRFLFxuICAgIHI4dWludDogZ2wuVU5TSUdORURfQllURSxcbiAgICByOHNpbnQ6IGdsLkJZVEUsXG4gICAgLy8gMTYtYml0IGZvcm1hdHNcbiAgICByMTZ1aW50OiBnbC5VTlNJR05FRF9TSE9SVCxcbiAgICByMTZzaW50OiBnbC5TSE9SVCxcbiAgICByMTZmbG9hdDogZ2wuSEFMRl9GTE9BVCxcbiAgICByZzh1bm9ybTogZ2wuVU5TSUdORURfQllURSxcbiAgICByZzhzbm9ybTogZ2wuQllURSxcbiAgICByZzh1aW50OiBnbC5VTlNJR05FRF9CWVRFLFxuICAgIHJnOHNpbnQ6IGdsLkJZVEUsXG4gICAgLy8gMzItYml0IGZvcm1hdHNcbiAgICByMzJ1aW50OiBnbC5VTlNJR05FRF9JTlQsXG4gICAgcjMyc2ludDogZ2wuSU5ULFxuICAgIHIzMmZsb2F0OiBnbC5GTE9BVCxcbiAgICByZzE2dWludDogZ2wuVU5TSUdORURfU0hPUlQsXG4gICAgcmcxNnNpbnQ6IGdsLlNIT1JULFxuICAgIHJnMTZmbG9hdDogZ2wuSEFMRl9GTE9BVCxcbiAgICByZ2JhOHVub3JtOiBnbC5VTlNJR05FRF9CWVRFLFxuICAgIFwicmdiYTh1bm9ybS1zcmdiXCI6IGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgLy8gUGFja2VkIDMyLWJpdCBmb3JtYXRzXG4gICAgcmdiYThzbm9ybTogZ2wuQllURSxcbiAgICByZ2JhOHVpbnQ6IGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgcmdiYThzaW50OiBnbC5CWVRFLFxuICAgIGJncmE4dW5vcm06IGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgXCJiZ3JhOHVub3JtLXNyZ2JcIjogZ2wuVU5TSUdORURfQllURSxcbiAgICByZ2I5ZTV1ZmxvYXQ6IGdsLlVOU0lHTkVEX0lOVF81XzlfOV85X1JFVixcbiAgICByZ2IxMGEydW5vcm06IGdsLlVOU0lHTkVEX0lOVF8yXzEwXzEwXzEwX1JFVixcbiAgICByZzExYjEwdWZsb2F0OiBnbC5VTlNJR05FRF9JTlRfMTBGXzExRl8xMUZfUkVWLFxuICAgIC8vIDY0LWJpdCBmb3JtYXRzXG4gICAgcmczMnVpbnQ6IGdsLlVOU0lHTkVEX0lOVCxcbiAgICByZzMyc2ludDogZ2wuSU5ULFxuICAgIHJnMzJmbG9hdDogZ2wuRkxPQVQsXG4gICAgcmdiYTE2dWludDogZ2wuVU5TSUdORURfU0hPUlQsXG4gICAgcmdiYTE2c2ludDogZ2wuU0hPUlQsXG4gICAgcmdiYTE2ZmxvYXQ6IGdsLkhBTEZfRkxPQVQsXG4gICAgLy8gMTI4LWJpdCBmb3JtYXRzXG4gICAgcmdiYTMydWludDogZ2wuVU5TSUdORURfSU5ULFxuICAgIHJnYmEzMnNpbnQ6IGdsLklOVCxcbiAgICByZ2JhMzJmbG9hdDogZ2wuRkxPQVQsXG4gICAgLy8gRGVwdGgvc3RlbmNpbCBmb3JtYXRzXG4gICAgc3RlbmNpbDg6IGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgZGVwdGgxNnVub3JtOiBnbC5VTlNJR05FRF9TSE9SVCxcbiAgICBkZXB0aDI0cGx1czogZ2wuVU5TSUdORURfSU5ULFxuICAgIFwiZGVwdGgyNHBsdXMtc3RlbmNpbDhcIjogZ2wuVU5TSUdORURfSU5UXzI0XzgsXG4gICAgZGVwdGgzMmZsb2F0OiBnbC5GTE9BVCxcbiAgICBcImRlcHRoMzJmbG9hdC1zdGVuY2lsOFwiOiBnbC5GTE9BVF8zMl9VTlNJR05FRF9JTlRfMjRfOF9SRVZcbiAgfTtcbn1cblxuZXhwb3J0IHsgbWFwRm9ybWF0VG9HbFR5cGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcEZvcm1hdFRvR2xUeXBlLm1qcy5tYXBcbiIsImltcG9ydCB7IERPTUFkYXB0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9lbnZpcm9ubWVudC9hZGFwdGVyLm1qcyc7XG5pbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3RleHR1cmUvVGV4dHVyZS5tanMnO1xuaW1wb3J0IHsgR2xUZXh0dXJlIH0gZnJvbSAnLi9HbFRleHR1cmUubWpzJztcbmltcG9ydCB7IGdsVXBsb2FkQnVmZmVySW1hZ2VSZXNvdXJjZSB9IGZyb20gJy4vdXBsb2FkZXJzL2dsVXBsb2FkQnVmZmVySW1hZ2VSZXNvdXJjZS5tanMnO1xuaW1wb3J0IHsgZ2xVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlIH0gZnJvbSAnLi91cGxvYWRlcnMvZ2xVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlLm1qcyc7XG5pbXBvcnQgeyBnbFVwbG9hZEltYWdlUmVzb3VyY2UgfSBmcm9tICcuL3VwbG9hZGVycy9nbFVwbG9hZEltYWdlUmVzb3VyY2UubWpzJztcbmltcG9ydCB7IGdsVXBsb2FkVmlkZW9SZXNvdXJjZSB9IGZyb20gJy4vdXBsb2FkZXJzL2dsVXBsb2FkVmlkZW9SZXNvdXJjZS5tanMnO1xuaW1wb3J0IHsgYXBwbHlTdHlsZVBhcmFtcyB9IGZyb20gJy4vdXRpbHMvYXBwbHlTdHlsZVBhcmFtcy5tanMnO1xuaW1wb3J0IHsgbWFwRm9ybWF0VG9HbEZvcm1hdCB9IGZyb20gJy4vdXRpbHMvbWFwRm9ybWF0VG9HbEZvcm1hdC5tanMnO1xuaW1wb3J0IHsgbWFwRm9ybWF0VG9HbEludGVybmFsRm9ybWF0IH0gZnJvbSAnLi91dGlscy9tYXBGb3JtYXRUb0dsSW50ZXJuYWxGb3JtYXQubWpzJztcbmltcG9ydCB7IG1hcEZvcm1hdFRvR2xUeXBlIH0gZnJvbSAnLi91dGlscy9tYXBGb3JtYXRUb0dsVHlwZS5tanMnO1xuaW1wb3J0ICcuL3V0aWxzL3VucHJlbXVsdGlwbHlBbHBoYS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IEJZVEVTX1BFUl9QSVhFTCA9IDQ7XG5jbGFzcyBHbFRleHR1cmVTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMubWFuYWdlZFRleHR1cmVzID0gW107XG4gICAgdGhpcy5fZ2xUZXh0dXJlcyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2dsU2FtcGxlcnMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ib3VuZFRleHR1cmVzID0gW107XG4gICAgdGhpcy5fYWN0aXZlVGV4dHVyZUxvY2F0aW9uID0gLTE7XG4gICAgdGhpcy5fYm91bmRTYW1wbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX3VwbG9hZHMgPSB7XG4gICAgICBpbWFnZTogZ2xVcGxvYWRJbWFnZVJlc291cmNlLFxuICAgICAgYnVmZmVyOiBnbFVwbG9hZEJ1ZmZlckltYWdlUmVzb3VyY2UsXG4gICAgICB2aWRlbzogZ2xVcGxvYWRWaWRlb1Jlc291cmNlLFxuICAgICAgY29tcHJlc3NlZDogZ2xVcGxvYWRDb21wcmVzc2VkVGV4dHVyZVJlc291cmNlXG4gICAgfTtcbiAgICAvLyBUT0RPIC0gc2VwYXJhdGUgc2FtcGxlcnMgd2lsbCBiZSBhIGNvb2wgdGhpbmcgdG8gYWRkLCBidXQgbm90IHJpZ2h0IG5vdyFcbiAgICB0aGlzLl91c2VTZXBhcmF0ZVNhbXBsZXJzID0gZmFsc2U7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICBjb250ZXh0Q2hhbmdlKGdsKSB7XG4gICAgdGhpcy5fZ2wgPSBnbDtcbiAgICBpZiAoIXRoaXMuX21hcEZvcm1hdFRvSW50ZXJuYWxGb3JtYXQpIHtcbiAgICAgIHRoaXMuX21hcEZvcm1hdFRvSW50ZXJuYWxGb3JtYXQgPSBtYXBGb3JtYXRUb0dsSW50ZXJuYWxGb3JtYXQoZ2wsIHRoaXMuX3JlbmRlcmVyLmNvbnRleHQuZXh0ZW5zaW9ucyk7XG4gICAgICB0aGlzLl9tYXBGb3JtYXRUb1R5cGUgPSBtYXBGb3JtYXRUb0dsVHlwZShnbCk7XG4gICAgICB0aGlzLl9tYXBGb3JtYXRUb0Zvcm1hdCA9IG1hcEZvcm1hdFRvR2xGb3JtYXQoZ2wpO1xuICAgIH1cbiAgICB0aGlzLl9nbFRleHR1cmVzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZ2xTYW1wbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2JvdW5kU2FtcGxlcnMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgIHRoaXMuYmluZChUZXh0dXJlLkVNUFRZLCBpKTtcbiAgICB9XG4gIH1cbiAgaW5pdFNvdXJjZShzb3VyY2UpIHtcbiAgICB0aGlzLmJpbmQoc291cmNlKTtcbiAgfVxuICBiaW5kKHRleHR1cmUsIGxvY2F0aW9uID0gMCkge1xuICAgIGNvbnN0IHNvdXJjZSA9IHRleHR1cmUuc291cmNlO1xuICAgIGlmICh0ZXh0dXJlKSB7XG4gICAgICB0aGlzLmJpbmRTb3VyY2Uoc291cmNlLCBsb2NhdGlvbik7XG4gICAgICBpZiAodGhpcy5fdXNlU2VwYXJhdGVTYW1wbGVycykge1xuICAgICAgICB0aGlzLl9iaW5kU2FtcGxlcihzb3VyY2Uuc3R5bGUsIGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5iaW5kU291cmNlKG51bGwsIGxvY2F0aW9uKTtcbiAgICAgIGlmICh0aGlzLl91c2VTZXBhcmF0ZVNhbXBsZXJzKSB7XG4gICAgICAgIHRoaXMuX2JpbmRTYW1wbGVyKG51bGwsIGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYmluZFNvdXJjZShzb3VyY2UsIGxvY2F0aW9uID0gMCkge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgc291cmNlLl90b3VjaGVkID0gdGhpcy5fcmVuZGVyZXIudGV4dHVyZUdDLmNvdW50O1xuICAgIGlmICh0aGlzLl9ib3VuZFRleHR1cmVzW2xvY2F0aW9uXSAhPT0gc291cmNlKSB7XG4gICAgICB0aGlzLl9ib3VuZFRleHR1cmVzW2xvY2F0aW9uXSA9IHNvdXJjZTtcbiAgICAgIHRoaXMuX2FjdGl2YXRlTG9jYXRpb24obG9jYXRpb24pO1xuICAgICAgc291cmNlID0gc291cmNlIHx8IFRleHR1cmUuRU1QVFkuc291cmNlO1xuICAgICAgY29uc3QgZ2xUZXh0dXJlID0gdGhpcy5nZXRHbFNvdXJjZShzb3VyY2UpO1xuICAgICAgZ2wuYmluZFRleHR1cmUoZ2xUZXh0dXJlLnRhcmdldCwgZ2xUZXh0dXJlLnRleHR1cmUpO1xuICAgIH1cbiAgfVxuICBfYmluZFNhbXBsZXIoc3R5bGUsIGxvY2F0aW9uID0gMCkge1xuICAgIGNvbnN0IGdsID0gdGhpcy5fZ2w7XG4gICAgaWYgKCFzdHlsZSkge1xuICAgICAgdGhpcy5fYm91bmRTYW1wbGVyc1tsb2NhdGlvbl0gPSBudWxsO1xuICAgICAgZ2wuYmluZFNhbXBsZXIobG9jYXRpb24sIG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzYW1wbGVyID0gdGhpcy5fZ2V0R2xTYW1wbGVyKHN0eWxlKTtcbiAgICBpZiAodGhpcy5fYm91bmRTYW1wbGVyc1tsb2NhdGlvbl0gIT09IHNhbXBsZXIpIHtcbiAgICAgIHRoaXMuX2JvdW5kU2FtcGxlcnNbbG9jYXRpb25dID0gc2FtcGxlcjtcbiAgICAgIGdsLmJpbmRTYW1wbGVyKGxvY2F0aW9uLCBzYW1wbGVyKTtcbiAgICB9XG4gIH1cbiAgdW5iaW5kKHRleHR1cmUpIHtcbiAgICBjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcbiAgICBjb25zdCBib3VuZFRleHR1cmVzID0gdGhpcy5fYm91bmRUZXh0dXJlcztcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm91bmRUZXh0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGJvdW5kVGV4dHVyZXNbaV0gPT09IHNvdXJjZSkge1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZUxvY2F0aW9uKGkpO1xuICAgICAgICBjb25zdCBnbFRleHR1cmUgPSB0aGlzLmdldEdsU291cmNlKHNvdXJjZSk7XG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsVGV4dHVyZS50YXJnZXQsIG51bGwpO1xuICAgICAgICBib3VuZFRleHR1cmVzW2ldID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX2FjdGl2YXRlTG9jYXRpb24obG9jYXRpb24pIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlVGV4dHVyZUxvY2F0aW9uICE9PSBsb2NhdGlvbikge1xuICAgICAgdGhpcy5fYWN0aXZlVGV4dHVyZUxvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICB0aGlzLl9nbC5hY3RpdmVUZXh0dXJlKHRoaXMuX2dsLlRFWFRVUkUwICsgbG9jYXRpb24pO1xuICAgIH1cbiAgfVxuICBfaW5pdFNvdXJjZShzb3VyY2UpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGNvbnN0IGdsVGV4dHVyZSA9IG5ldyBHbFRleHR1cmUoZ2wuY3JlYXRlVGV4dHVyZSgpKTtcbiAgICBnbFRleHR1cmUudHlwZSA9IHRoaXMuX21hcEZvcm1hdFRvVHlwZVtzb3VyY2UuZm9ybWF0XTtcbiAgICBnbFRleHR1cmUuaW50ZXJuYWxGb3JtYXQgPSB0aGlzLl9tYXBGb3JtYXRUb0ludGVybmFsRm9ybWF0W3NvdXJjZS5mb3JtYXRdO1xuICAgIGdsVGV4dHVyZS5mb3JtYXQgPSB0aGlzLl9tYXBGb3JtYXRUb0Zvcm1hdFtzb3VyY2UuZm9ybWF0XTtcbiAgICBpZiAoc291cmNlLmF1dG9HZW5lcmF0ZU1pcG1hcHMgJiYgKHRoaXMuX3JlbmRlcmVyLmNvbnRleHQuc3VwcG9ydHMubm9uUG93T2YybWlwbWFwcyB8fCBzb3VyY2UuaXNQb3dlck9mVHdvKSkge1xuICAgICAgY29uc3QgYmlnZ2VzdERpbWVuc2lvbiA9IE1hdGgubWF4KHNvdXJjZS53aWR0aCwgc291cmNlLmhlaWdodCk7XG4gICAgICBzb3VyY2UubWlwTGV2ZWxDb3VudCA9IE1hdGguZmxvb3IoTWF0aC5sb2cyKGJpZ2dlc3REaW1lbnNpb24pKSArIDE7XG4gICAgfVxuICAgIHRoaXMuX2dsVGV4dHVyZXNbc291cmNlLnVpZF0gPSBnbFRleHR1cmU7XG4gICAgaWYgKCF0aGlzLm1hbmFnZWRUZXh0dXJlcy5pbmNsdWRlcyhzb3VyY2UpKSB7XG4gICAgICBzb3VyY2Uub24oXCJ1cGRhdGVcIiwgdGhpcy5vblNvdXJjZVVwZGF0ZSwgdGhpcyk7XG4gICAgICBzb3VyY2Uub24oXCJyZXNpemVcIiwgdGhpcy5vblNvdXJjZVVwZGF0ZSwgdGhpcyk7XG4gICAgICBzb3VyY2Uub24oXCJzdHlsZUNoYW5nZVwiLCB0aGlzLm9uU3R5bGVDaGFuZ2UsIHRoaXMpO1xuICAgICAgc291cmNlLm9uKFwiZGVzdHJveVwiLCB0aGlzLm9uU291cmNlRGVzdHJveSwgdGhpcyk7XG4gICAgICBzb3VyY2Uub24oXCJ1bmxvYWRcIiwgdGhpcy5vblNvdXJjZVVubG9hZCwgdGhpcyk7XG4gICAgICBzb3VyY2Uub24oXCJ1cGRhdGVNaXBtYXBzXCIsIHRoaXMub25VcGRhdGVNaXBtYXBzLCB0aGlzKTtcbiAgICAgIHRoaXMubWFuYWdlZFRleHR1cmVzLnB1c2goc291cmNlKTtcbiAgICB9XG4gICAgdGhpcy5vblNvdXJjZVVwZGF0ZShzb3VyY2UpO1xuICAgIHRoaXMub25TdHlsZUNoYW5nZShzb3VyY2UpO1xuICAgIHJldHVybiBnbFRleHR1cmU7XG4gIH1cbiAgb25TdHlsZUNoYW5nZShzb3VyY2UpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGNvbnN0IGdsVGV4dHVyZSA9IHRoaXMuZ2V0R2xTb3VyY2Uoc291cmNlKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBnbFRleHR1cmUudGV4dHVyZSk7XG4gICAgdGhpcy5fYm91bmRUZXh0dXJlc1t0aGlzLl9hY3RpdmVUZXh0dXJlTG9jYXRpb25dID0gc291cmNlO1xuICAgIGFwcGx5U3R5bGVQYXJhbXMoXG4gICAgICBzb3VyY2Uuc3R5bGUsXG4gICAgICBnbCxcbiAgICAgIHNvdXJjZS5taXBMZXZlbENvdW50ID4gMSxcbiAgICAgIHRoaXMuX3JlbmRlcmVyLmNvbnRleHQuZXh0ZW5zaW9ucy5hbmlzb3Ryb3BpY0ZpbHRlcmluZyxcbiAgICAgIFwidGV4UGFyYW1ldGVyaVwiLFxuICAgICAgZ2wuVEVYVFVSRV8yRCxcbiAgICAgIC8vIHdpbGwgZm9yY2UgYSBjbGFtcCB0byBlZGdlIGlmIHRoZSB0ZXh0dXJlIGlzIG5vdCBhIHBvd2VyIG9mIHR3b1xuICAgICAgIXRoaXMuX3JlbmRlcmVyLmNvbnRleHQuc3VwcG9ydHMubm9uUG93T2Yyd3JhcHBpbmcgJiYgIXNvdXJjZS5pc1Bvd2VyT2ZUd29cbiAgICApO1xuICB9XG4gIG9uU291cmNlVW5sb2FkKHNvdXJjZSkge1xuICAgIGNvbnN0IGdsVGV4dHVyZSA9IHRoaXMuX2dsVGV4dHVyZXNbc291cmNlLnVpZF07XG4gICAgaWYgKCFnbFRleHR1cmUpXG4gICAgICByZXR1cm47XG4gICAgdGhpcy51bmJpbmQoc291cmNlKTtcbiAgICB0aGlzLl9nbFRleHR1cmVzW3NvdXJjZS51aWRdID0gbnVsbDtcbiAgICB0aGlzLl9nbC5kZWxldGVUZXh0dXJlKGdsVGV4dHVyZS50ZXh0dXJlKTtcbiAgfVxuICBvblNvdXJjZVVwZGF0ZShzb3VyY2UpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGNvbnN0IGdsVGV4dHVyZSA9IHRoaXMuZ2V0R2xTb3VyY2Uoc291cmNlKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBnbFRleHR1cmUudGV4dHVyZSk7XG4gICAgdGhpcy5fYm91bmRUZXh0dXJlc1t0aGlzLl9hY3RpdmVUZXh0dXJlTG9jYXRpb25dID0gc291cmNlO1xuICAgIGlmICh0aGlzLl91cGxvYWRzW3NvdXJjZS51cGxvYWRNZXRob2RJZF0pIHtcbiAgICAgIHRoaXMuX3VwbG9hZHNbc291cmNlLnVwbG9hZE1ldGhvZElkXS51cGxvYWQoc291cmNlLCBnbFRleHR1cmUsIGdsLCB0aGlzLl9yZW5kZXJlci5jb250ZXh0LndlYkdMVmVyc2lvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgc291cmNlLnBpeGVsV2lkdGgsIHNvdXJjZS5waXhlbEhlaWdodCwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgbnVsbCk7XG4gICAgfVxuICAgIGlmIChzb3VyY2UuYXV0b0dlbmVyYXRlTWlwbWFwcyAmJiBzb3VyY2UubWlwTGV2ZWxDb3VudCA+IDEpIHtcbiAgICAgIHRoaXMub25VcGRhdGVNaXBtYXBzKHNvdXJjZSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICBvblVwZGF0ZU1pcG1hcHMoc291cmNlLCBiaW5kID0gdHJ1ZSkge1xuICAgIGlmIChiaW5kKVxuICAgICAgdGhpcy5iaW5kU291cmNlKHNvdXJjZSwgMCk7XG4gICAgY29uc3QgZ2xUZXh0dXJlID0gdGhpcy5nZXRHbFNvdXJjZShzb3VyY2UpO1xuICAgIHRoaXMuX2dsLmdlbmVyYXRlTWlwbWFwKGdsVGV4dHVyZS50YXJnZXQpO1xuICB9XG4gIG9uU291cmNlRGVzdHJveShzb3VyY2UpIHtcbiAgICBzb3VyY2Uub2ZmKFwiZGVzdHJveVwiLCB0aGlzLm9uU291cmNlRGVzdHJveSwgdGhpcyk7XG4gICAgc291cmNlLm9mZihcInVwZGF0ZVwiLCB0aGlzLm9uU291cmNlVXBkYXRlLCB0aGlzKTtcbiAgICBzb3VyY2Uub2ZmKFwicmVzaXplXCIsIHRoaXMub25Tb3VyY2VVcGRhdGUsIHRoaXMpO1xuICAgIHNvdXJjZS5vZmYoXCJ1bmxvYWRcIiwgdGhpcy5vblNvdXJjZVVubG9hZCwgdGhpcyk7XG4gICAgc291cmNlLm9mZihcInN0eWxlQ2hhbmdlXCIsIHRoaXMub25TdHlsZUNoYW5nZSwgdGhpcyk7XG4gICAgc291cmNlLm9mZihcInVwZGF0ZU1pcG1hcHNcIiwgdGhpcy5vblVwZGF0ZU1pcG1hcHMsIHRoaXMpO1xuICAgIHRoaXMubWFuYWdlZFRleHR1cmVzLnNwbGljZSh0aGlzLm1hbmFnZWRUZXh0dXJlcy5pbmRleE9mKHNvdXJjZSksIDEpO1xuICAgIHRoaXMub25Tb3VyY2VVbmxvYWQoc291cmNlKTtcbiAgfVxuICBfaW5pdFNhbXBsZXIoc3R5bGUpIHtcbiAgICBjb25zdCBnbCA9IHRoaXMuX2dsO1xuICAgIGNvbnN0IGdsU2FtcGxlciA9IHRoaXMuX2dsLmNyZWF0ZVNhbXBsZXIoKTtcbiAgICB0aGlzLl9nbFNhbXBsZXJzW3N0eWxlLl9yZXNvdXJjZUlkXSA9IGdsU2FtcGxlcjtcbiAgICBhcHBseVN0eWxlUGFyYW1zKFxuICAgICAgc3R5bGUsXG4gICAgICBnbCxcbiAgICAgIHRoaXMuX2JvdW5kVGV4dHVyZXNbdGhpcy5fYWN0aXZlVGV4dHVyZUxvY2F0aW9uXS5taXBMZXZlbENvdW50ID4gMSxcbiAgICAgIHRoaXMuX3JlbmRlcmVyLmNvbnRleHQuZXh0ZW5zaW9ucy5hbmlzb3Ryb3BpY0ZpbHRlcmluZyxcbiAgICAgIFwic2FtcGxlclBhcmFtZXRlcmlcIixcbiAgICAgIGdsU2FtcGxlcixcbiAgICAgIGZhbHNlXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5fZ2xTYW1wbGVyc1tzdHlsZS5fcmVzb3VyY2VJZF07XG4gIH1cbiAgX2dldEdsU2FtcGxlcihzYW1wbGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dsU2FtcGxlcnNbc2FtcGxlci5fcmVzb3VyY2VJZF0gfHwgdGhpcy5faW5pdFNhbXBsZXIoc2FtcGxlcik7XG4gIH1cbiAgZ2V0R2xTb3VyY2Uoc291cmNlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dsVGV4dHVyZXNbc291cmNlLnVpZF0gfHwgdGhpcy5faW5pdFNvdXJjZShzb3VyY2UpO1xuICB9XG4gIGdlbmVyYXRlQ2FudmFzKHRleHR1cmUpIHtcbiAgICBjb25zdCB7IHBpeGVscywgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5nZXRQaXhlbHModGV4dHVyZSk7XG4gICAgY29uc3QgY2FudmFzID0gRE9NQWRhcHRlci5nZXQoKS5jcmVhdGVDYW52YXMoKTtcbiAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgaWYgKGN0eCkge1xuICAgICAgY29uc3QgaW1hZ2VEYXRhID0gY3R4LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIGltYWdlRGF0YS5kYXRhLnNldChwaXhlbHMpO1xuICAgICAgY3R4LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApO1xuICAgIH1cbiAgICByZXR1cm4gY2FudmFzO1xuICB9XG4gIGdldFBpeGVscyh0ZXh0dXJlKSB7XG4gICAgY29uc3QgcmVzb2x1dGlvbiA9IHRleHR1cmUuc291cmNlLnJlc29sdXRpb247XG4gICAgY29uc3QgZnJhbWUgPSB0ZXh0dXJlLmZyYW1lO1xuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5tYXgoTWF0aC5yb3VuZChmcmFtZS53aWR0aCAqIHJlc29sdXRpb24pLCAxKTtcbiAgICBjb25zdCBoZWlnaHQgPSBNYXRoLm1heChNYXRoLnJvdW5kKGZyYW1lLmhlaWdodCAqIHJlc29sdXRpb24pLCAxKTtcbiAgICBjb25zdCBwaXhlbHMgPSBuZXcgVWludDhBcnJheShCWVRFU19QRVJfUElYRUwgKiB3aWR0aCAqIGhlaWdodCk7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICBjb25zdCByZW5kZXJUYXJnZXQgPSByZW5kZXJlci5yZW5kZXJUYXJnZXQuZ2V0UmVuZGVyVGFyZ2V0KHRleHR1cmUpO1xuICAgIGNvbnN0IGdsUmVudGVyVGFyZ2V0ID0gcmVuZGVyZXIucmVuZGVyVGFyZ2V0LmdldEdwdVJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQpO1xuICAgIGNvbnN0IGdsID0gcmVuZGVyZXIuZ2w7XG4gICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBnbFJlbnRlclRhcmdldC5yZXNvbHZlVGFyZ2V0RnJhbWVidWZmZXIpO1xuICAgIGdsLnJlYWRQaXhlbHMoXG4gICAgICBNYXRoLnJvdW5kKGZyYW1lLnggKiByZXNvbHV0aW9uKSxcbiAgICAgIE1hdGgucm91bmQoZnJhbWUueSAqIHJlc29sdXRpb24pLFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICBnbC5SR0JBLFxuICAgICAgZ2wuVU5TSUdORURfQllURSxcbiAgICAgIHBpeGVsc1xuICAgICk7XG4gICAgaWYgKGZhbHNlKSB7XG4gICAgICB1bnByZW11bHRpcGx5QWxwaGEocGl4ZWxzKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgcGl4ZWxzOiBuZXcgVWludDhDbGFtcGVkQXJyYXkocGl4ZWxzLmJ1ZmZlciksIHdpZHRoLCBoZWlnaHQgfTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMubWFuYWdlZFRleHR1cmVzLnNsaWNlKCkuZm9yRWFjaCgoc291cmNlKSA9PiB0aGlzLm9uU291cmNlRGVzdHJveShzb3VyY2UpKTtcbiAgICB0aGlzLm1hbmFnZWRUZXh0dXJlcyA9IG51bGw7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR2xUZXh0dXJlU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJ0ZXh0dXJlXCJcbn07XG5cbmV4cG9ydCB7IEdsVGV4dHVyZVN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R2xUZXh0dXJlU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IGV4dGVuc2lvbnMsIEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IEdsR3JhcGhpY3NBZGFwdG9yIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmUvZ3JhcGhpY3MvZ2wvR2xHcmFwaGljc0FkYXB0b3IubWpzJztcbmltcG9ydCB7IEdsTWVzaEFkYXB0b3IgfSBmcm9tICcuLi8uLi8uLi9zY2VuZS9tZXNoL2dsL0dsTWVzaEFkYXB0b3IubWpzJztcbmltcG9ydCB7IEdsQmF0Y2hBZGFwdG9yIH0gZnJvbSAnLi4vLi4vYmF0Y2hlci9nbC9HbEJhdGNoQWRhcHRvci5tanMnO1xuaW1wb3J0IHsgQWJzdHJhY3RSZW5kZXJlciB9IGZyb20gJy4uL3NoYXJlZC9zeXN0ZW0vQWJzdHJhY3RSZW5kZXJlci5tanMnO1xuaW1wb3J0IHsgU2hhcmVkU3lzdGVtcywgU2hhcmVkUmVuZGVyUGlwZXMgfSBmcm9tICcuLi9zaGFyZWQvc3lzdGVtL1NoYXJlZFN5c3RlbXMubWpzJztcbmltcG9ydCB7IFJlbmRlcmVyVHlwZSB9IGZyb20gJy4uL3R5cGVzLm1qcyc7XG5pbXBvcnQgeyBHbEJ1ZmZlclN5c3RlbSB9IGZyb20gJy4vYnVmZmVyL0dsQnVmZmVyU3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHbENvbnRleHRTeXN0ZW0gfSBmcm9tICcuL2NvbnRleHQvR2xDb250ZXh0U3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHbEdlb21ldHJ5U3lzdGVtIH0gZnJvbSAnLi9nZW9tZXRyeS9HbEdlb21ldHJ5U3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHbEJhY2tCdWZmZXJTeXN0ZW0gfSBmcm9tICcuL0dsQmFja0J1ZmZlclN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xDb2xvck1hc2tTeXN0ZW0gfSBmcm9tICcuL0dsQ29sb3JNYXNrU3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHbEVuY29kZXJTeXN0ZW0gfSBmcm9tICcuL0dsRW5jb2RlclN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xTdGVuY2lsU3lzdGVtIH0gZnJvbSAnLi9HbFN0ZW5jaWxTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdsVWJvU3lzdGVtIH0gZnJvbSAnLi9HbFVib1N5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xSZW5kZXJUYXJnZXRTeXN0ZW0gfSBmcm9tICcuL3JlbmRlclRhcmdldC9HbFJlbmRlclRhcmdldFN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xTaGFkZXJTeXN0ZW0gfSBmcm9tICcuL3NoYWRlci9HbFNoYWRlclN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xVbmlmb3JtR3JvdXBTeXN0ZW0gfSBmcm9tICcuL3NoYWRlci9HbFVuaWZvcm1Hcm91cFN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xTdGF0ZVN5c3RlbSB9IGZyb20gJy4vc3RhdGUvR2xTdGF0ZVN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2xUZXh0dXJlU3lzdGVtIH0gZnJvbSAnLi90ZXh0dXJlL0dsVGV4dHVyZVN5c3RlbS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IERlZmF1bHRXZWJHTFN5c3RlbXMgPSBbXG4gIC4uLlNoYXJlZFN5c3RlbXMsXG4gIEdsVWJvU3lzdGVtLFxuICBHbEJhY2tCdWZmZXJTeXN0ZW0sXG4gIEdsQ29udGV4dFN5c3RlbSxcbiAgR2xCdWZmZXJTeXN0ZW0sXG4gIEdsVGV4dHVyZVN5c3RlbSxcbiAgR2xSZW5kZXJUYXJnZXRTeXN0ZW0sXG4gIEdsR2VvbWV0cnlTeXN0ZW0sXG4gIEdsVW5pZm9ybUdyb3VwU3lzdGVtLFxuICBHbFNoYWRlclN5c3RlbSxcbiAgR2xFbmNvZGVyU3lzdGVtLFxuICBHbFN0YXRlU3lzdGVtLFxuICBHbFN0ZW5jaWxTeXN0ZW0sXG4gIEdsQ29sb3JNYXNrU3lzdGVtXG5dO1xuY29uc3QgRGVmYXVsdFdlYkdMUGlwZXMgPSBbLi4uU2hhcmVkUmVuZGVyUGlwZXNdO1xuY29uc3QgRGVmYXVsdFdlYkdMQWRhcHRlcnMgPSBbR2xCYXRjaEFkYXB0b3IsIEdsTWVzaEFkYXB0b3IsIEdsR3JhcGhpY3NBZGFwdG9yXTtcbmNvbnN0IHN5c3RlbXMgPSBbXTtcbmNvbnN0IHJlbmRlclBpcGVzID0gW107XG5jb25zdCByZW5kZXJQaXBlQWRhcHRvcnMgPSBbXTtcbmV4dGVuc2lvbnMuaGFuZGxlQnlOYW1lZExpc3QoRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbSwgc3lzdGVtcyk7XG5leHRlbnNpb25zLmhhbmRsZUJ5TmFtZWRMaXN0KEV4dGVuc2lvblR5cGUuV2ViR0xQaXBlcywgcmVuZGVyUGlwZXMpO1xuZXh0ZW5zaW9ucy5oYW5kbGVCeU5hbWVkTGlzdChFeHRlbnNpb25UeXBlLldlYkdMUGlwZXNBZGFwdG9yLCByZW5kZXJQaXBlQWRhcHRvcnMpO1xuZXh0ZW5zaW9ucy5hZGQoLi4uRGVmYXVsdFdlYkdMU3lzdGVtcywgLi4uRGVmYXVsdFdlYkdMUGlwZXMsIC4uLkRlZmF1bHRXZWJHTEFkYXB0ZXJzKTtcbmNsYXNzIFdlYkdMUmVuZGVyZXIgZXh0ZW5kcyBBYnN0cmFjdFJlbmRlcmVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3Qgc3lzdGVtQ29uZmlnID0ge1xuICAgICAgbmFtZTogXCJ3ZWJnbFwiLFxuICAgICAgdHlwZTogUmVuZGVyZXJUeXBlLldFQkdMLFxuICAgICAgc3lzdGVtcyxcbiAgICAgIHJlbmRlclBpcGVzLFxuICAgICAgcmVuZGVyUGlwZUFkYXB0b3JzXG4gICAgfTtcbiAgICBzdXBlcihzeXN0ZW1Db25maWcpO1xuICB9XG59XG5cbmV4cG9ydCB7IFdlYkdMUmVuZGVyZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdlYkdMUmVuZGVyZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2172\n')},5774:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   y: () => (/* binding */ batchSamplersUniformGroup)\n/* harmony export */ });\n/* harmony import */ var _batcher_shared_const_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4589);\n/* harmony import */ var _shared_shader_UniformGroup_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3870);\n\n\n\n"use strict";\nconst sampleValues = new Int32Array(_batcher_shared_const_mjs__WEBPACK_IMPORTED_MODULE_0__/* .MAX_TEXTURES */ .A);\nfor (let i = 0; i < _batcher_shared_const_mjs__WEBPACK_IMPORTED_MODULE_0__/* .MAX_TEXTURES */ .A; i++) {\n  sampleValues[i] = i;\n}\nconst batchSamplersUniformGroup = new _shared_shader_UniformGroup_mjs__WEBPACK_IMPORTED_MODULE_1__/* .UniformGroup */ .o({\n  uTextures: { value: sampleValues, type: `i32`, size: _batcher_shared_const_mjs__WEBPACK_IMPORTED_MODULE_0__/* .MAX_TEXTURES */ .A }\n}, { isStatic: true });\n\n\n//# sourceMappingURL=batchSamplersUniformGroup.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTc3NC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRTtBQUNHOztBQUVwRTtBQUNBLG9DQUFvQyw0RUFBWTtBQUNoRCxnQkFBZ0IsSUFBSSw0RUFBWSxFQUFFO0FBQ2xDO0FBQ0E7QUFDQSxzQ0FBc0Msa0ZBQVk7QUFDbEQsZUFBZSx3Q0FBd0MsNEVBQVk7QUFDbkUsQ0FBQyxJQUFJLGdCQUFnQjs7QUFFZ0I7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvYmF0Y2hTYW1wbGVyc1VuaWZvcm1Hcm91cC5tanM/NDQ0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNQVhfVEVYVFVSRVMgfSBmcm9tICcuLi8uLi8uLi9iYXRjaGVyL3NoYXJlZC9jb25zdC5tanMnO1xuaW1wb3J0IHsgVW5pZm9ybUdyb3VwIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3NoYWRlci9Vbmlmb3JtR3JvdXAubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBzYW1wbGVWYWx1ZXMgPSBuZXcgSW50MzJBcnJheShNQVhfVEVYVFVSRVMpO1xuZm9yIChsZXQgaSA9IDA7IGkgPCBNQVhfVEVYVFVSRVM7IGkrKykge1xuICBzYW1wbGVWYWx1ZXNbaV0gPSBpO1xufVxuY29uc3QgYmF0Y2hTYW1wbGVyc1VuaWZvcm1Hcm91cCA9IG5ldyBVbmlmb3JtR3JvdXAoe1xuICB1VGV4dHVyZXM6IHsgdmFsdWU6IHNhbXBsZVZhbHVlcywgdHlwZTogYGkzMmAsIHNpemU6IE1BWF9URVhUVVJFUyB9XG59LCB7IGlzU3RhdGljOiB0cnVlIH0pO1xuXG5leHBvcnQgeyBiYXRjaFNhbXBsZXJzVW5pZm9ybUdyb3VwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXRjaFNhbXBsZXJzVW5pZm9ybUdyb3VwLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5774\n')}}]);