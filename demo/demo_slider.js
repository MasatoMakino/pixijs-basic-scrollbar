(()=>{"use strict";var __webpack_modules__={403:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/index.mjs + 167 modules\nvar lib = __webpack_require__(456);\n;// CONCATENATED MODULE: ./esm/SliderEvent.js\n/**\n * スライダーが移動した際に発行されるイベントです。\n * 現状のスライダー位置を報告します。\n */\nclass SliderEventContext {\n  constructor(rate) {\n    this.rate = rate;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@pixi/display/lib/index.mjs + 4 modules\nvar display_lib = __webpack_require__(820);\n// EXTERNAL MODULE: ./node_modules/@pixi/events/lib/index.mjs + 8 modules\nvar events_lib = __webpack_require__(723);\n// EXTERNAL MODULE: ./node_modules/@pixi/math/lib/index.mjs + 11 modules\nvar math_lib = __webpack_require__(363);\n// EXTERNAL MODULE: ./node_modules/@pixi/utils/lib/index.mjs + 24 modules\nvar utils_lib = __webpack_require__(441);\n;// CONCATENATED MODULE: ./esm/SliderView.js\n\n\n\n\n\n/**\n * スライダー用クラスです\n *\n * 使用上の注意 :\n * オブジェクトのサイズの計測にgetLocalBounds関数を使用しています。\n * hitAreaでサイズをあらかじめ与えてください。\n */\nclass SliderView_SliderView extends display_lib/* Container */.W2 {\n  get isHorizontal() {\n    return this._isHorizontal;\n  }\n  /**\n   * @param option\n   */\n  constructor(option) {\n    super();\n    this._isHorizontal = true;\n    this.dragStartPos = new math_lib/* Point */.E9();\n    this.isDragging = false; // 現在スライド中か否か\n    this.sliderEventEmitter = new utils_lib.EventEmitter();\n    /**\n     * スライダーのドラッグを開始する\n     * @param {Object} e\n     */\n    this.startMove = e => {\n      this.onPressedSliderButton(e);\n    };\n    /**\n     * スライダーのドラッグ中の処理\n     * @param e\n     */\n    this.moveSlider = e => {\n      this.onMoveSlider(e);\n    };\n    /**\n     * スライダーのドラッグ終了時の処理\n     */\n    this.moveSliderFinish = () => {\n      this.isDragging = false;\n      this.buttonRootContainer.removeEventListener("pointermove", this.moveSlider);\n      this._slideButton.off("pointerup", this.moveSliderFinish);\n      this._slideButton.off("pointerupoutside", this.moveSliderFinish);\n      this.sliderEventEmitter.emit("slider_change_finished", new SliderEventContext(this.rate));\n    };\n    /**\n     * このインスタンスを破棄する。\n     * @param\te\n     */\n    this.dispose = e => {\n      this.onDisposeFunction(e);\n    };\n    const initOption = SliderViewOption_SliderViewOptionUtil.init(option);\n    this.canvas = initOption.canvas;\n    this._base = this.initBase(initOption.base);\n    this._bar = this.initBarAndMask(initOption === null || initOption === void 0 ? void 0 : initOption.bar);\n    this._barMask = this.initBarAndMask(initOption === null || initOption === void 0 ? void 0 : initOption.mask);\n    if (this._bar && this._barMask) this._bar.mask = this._barMask;\n    this._slideButton = this.initSliderButton(initOption.button);\n    this.buttonRootContainer = SliderViewUtil_SliderViewUtil.getRootContainer(this.canvas, this._slideButton);\n    this._minPosition = initOption.minPosition;\n    this._maxPosition = initOption.maxPosition;\n    this._isHorizontal = initOption.isHorizontal;\n    this._rate = initOption.rate;\n    this.changeRate(this._rate);\n  }\n  addChildParts(obj) {\n    var _a;\n    if (!obj) return;\n    (_a = obj.parent) === null || _a === void 0 ? void 0 : _a.removeChild(obj);\n    this.addChild(obj);\n  }\n  /**\n   * スライダーの位置を変更する\n   * @param\trate\tスライダーの位置 MIN 0.0 ~ MAX [SliderView.MAX_RATE]\n   */\n  changeRate(rate) {\n    //ドラッグ中は外部からの操作を無視する。\n    if (this.isDragging) return;\n    this._rate = rate;\n    const pos = this.convertRateToPixel(this._rate);\n    this.updateParts(pos);\n    this.sliderEventEmitter.emit("slider_change", new SliderEventContext(this.rate));\n  }\n  onPressedSliderButton(e) {\n    this.isDragging = true;\n    const target = e.currentTarget;\n    const localPos = this.toLocal(e.global);\n    this.dragStartPos = new math_lib/* Point */.E9(localPos.x - target.x, localPos.y - target.y);\n    this.buttonRootContainer.addEventListener("pointermove", this.moveSlider);\n    this._slideButton.on("pointerup", this.moveSliderFinish);\n    this._slideButton.on("pointerupoutside", this.moveSliderFinish);\n  }\n  onMoveSlider(e) {\n    const mousePos = this.limitSliderButtonPosition(e);\n    this.updateParts(mousePos);\n    this._rate = this.convertPixelToRate(mousePos);\n    this.sliderEventEmitter.emit("slider_change", new SliderEventContext(this.rate));\n  }\n  /**\n   * スライダーボタンの位置を制限する関数\n   * @return 制限で切り落とされたスライダーボタンの座標値 座標の原点はSliderViewであり、ボタンやバーではない。\n   */\n  limitSliderButtonPosition(evt) {\n    const mousePos = this.getMousePosition(this, evt);\n    return SliderViewUtil_SliderViewUtil.clamp(mousePos, this._maxPosition, this._minPosition);\n  }\n  /**\n   * 各MCの位置、サイズをマウスポインタの位置に合わせて更新する\n   * moveSliderの内部処理\n   * @param\tmousePos SliderViewを原点としたローカルのマウス座標、limitSliderButtonPosition関数で可動範囲に制限済み。\n   */\n  updateParts(mousePos) {\n    const stretch = target => {\n      SliderViewUtil_SliderViewUtil.setSize(target, this._isHorizontal, mousePos - SliderViewUtil_SliderViewUtil.getPosition(target, this._isHorizontal));\n    };\n    //バーマスクがなければ、バー自体を伸縮する\n    if (this._bar && !this._barMask) {\n      stretch(this._bar);\n    }\n    //バーマスクがあれば、マスクを伸縮する。\n    if (this._barMask) {\n      stretch(this._barMask);\n    }\n    //ボタンの位置を更新する。\n    SliderViewUtil_SliderViewUtil.setPosition(this._slideButton, this._isHorizontal, mousePos);\n  }\n  /**\n   * スライダーの地をクリックした際の処理\n   * その位置までスライダーをジャンプする\n   * @param evt\n   */\n  onPressBase(evt) {\n    this.dragStartPos = new math_lib/* Point */.E9();\n    this.moveSlider(evt);\n    this.sliderEventEmitter.emit("slider_change_finished", new SliderEventContext(this.rate));\n  }\n  /**\n   * スライダーの割合から、スライダーの位置を取得する\n   * @param\trate\n   * @return\n   */\n  convertRateToPixel(rate) {\n    return SliderViewUtil_SliderViewUtil.convertRateToPixel(rate, this._maxPosition, this._minPosition);\n  }\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   * @param\tpixel\n   * @return\n   */\n  convertPixelToRate(pixel) {\n    return SliderViewUtil_SliderViewUtil.convertPixelToRate(pixel, this._maxPosition, this._minPosition);\n  }\n  /**\n   * ドラッグ中のマウス座標を取得する。\n   * limitSliderButtonPosition内の処理。\n   */\n  getMousePosition(displayObj, evt) {\n    let localPos;\n    if (evt instanceof events_lib/* FederatedPointerEvent */.nR) {\n      localPos = displayObj.toLocal(evt.global);\n    } else {\n      localPos = displayObj.toLocal(new math_lib/* Point */.E9(evt.offsetX, evt.offsetY));\n    }\n    if (this._isHorizontal) {\n      return localPos.x - this.dragStartPos.x;\n    } else {\n      return localPos.y - this.dragStartPos.y;\n    }\n  }\n  initBase(value) {\n    value.eventMode = "static";\n    value.on("pointertap", e => {\n      this.onPressBase(e);\n    });\n    this.addChildParts(value);\n    return value;\n  }\n  initBarAndMask(value) {\n    if (value == null) return;\n    value.eventMode = "none";\n    this.addChildParts(value);\n    return value;\n  }\n  initSliderButton(value) {\n    value.on("pointerdown", this.startMove);\n    value.eventMode = "static";\n    this.addChildParts(value);\n    return value;\n  }\n  get rate() {\n    return this._rate;\n  }\n  /**\n   * 全てのDisplayObjectとEventListenerを解除する。\n   */\n  onDisposeFunction(e) {\n    this.removeAllListeners();\n    this._base.removeAllListeners();\n    this._slideButton.removeAllListeners();\n    this.removeChildren();\n  }\n}\nSliderView_SliderView.MAX_RATE = 1.0;\n;// CONCATENATED MODULE: ./esm/SliderViewOption.js\n/**\n * スライダーを初期化する際のオプション\n */\n\n\nclass SliderViewOption_SliderViewOptionUtil {\n  static init(option) {\n    var _a, _b, _c;\n    this.check(option);\n    if (option.rate != null) {\n      option.rate = Math.max(0, option.rate);\n      option.rate = Math.min(SliderView_SliderView.MAX_RATE, option.rate);\n    }\n    (_a = option.rate) !== null && _a !== void 0 ? _a : option.rate = 0.0;\n    (_b = option.minPosition) !== null && _b !== void 0 ? _b : option.minPosition = 0.0;\n    (_c = option.isHorizontal) !== null && _c !== void 0 ? _c : option.isHorizontal = true;\n    return option;\n  }\n  static check(option) {\n    this.checkParts(option.base, "base");\n    this.checkParts(option.button, "button");\n    this.checkParts(option.mask, "mask");\n    this.checkParts(option.bar, "bar");\n  }\n  static checkParts(obj, targetName) {\n    if (obj == null) return;\n    const bounds = SliderViewUtil_SliderViewUtil.getContentsBounds(obj);\n    if (bounds.width === 0 && bounds.height === 0 && bounds.type === lib/* SHAPES.RECT */.HSM.RECT) {\n      throw new Error(`SliderView : ${targetName} 初期化オプションで指定されたDisplayObjectにバウンディングボックスが存在しません。Containerを利用する場合はhitAreaを利用してバウンディングボックスを手動で設定してください。`);\n    }\n    if (obj.parent) {\n      console.warn(`初期化オプションで指定されたパーツがすでに別の親にaddChildされています。SliderViewおよびScrollBarViewの構成パーツは同一のコンテナにaddChildされることを前提としています。`);\n    }\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(471);\n;// CONCATENATED MODULE: ./esm/scrollBar/InertialScrollManager.js\n\n\n\n\n\n/**\n * スクロールバーエリアの慣性スクロールを処理するクラス。\n */\nclass InertialScrollManager_InertialScrollManager extends (/* unused pure expression or super */ null && (EventEmitter)) {\n  get speed() {\n    return this._speed;\n  }\n  constructor(scrollBarView) {\n    super();\n    this.decelerationRate = 0.975;\n    this.overflowScrollRange = 180;\n    this._speed = 0.0;\n    this.isDragging = false;\n    this._isStart = false;\n    this.onMouseDown = e => {\n      this.updateDragPos(e);\n      this.isDragging = true;\n      this._speed = 0.0;\n      if (this.tween) this.disposeTween();\n      this.addDragListener();\n    };\n    this.onMouseMove = e => {\n      if (this.dragPos == null) return;\n      const delta = this.getDragPos(e) - this.dragPos;\n      this._speed = delta;\n      this.addTargetPosition(delta * this.getOverflowDeceleration());\n      this.updateDragPos(e);\n    };\n    this.onMouseUp = () => {\n      this.removeDragListener();\n      this.isDragging = false;\n      this.onTick();\n    };\n    this.onTick = () => {\n      var _a;\n      if (this.isDragging) return;\n      if (this._speed === 0.0 && this.getLeaveRangeFromMask() === 0.0) return;\n      if ((_a = this.tween) === null || _a === void 0 ? void 0 : _a.isPlaying()) return;\n      //位置による減速率増加。マスクエリアから離れているなら減速率が大きくなる。\n      const overflowDeceleration = this.getOverflowDeceleration();\n      this._speed *= this.decelerationRate * overflowDeceleration;\n      this.addTargetPosition(this._speed);\n      if (Math.abs(this._speed) > 0.1) return;\n      //back ease\n      this._speed = 0.0;\n      const toObj = {\n        y: this.getClampedPos()\n      };\n      this.disposeTween();\n      this.tween = new Tween(this.scrollBarView.contents.target).to(toObj, 666).onUpdate(() => {\n        this.emit("update_target_position");\n      }).easing(Easing.Cubic.Out).start();\n    };\n    this.stopInertial = () => {\n      this._speed = 0.0;\n      this.disposeTween();\n    };\n    this.disposeTween = () => {\n      if (this.tween) {\n        this.tween.stop();\n        this.tween = undefined;\n      }\n    };\n    this.scrollBarView = scrollBarView;\n    scrollBarView.scrollBarEventEmitter.on("stop_inertial_tween", this.stopInertial);\n    const target = this.scrollBarView.contents.target;\n    target.eventMode = "static";\n    this.start();\n  }\n  start() {\n    if (this._isStart) return;\n    this._isStart = true;\n    const target = this.scrollBarView.contents.target;\n    target.on("pointerdown", this.onMouseDown);\n    Ticker.shared.add(this.onTick);\n  }\n  stop() {\n    if (!this._isStart) return;\n    this._isStart = false;\n    const target = this.scrollBarView.contents.target;\n    target.off("pointerdown", this.onMouseDown);\n    this.removeDragListener();\n    this.stopInertial();\n    Ticker.shared.remove(this.onTick);\n  }\n  addDragListener() {\n    this.switchDragListener(true);\n  }\n  removeDragListener() {\n    this.switchDragListener(false);\n  }\n  switchDragListener(isOn) {\n    var _a;\n    const target = this.scrollBarView.contents.target;\n    const dragTarget = (_a = this.scrollBarView.canvas) !== null && _a !== void 0 ? _a : target;\n    const switchListener = (isOn, dragTarget, event, listener) => {\n      if (isOn) {\n        dragTarget.addEventListener(event, listener);\n      } else {\n        dragTarget.removeEventListener(event, listener);\n      }\n    };\n    switchListener(isOn, dragTarget, "pointermove", this.onMouseMove);\n    switchListener(isOn, target, "pointerup", this.onMouseUp);\n    switchListener(isOn, target, "pointerupoutside", this.onMouseUp);\n  }\n  getDragPos(e) {\n    return SliderViewUtil.getPointerEventPosition(e, this.scrollBarView.isHorizontal);\n  }\n  updateDragPos(e) {\n    this.dragPos = this.getDragPos(e);\n  }\n  addTargetPosition(delta) {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const currentPos = SliderViewUtil.getPosition(target, isHorizontal);\n    SliderViewUtil.setPosition(target, isHorizontal, currentPos + delta);\n    this.emit("update_target_position");\n  }\n  /**\n   * スクロールのオーバーフロー量から、減退率を割り出す。\n   * overflowScrollRange以上に離れている場合は0.0\n   * スクロールエリア内にコンテンツがある場合は1.0を返す。\n   */\n  getOverflowDeceleration() {\n    const difPos = this.getLeaveRangeFromMask();\n    let overflowDeceleration = (this.overflowScrollRange - difPos) / this.overflowScrollRange;\n    if (overflowDeceleration < 0.0) overflowDeceleration = 0.0;\n    return overflowDeceleration;\n  }\n  /**\n   * ターゲットコンテンツがマスク領域からどれだけ離れているか。\n   */\n  getLeaveRangeFromMask() {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const currentPos = SliderViewUtil.getPosition(target, isHorizontal);\n    const clampedPos = this.getClampedPos();\n    return Math.abs(currentPos - clampedPos);\n  }\n  getClampedPos() {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    return ScrollBarViewUtil.getClampedTargetPosition(target, this.scrollBarView.contents.mask, isHorizontal);\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/MouseWheelScrollManager.js\n\n\n\n/**\n * ScrollBarViewを受け取り、マウスホイールによる操作を行うクラス\n */\nclass MouseWheelScrollManager_MouseWheelScrollManager extends (/* unused pure expression or super */ null && (EventEmitter)) {\n  constructor(scrollBarView) {\n    super();\n    this.delta = 16;\n    this._isStart = false;\n    //TODO add support deltaX / deltaY\n    this.wheelHandler = e => {\n      const shift = e.deltaY > 0 ? -this.delta : this.delta;\n      this.scroll(shift);\n    };\n    this.scrollBarView = scrollBarView;\n    const target = this.scrollBarView.contents.target;\n    target.eventMode = "static";\n    this.start();\n  }\n  start() {\n    if (this._isStart) return;\n    const target = this.scrollBarView.contents.target;\n    target.on("wheel", this.wheelHandler);\n    this._isStart = true;\n  }\n  stop() {\n    const target = this.scrollBarView.contents.target;\n    target.off("wheel", this.wheelHandler);\n    this._isStart = false;\n  }\n  scroll(delta) {\n    const target = this.scrollBarView.contents.target;\n    const mask = this.scrollBarView.contents.mask;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const pos = SliderViewUtil.getPosition(target, isHorizontal) + delta;\n    ScrollBarViewUtil.clampTargetPosition(target, mask, pos, isHorizontal);\n    this.emit("update_target_position");\n    this.scrollBarView.scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarContents.js\n\n\n/**\n * スクロールバーで操作するコンテンツ\n */\nclass ScrollBarContents extends (/* unused pure expression or super */ null && (EventEmitter)) {\n  get target() {\n    return this._target;\n  }\n  set target(value) {\n    this._target = value;\n    this.emit("changed_contents_size");\n  }\n  get mask() {\n    return this._mask;\n  }\n  set mask(value) {\n    this._mask = value;\n    this.emit("changed_contents_size");\n  }\n  /**\n   * コンストラクタ\n   *\n   * @param target スクロール操作を受けるコンテンツ\n   * @param mask targetを切り抜くマスク\n   * @param container targetおよびmaskを格納する親コンテナ\n   */\n  constructor(target, mask, container) {\n    super();\n    this.container = container;\n    this._target = target;\n    this._mask = mask;\n    ScrollBarContents.init(this);\n  }\n  static init(scrollBarContents) {\n    if (scrollBarContents._target.mask !== scrollBarContents._mask) {\n      scrollBarContents._target.mask = scrollBarContents._mask;\n    }\n    const addToContainer = displayObject => {\n      var _a;\n      if (displayObject.parent === scrollBarContents.container) return;\n      (_a = displayObject.parent) === null || _a === void 0 ? void 0 : _a.removeChild(displayObject);\n      scrollBarContents.container.addChild(displayObject);\n    };\n    addToContainer(scrollBarContents._target);\n    addToContainer(scrollBarContents._mask);\n  }\n  /**\n   * 現状のスクロール位置を取得する。単位rate\n   * 0.0でコンテンツはTOP, 1.0でBOTTOMに位置している。\n   *\n   * @param isHorizontal\n   */\n  getScrollPositionAsRate(isHorizontal) {\n    const getPos = SliderViewUtil.getPosition;\n    const zeroPos = getPos(this.mask, isHorizontal);\n    const contentsPos = getPos(this.target, isHorizontal);\n    const contentsPositionDif = zeroPos - contentsPos;\n    const movableRange = this.getMovableRange(isHorizontal);\n    return contentsPositionDif / movableRange * SliderView.MAX_RATE;\n  }\n  /**\n   * スクロールの最大可動領域を取得する。単位px\n   * もし可動域がゼロpx以下の場合、極小の正の値を返す。\n   *\n   * @param isHorizontal\n   * @private\n   */\n  getMovableRange(isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const targetSize = getSize(this._target, isHorizontal);\n    const maskSize = getSize(this._mask, isHorizontal);\n    const dif = targetSize - maskSize;\n    if (dif <= 0.0) {\n      return 1e-128;\n    }\n    return dif;\n  }\n  /**\n   * コンテンツを、指定されたrateの位置までスクロールする\n   *\n   * @param rate\n   * @param isHorizontal\n   */\n  scroll(rate, isHorizontal) {\n    const getPos = SliderViewUtil.getPosition;\n    const zeroPos = getPos(this._mask, isHorizontal);\n    const movableRange = this.getMovableRange(isHorizontal);\n    const contentsPos = zeroPos - movableRange * (rate / SliderView.MAX_RATE);\n    SliderViewUtil.setPosition(this._target, isHorizontal, contentsPos);\n  }\n  /**\n   * コンテンツが表示領域にどれだけ表示されているかの比率を取得する。\n   * この比率は、スクロールバーボタンのスケールとなる。\n   *\n   * 例 : コンテンツサイズが200、表示領域が100なら0.5\n   * コンテンツがすべて表示されているなら1.0\n   *\n   * @param isHorizontal\n   * @return 0.0 ~ 1.0\n   */\n  getDisplayRate(isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const contentsSize = getSize(this.target, isHorizontal);\n    const maskSize = getSize(this.mask, isHorizontal);\n    return SliderViewUtil.clamp(maskSize / contentsSize, SliderView.MAX_RATE, 0.0);\n  }\n  dispose() {\n    this.removeAllListeners();\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarView.js\n\n\n\n/**\n * スクロールバーを表すクラスです。\n *\n * このクラスは、スライダーに以下の機能を追加したものです。\n *\n * \t\t1.コンテンツサイズに合わせた、スクロールバーの伸縮\n * \t\t2.スクロールバーの伸縮にあわせた、移動範囲の制限\n * \t\t3.スクロールバーの伸縮にあわせた、移動値の取得\n */\nclass ScrollBarView extends (/* unused pure expression or super */ null && (SliderView)) {\n  get autoHide() {\n    return this._autoHide;\n  }\n  set autoHide(value) {\n    this._autoHide = value;\n    this.updateSliderVisible();\n  }\n  constructor(option, scrollContents) {\n    super(option);\n    this._autoHide = false;\n    this.scrollBarEventEmitter = new EventEmitter();\n    /**\n     * スライダーイベントに応じてコンテンツをスクロールする\n     * @param {Object} e\n     */\n    this.updateContentsPosition = e => {\n      this.updateContentsPositionWithRate(e.rate);\n    };\n    const initOption = SliderViewOptionUtil.init(option);\n    this.contents = scrollContents;\n    this.contents.on("changed_contents_size", this.updateSlider);\n    this.sliderEventEmitter.on("slider_change", this.updateContentsPosition);\n    this.changeRate(initOption.rate);\n    this.wheelManager = new MouseWheelScrollManager(this);\n    this.wheelManager.on("update_target_position", () => {\n      this.updateSliderPosition();\n    });\n    this.inertialManager = new InertialScrollManager(this);\n    this.inertialManager.on("update_target_position", () => {\n      this.updateSliderPosition();\n    });\n  }\n  /**\n   * スライダーボタンの位置を制限する関数\n   * @return 制限で切り落とされたスライダーボタンの座標値\n   */\n  limitSliderButtonPosition(evt) {\n    const mousePos = this.getMousePosition(this, evt);\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.clamp(mousePos, range.max, range.min);\n  }\n  /**\n   * スライダーの割合から、スライダーの位置を取得する\n   * @param\trate\n   * @return\n   */\n  convertRateToPixel(rate) {\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.convertRateToPixel(rate, range.max, range.min);\n  }\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   * @param\tpixel\n   * @return\n   */\n  convertPixelToRate(pixel) {\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.convertPixelToRate(pixel, range.max, range.min);\n  }\n  /**\n   * スライダーボタンの可動範囲を取得する。単位ピクセル\n   */\n  getRangeOfSliderButtonPosition() {\n    const buttonSize = this.slideButtonSize;\n    const ratio = ScrollBarViewUtil.getRatioOfOrigin(this._slideButton, this.isHorizontal);\n    const max = this._maxPosition - (1.0 + ratio) * buttonSize;\n    const min = this._minPosition - ratio * buttonSize;\n    return {\n      max,\n      min\n    };\n  }\n  /**\n   * スライダーボタンのサイズ。\n   * @returns {number}\n   */\n  get slideButtonSize() {\n    this.updateSliderSize();\n    return SliderViewUtil.getSize(this._slideButton, this.isHorizontal);\n  }\n  /**\n   * スクロールバーのボタンサイズ及び位置を更新する。\n   * コンテンツサイズが変更された場合の更新にも利用する。\n   */\n  updateSlider() {\n    if (!this.isUpdatableSliderSize()) return;\n    this.updateSliderSize();\n    this.updateSliderPosition();\n  }\n  /**\n   * 現状のコンテンツおよびマスク位置から、スライダーの割合を算出する。\n   * その割合でスライダーの位置を更新する。\n   */\n  updateSliderPosition() {\n    const rate = this.contents.getScrollPositionAsRate(this.isHorizontal);\n    this.changeRate(rate);\n  }\n  isUpdatableSliderSize() {\n    var _a, _b;\n    return ((_a = this.contents) === null || _a === void 0 ? void 0 : _a.target) != null && ((_b = this.contents) === null || _b === void 0 ? void 0 : _b.mask) != null && this._slideButton != null;\n  }\n  /**\n   * スライダーボタンのサイズの伸縮を行う。\n   */\n  updateSliderSize() {\n    if (!this.isUpdatableSliderSize()) return;\n    const fullSize = this._maxPosition - this._minPosition;\n    const displayRate = this.contents.getDisplayRate(this.isHorizontal);\n    const sliderSize = fullSize * displayRate;\n    SliderViewUtil.setSize(this._slideButton, this.isHorizontal, sliderSize);\n    this.updateSliderVisible();\n  }\n  /**\n   * autoHideの条件に一致するかを判定し、表示を切り替える。\n   * @private\n   */\n  updateSliderVisible() {\n    this._slideButton.visible = !this.isHidden;\n    this._slideButton.eventMode = this.isHidden ? "none" : "static";\n  }\n  /**\n   * autoHideの条件に一致するかを判定する\n   */\n  get isHidden() {\n    //autoHideが設定されていない場合は常に表示\n    if (!this.autoHide) return false;\n    return this.contents.getDisplayRate(this.isHorizontal) === 1.0;\n  }\n  /**\n   * rate値を元にコンテンツをスクロールする。\n   * @param {number} rate\n   */\n  updateContentsPositionWithRate(rate) {\n    this.contents.scroll(rate, this.isHorizontal);\n  }\n  onPressedSliderButton(e) {\n    super.onPressedSliderButton(e);\n    this.scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n  onMoveSlider(e) {\n    super.onMoveSlider(e);\n    this.scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n  onPressBase(evt) {\n    if (this.isHidden) return;\n    super.onPressBase(evt);\n    this.scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n  onDisposeFunction(e) {\n    this.contents.dispose();\n    super.onDisposeFunction(e);\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarViewUtil.js\n\nclass ScrollBarViewUtil_ScrollBarViewUtil {\n  /**\n   * ターゲットコンテンツが、マスク領域内に収まる座標値を取得する。\n   * @param target\n   * @param mask\n   * @param isHorizontal\n   */\n  static getClampedTargetPosition(target, mask, isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const targetSize = getSize(target, isHorizontal);\n    const maskSize = getSize(mask, isHorizontal);\n    const minPos = Math.min(-targetSize + maskSize, 0.0);\n    const pos = SliderViewUtil.getPosition(target, isHorizontal);\n    return SliderViewUtil.clamp(pos, 0, minPos);\n  }\n  /**\n   * ターゲットコンテンツの位置を、マスク領域内に丸め込む。\n   * @param target\n   * @param mask\n   * @param position\n   * @param isHorizontal\n   */\n  static clampTargetPosition(target, mask, position, isHorizontal) {\n    SliderViewUtil.setPosition(target, isHorizontal, position);\n    const clampedPos = this.getClampedTargetPosition(target, mask, isHorizontal);\n    SliderViewUtil.setPosition(target, isHorizontal, clampedPos);\n  }\n  static getRatioOfOrigin(displayObj, isHorizontal) {\n    const bounds = SliderViewUtil.getContentsBounds(displayObj);\n    const size = isHorizontal ? bounds.width : bounds.height;\n    const position = isHorizontal ? bounds.x : bounds.y;\n    const ratio = position / size;\n    if (ratio > 0) {\n      console.warn(`${displayObj.name} : ボタンサイズが不適切です。ボタンの矩形内に原点が収まっていません。スクロールバーボタンは原点を囲む矩形としてください。`);\n    }\n    return ratio;\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/index.js\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./esm/SliderViewUtil.js\n\n\nclass SliderViewUtil_SliderViewUtil {\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   */\n  static convertPixelToRate(pixel, max, min) {\n    if (max <= min) {\n      return 0.0;\n    }\n    const rate = (pixel - min) / (max - min) * SliderView_SliderView.MAX_RATE;\n    return SliderViewUtil_SliderViewUtil.clamp(rate, SliderView_SliderView.MAX_RATE, 0.0);\n  }\n  static convertRateToPixel(rate, max, min) {\n    const pix = (max - min) * rate / SliderView_SliderView.MAX_RATE + min;\n    return SliderViewUtil_SliderViewUtil.clamp(pix, max, min);\n  }\n  /**\n   * ディスプレイオブジェクトからスクロール方向の座標値を取り出す\n   * @return displayObjの座標値。単位ピクセル\n   */\n  static getPosition(displayObj, isHorizontal) {\n    if (isHorizontal) {\n      return displayObj.x;\n    }\n    return displayObj.y;\n  }\n  static getPointerEventPosition(e, isHorizontal) {\n    if (e instanceof lib/* FederatedPointerEvent */.nRP) {\n      return SliderViewUtil_SliderViewUtil.getPosition(e.global, isHorizontal);\n    } else {\n      return SliderViewUtil_SliderViewUtil.getPosition(new lib/* Point */.E9j(e.offsetX, e.offsetY), isHorizontal);\n    }\n  }\n  /**\n   * ディスプレイオブジェクトにスクロール方向の座標値を設定する\n   */\n  static setPosition(displayObj, isHorizontal, position) {\n    if (!displayObj) return;\n    if (isHorizontal) {\n      displayObj.x = position;\n    } else {\n      displayObj.y = position;\n    }\n  }\n  /**\n   * スクロール方向の高さ、もしくは幅を取得する。単位ピクセル\n   */\n  static getSize(displayObj, isHorizontal) {\n    const size = SliderViewUtil_SliderViewUtil.getContentsBounds(displayObj);\n    if (isHorizontal) {\n      return size.width * displayObj.scale.x;\n    } else {\n      return size.height * displayObj.scale.y;\n    }\n  }\n  /**\n   * スクロール方向の高さ、もしくは幅を設定する。\n   * @param displayObj\n   * @param isHorizontal\n   * @param amount width or height, range : 0 ~ displayObj.size.width or height, unit : px\n   */\n  static setSize(displayObj, isHorizontal, amount) {\n    const size = SliderViewUtil_SliderViewUtil.getContentsBounds(displayObj);\n    if (isHorizontal) {\n      displayObj.scale.x = amount / size.width;\n    } else {\n      displayObj.scale.y = amount / size.height;\n    }\n  }\n  static clamp(num, max, min) {\n    num = Math.max(num, min);\n    num = Math.min(num, max);\n    return num;\n  }\n  static getContentsBounds(displayObj) {\n    if (displayObj.hitArea) return displayObj.hitArea;\n    return displayObj.getLocalBounds();\n  }\n  static getRootContainer(canvas, button) {\n    if (canvas) {\n      return canvas;\n    }\n    let parent = button.parent;\n    while (parent.parent) {\n      parent = parent.parent;\n    }\n    return parent;\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo_slider.js\n\n\nconst onDomContentsLoaded = () => {\n  const app = new lib/* Application */.MxU({\n    width: 800,\n    height: 600\n  });\n  document.body.appendChild(app.view);\n  initSlider(app.stage, app.view);\n  initNonMaskSlider(app.stage, app.view);\n};\nconst SLIDER_W = 200;\nconst SLIDER_H = 64;\n/**\n * スライダーの実装サンプル\n * @param stage\n */\nconst initSlider = (stage, view) => {\n  const slider = new SliderView_SliderView({\n    base: getSliderBase(SLIDER_W, SLIDER_H, 0x0000ff),\n    bar: getSliderBase(SLIDER_W, SLIDER_H, 0x00ffff),\n    button: getSliderButton(SLIDER_W, SLIDER_H, 0xffff00),\n    mask: getSliderMask(SLIDER_W, SLIDER_H),\n    minPosition: 0,\n    maxPosition: SLIDER_W,\n    rate: 25.0,\n    canvas: view\n  });\n  slider.sliderEventEmitter.on("ch", e => {\n    console.log(e.rate);\n  });\n  stage.addChild(slider);\n  slider.x = 200;\n  slider.y = 200;\n};\nconst initNonMaskSlider = (stage, view) => {\n  const slider = new SliderView_SliderView({\n    base: getSliderBase(SLIDER_W, SLIDER_H, 0x0000ff),\n    bar: getSliderBase(SLIDER_W, SLIDER_H, 0x00ffff),\n    button: getSliderButton(SLIDER_W, SLIDER_H, 0xffff00),\n    minPosition: 0,\n    maxPosition: SLIDER_W,\n    rate: 25.0,\n    canvas: view\n  });\n  slider.on("slider_change", e => {\n    console.log(e.rate);\n  });\n  stage.addChild(slider);\n  slider.x = 200;\n  slider.y = 400;\n};\nconst getSliderBase = (w, h, color) => {\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(color);\n  g.moveTo(0, 0).lineTo(w, 0).lineTo(w, h).lineTo(0, 0).endFill();\n  g.hitArea = new lib/* Rectangle */.AeJ(0, 0, w, h);\n  return g;\n};\nconst getSliderMask = (w, h) => {\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(0xff00ff, 0.1);\n  g.drawRect(0, 0, w, h);\n  g.hitArea = new lib/* Rectangle */.AeJ(0, 0, w, h);\n  return g;\n};\nconst getSliderButton = (w, h, color) => {\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(color, 0.5);\n  g.drawRect(-8, 0, 16, h);\n  g.hitArea = new lib/* Rectangle */.AeJ(-8, 0, 16, h);\n  return g;\n};\n\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nif (document.readyState !== "loading") {\n  onDomContentsLoaded();\n} else {\n  document.addEventListener("DOMContentLoaded", onDomContentsLoaded);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///403\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var g=1/0;for(C=0;C<deferred.length;C++){for(var[U,F,B]=deferred[C],s=!0,I=0;I<U.length;I++)(!1&B||g>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[I])))?U.splice(I--,1):(s=!1,B<g&&(g=B));if(s){deferred.splice(C--,1);var i=F();void 0!==i&&(Q=i)}}return Q}B=B||0;for(var C=deferred.length;C>0&&deferred[C-1][2]>B;C--)deferred[C]=deferred[C-1];deferred[C]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),__webpack_require__.j=414,(()=>{var Q={414:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,g,[s,I,i]=F,C=0;if(s.some((U=>0!==Q[U]))){for(B in I)__webpack_require__.o(I,B)&&(__webpack_require__.m[B]=I[B]);if(i)var l=i(__webpack_require__)}for(U&&U(F);C<s.length;C++)g=s[C],__webpack_require__.o(Q,g)&&Q[g]&&Q[g][0](),Q[g]=0;return __webpack_require__.O(l)},F=self.webpackChunk_masatomakino_pixijs_basic_scrollbar=self.webpackChunk_masatomakino_pixijs_basic_scrollbar||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(403)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();