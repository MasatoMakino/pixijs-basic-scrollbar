(()=>{"use strict";var __webpack_modules__={739:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/index.mjs + 164 modules\nvar lib = __webpack_require__(316);\n// EXTERNAL MODULE: ./node_modules/@pixi/utils/lib/index.mjs + 25 modules\nvar utils_lib = __webpack_require__(359);\n;// CONCATENATED MODULE: ./esm/SliderEvent.js\n\n/**\n * スライダーが移動した際に発行されるイベントです。\n * 現状のスライダー位置を報告します。\n */\nclass SliderEventContext {\n  constructor(rate) {\n    this.rate = rate;\n  }\n}\nclass SliderEventEmitter extends utils_lib.EventEmitter {}\n// EXTERNAL MODULE: ./node_modules/@pixi/display/lib/index.mjs + 4 modules\nvar display_lib = __webpack_require__(820);\n// EXTERNAL MODULE: ./node_modules/@pixi/events/lib/index.mjs + 7 modules\nvar events_lib = __webpack_require__(232);\n// EXTERNAL MODULE: ./node_modules/@pixi/math/lib/index.mjs + 11 modules\nvar math_lib = __webpack_require__(363);\n;// CONCATENATED MODULE: ./esm/SliderViewOption.js\n/**\n * スライダーを初期化する際のオプション\n */\n\n\nclass SliderViewOption {\n  static init(option) {\n    var _a, _b, _c;\n    if (option.rate != null) {\n      option.rate = Math.max(0, option.rate);\n      option.rate = Math.min(SliderView_SliderView.MAX_RATE, option.rate);\n    }\n    (_a = option.minPosition) !== null && _a !== void 0 ? _a : option.minPosition = 0.0;\n    (_b = option.rate) !== null && _b !== void 0 ? _b : option.rate = 0.0;\n    (_c = option.isHorizontal) !== null && _c !== void 0 ? _c : option.isHorizontal = true;\n    this.check(option);\n    return option;\n  }\n  static check(option) {\n    this.checkParts(option.base, "base");\n    this.checkParts(option.button, "button");\n    this.checkParts(option.mask, "mask");\n    this.checkParts(option.bar, "bar");\n  }\n  static checkParts(obj, targetName) {\n    if (obj == null) return;\n    const bounds = SliderView_SliderViewUtil.getContentsBounds(obj);\n    if (bounds.width === 0 && bounds.height === 0 && bounds.type === lib/* SHAPES.RECT */.HSM.RECT) {\n      throw new Error(`SliderView : ${targetName} 初期化オプションで指定されたDisplayObjectにバウンディングボックスが存在しません。Containerを利用する場合はhitAreaを利用してバウンディングボックスを手動で設定してください。`);\n    }\n    if (obj.parent) {\n      console.warn(`初期化オプションで指定されたパーツがすでに別の親にaddChildされています。SliderViewおよびScrollBarViewの構成パーツは同一のコンテナにaddChildされることを前提としています。`);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/SliderView.js\n\n\n\n\n\n/**\n * スライダー用クラスです\n *\n * 使用上の注意 :\n * オブジェクトのサイズの計測にgetLocalBounds関数を使用しています。\n * hitAreaでサイズをあらかじめ与えてください。\n */\nclass SliderView_SliderView extends display_lib/* Container */.W2 {\n  get buttonRootContainer() {\n    return this._buttonRootContainer;\n  }\n  get isHorizontal() {\n    return this._isHorizontal;\n  }\n  get sliderEventEmitter() {\n    return this._sliderEventEmitter;\n  }\n  /**\n   * @param option\n   */\n  constructor(option) {\n    super();\n    this._isHorizontal = true;\n    this.dragStartPos = new math_lib/* Point */.E9();\n    this.isDragging = false; // 現在スライド中か否か\n    this._sliderEventEmitter = new SliderEventEmitter();\n    /**\n     * スライダーのドラッグを開始する\n     * @param {Object} e\n     */\n    this.startMove = e => {\n      this.onPressedSliderButton(e);\n    };\n    /**\n     * スライダーのドラッグ中の処理\n     * @param e\n     */\n    this.moveSlider = e => {\n      this.onMoveSlider(e);\n    };\n    /**\n     * スライダーのドラッグ終了時の処理\n     * @param\te\n     */\n    this.moveSliderFinish = e => {\n      this.isDragging = false;\n      this._buttonRootContainer.removeEventListener("pointermove", this.moveSlider);\n      this._slideButton.off("pointerup", this.moveSliderFinish);\n      this._slideButton.off("pointerupoutside", this.moveSliderFinish);\n      this._sliderEventEmitter.emit("slider_change_finished", new SliderEventContext(this.rate));\n    };\n    /**\n     * このインスタンスを破棄する。\n     * @param\te\n     */\n    this.dispose = e => {\n      this.onDisposeFunction(e);\n    };\n    this.init(option);\n  }\n  /**\n   * 初期化処理\n   * @param option\n   */\n  init(option) {\n    option = SliderViewOption.init(option);\n    this._canvas = option.canvas;\n    this.base = option.base;\n    this._bar = this.initBarAndMask(option.bar);\n    this._barMask = this.initBarAndMask(option.mask);\n    if (this._bar && this._barMask) this._bar.mask = this._barMask;\n    this.slideButton = option.button;\n    this._minPosition = option.minPosition;\n    this._maxPosition = option.maxPosition;\n    this._isHorizontal = option.isHorizontal;\n    this._rate = option.rate;\n    this.changeRate(this._rate);\n  }\n  addChildParts(obj) {\n    var _a;\n    if (!obj) return;\n    (_a = obj.parent) === null || _a === void 0 ? void 0 : _a.removeChild(obj);\n    this.addChild(obj);\n  }\n  /**\n   * スライダーの位置を変更する\n   * @param\trate\tスライダーの位置 MIN 0.0 ~ MAX 100.0\n   */\n  changeRate(rate) {\n    //ドラッグ中は外部からの操作を無視する。\n    if (this.isDragging) return;\n    this._rate = rate;\n    const pos = this.convertRateToPixel(this._rate);\n    this.updateParts(pos);\n    this._sliderEventEmitter.emit("slider_change", new SliderEventContext(this.rate));\n  }\n  onPressedSliderButton(e) {\n    this.isDragging = true;\n    const target = e.currentTarget;\n    const localPos = this.toLocal(e.global);\n    this.dragStartPos = new math_lib/* Point */.E9(localPos.x - target.x, localPos.y - target.y);\n    this._buttonRootContainer = SliderView_SliderView.getRootContainer(this._canvas, this._slideButton);\n    this._buttonRootContainer.addEventListener("pointermove", this.moveSlider);\n    this._slideButton.on("pointerup", this.moveSliderFinish);\n    this._slideButton.on("pointerupoutside", this.moveSliderFinish);\n  }\n  static getRootContainer(canvas, button) {\n    if (canvas) {\n      return canvas;\n    }\n    let parent = button.parent;\n    while (parent.parent) {\n      parent = parent.parent;\n    }\n    return parent;\n  }\n  onMoveSlider(e) {\n    const mousePos = this.limitSliderButtonPosition(e);\n    this.updateParts(mousePos);\n    this._rate = this.convertPixelToRate(mousePos);\n    this._sliderEventEmitter.emit("slider_change", new SliderEventContext(this.rate));\n  }\n  /**\n   * スライダーボタンの位置を制限する関数\n   * @return 制限で切り落とされたスライダーボタンの座標値 座標の原点はSliderViewであり、ボタンやバーではない。\n   */\n  limitSliderButtonPosition(evt) {\n    const mousePos = this.getMousePosition(this, evt);\n    return SliderView_SliderViewUtil.clamp(mousePos, this._maxPosition, this._minPosition);\n  }\n  /**\n   * 各MCの位置、サイズをマウスポインタの位置に合わせて更新する\n   * moveSliderの内部処理\n   * @param\tmousePos SliderViewを原点としたローカルのマウス座標、limitSliderButtonPosition関数で可動範囲に制限済み。\n   */\n  updateParts(mousePos) {\n    const stretch = target => {\n      SliderView_SliderViewUtil.setSize(target, this._isHorizontal, mousePos - SliderView_SliderViewUtil.getPosition(target, this._isHorizontal));\n    };\n    //バーマスクがなければ、バー自体を伸縮する\n    if (this._bar && !this._barMask) {\n      stretch(this._bar);\n    }\n    //バーマスクがあれば、マスクを伸縮する。\n    if (this._barMask) {\n      stretch(this._barMask);\n    }\n    //ボタンの位置を更新する。\n    SliderView_SliderViewUtil.setPosition(this._slideButton, this._isHorizontal, mousePos);\n  }\n  /**\n   * スライダーの地をクリックした際の処理\n   * その位置までスライダーをジャンプする\n   * @param evt\n   */\n  onPressBase(evt) {\n    this.dragStartPos = new math_lib/* Point */.E9();\n    this.moveSlider(evt);\n    this._sliderEventEmitter.emit("slider_change_finished", new SliderEventContext(this.rate));\n  }\n  /**\n   * スライダーの割合から、スライダーの位置を取得する\n   * @param\trate\n   * @return\n   */\n  convertRateToPixel(rate) {\n    return SliderView_SliderViewUtil.convertRateToPixel(rate, this._maxPosition, this._minPosition);\n  }\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   * @param\tpixel\n   * @return\n   */\n  convertPixelToRate(pixel) {\n    return SliderView_SliderViewUtil.convertPixelToRate(pixel, this._maxPosition, this._minPosition);\n  }\n  /**\n   * ドラッグ中のマウス座標を取得する。\n   * limitSliderButtonPosition内の処理。\n   */\n  getMousePosition(displayObj, evt) {\n    let localPos;\n    if (evt instanceof events_lib/* FederatedPointerEvent */.nR) {\n      localPos = displayObj.toLocal(evt.global);\n    } else {\n      localPos = displayObj.toLocal(new math_lib/* Point */.E9(evt.offsetX, evt.offsetY));\n    }\n    if (this._isHorizontal) {\n      return localPos.x - this.dragStartPos.x;\n    } else {\n      return localPos.y - this.dragStartPos.y;\n    }\n  }\n  set base(value) {\n    this._base = value;\n    this._base.interactive = true;\n    this._base.on("pointertap", e => {\n      this.onPressBase(e);\n    });\n    this.addChildParts(value);\n  }\n  initBarAndMask(value) {\n    if (value == null) return;\n    value.interactive = false;\n    value.interactiveChildren = false;\n    this.addChildParts(value);\n    return value;\n  }\n  set slideButton(value) {\n    this._slideButton = value;\n    this._slideButton.on("pointerdown", this.startMove);\n    this._slideButton.interactive = true;\n    this._slideButton.interactiveChildren = false;\n    this.addChildParts(value);\n  }\n  get rate() {\n    return this._rate;\n  }\n  /**\n   * 全てのDisplayObjectとEventListenerを解除する。\n   * @param {Event} e\n   */\n  onDisposeFunction(e) {\n    this.removeAllListeners();\n    this._base.removeAllListeners();\n    this._slideButton.removeAllListeners();\n    this.removeChildren();\n  }\n}\nSliderView_SliderView.MAX_RATE = 1.0;\nclass SliderView_SliderViewUtil {\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   */\n  static convertPixelToRate(pixel, max, min) {\n    if (max <= min) {\n      return 0.0;\n    }\n    const rate = (pixel - min) / (max - min) * SliderView_SliderView.MAX_RATE;\n    return SliderView_SliderViewUtil.clamp(rate, SliderView_SliderView.MAX_RATE, 0.0);\n  }\n  static convertRateToPixel(rate, max, min) {\n    const pix = (max - min) * rate / SliderView_SliderView.MAX_RATE + min;\n    return SliderView_SliderViewUtil.clamp(pix, max, min);\n  }\n  /**\n   * ディスプレイオブジェクトからスクロール方向の座標値を取り出す\n   * @return displayObjの座標値。単位ピクセル\n   */\n  static getPosition(displayObj, isHorizontal) {\n    if (isHorizontal) {\n      return displayObj.x;\n    }\n    return displayObj.y;\n  }\n  /**\n   * ディスプレイオブジェクトにスクロール方向の座標値を設定する\n   */\n  static setPosition(displayObj, isHorizontal, position) {\n    if (!displayObj) return;\n    if (isHorizontal) {\n      displayObj.x = position;\n    } else {\n      displayObj.y = position;\n    }\n  }\n  /**\n   * スクロール方向の高さ、もしくは幅を取得する。単位ピクセル\n   */\n  static getSize(displayObj, isHorizontal) {\n    const size = SliderView_SliderViewUtil.getContentsBounds(displayObj);\n    if (isHorizontal) {\n      return size.width * displayObj.scale.x;\n    } else {\n      return size.height * displayObj.scale.y;\n    }\n  }\n  /**\n   * スクロール方向の高さ、もしくは幅を設定する。\n   * @param displayObj\n   * @param isHorizontal\n   * @param amount width or height, range : 0 ~ displayObj.size.width or height, unit : px\n   */\n  static setSize(displayObj, isHorizontal, amount) {\n    const size = SliderView_SliderViewUtil.getContentsBounds(displayObj);\n    if (isHorizontal) {\n      displayObj.scale.x = amount / size.width;\n    } else {\n      displayObj.scale.y = amount / size.height;\n    }\n  }\n  static clamp(num, max, min) {\n    num = Math.max(num, min);\n    num = Math.min(num, max);\n    return num;\n  }\n  static getContentsBounds(displayObj) {\n    if (displayObj.hitArea) return displayObj.hitArea;\n    return displayObj.getLocalBounds();\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(471);\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarViewUtil.js\n\nclass ScrollBarViewUtil_ScrollBarViewUtil {\n  /**\n   * ターゲットコンテンツが、マスク領域内に収まる座標値を取得する。\n   * @param target\n   * @param mask\n   * @param isHorizontal\n   */\n  static getClampedTargetPosition(target, mask, isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const targetSize = getSize(target, isHorizontal);\n    const maskSize = getSize(mask, isHorizontal);\n    const minPos = Math.min(-targetSize + maskSize, 0.0);\n    const pos = SliderViewUtil.getPosition(target, isHorizontal);\n    return SliderViewUtil.clamp(pos, 0, minPos);\n  }\n  /**\n   * ターゲットコンテンツの位置を、マスク領域内に丸め込む。\n   * @param target\n   * @param mask\n   * @param position\n   * @param isHorizontal\n   */\n  static clampTargetPosition(target, mask, position, isHorizontal) {\n    SliderViewUtil.setPosition(target, isHorizontal, position);\n    const clampedPos = this.getClampedTargetPosition(target, mask, isHorizontal);\n    SliderViewUtil.setPosition(target, isHorizontal, clampedPos);\n  }\n  static getRatioOfOrigin(displayObj, isHorizontal) {\n    const bounds = SliderViewUtil.getContentsBounds(displayObj);\n    const size = isHorizontal ? bounds.width : bounds.height;\n    const position = isHorizontal ? bounds.x : bounds.y;\n    const ratio = position / size;\n    if (ratio > 0) {\n      console.warn(`${displayObj.name} : ボタンサイズが不適切です。ボタンの矩形内に原点が収まっていません。スクロールバーボタンは原点を囲む矩形としてください。`);\n    }\n    return ratio;\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/InertialScrollManager.js\n\n\n\n\n/**\n * スクロールバーエリアの慣性スクロールを処理するクラス。\n */\nclass InertialScrollManager_InertialScrollManager extends lib/* utils.EventEmitter */.P6Y.EventEmitter {\n  get speed() {\n    return this._speed;\n  }\n  constructor(scrollBarView) {\n    super();\n    this.decelerationRate = 0.975;\n    this.overflowScrollRange = 180;\n    this._speed = 0.0;\n    this.isDragging = false;\n    this.onMouseDown = e => {\n      this.updateDragPos(e);\n      this.isDragging = true;\n      this._speed = 0.0;\n      if (this.tween) this.disposeTween();\n      this.addDragListener();\n    };\n    this.onMouseMove = e => {\n      const delta = this.getDragPos(e) - this.dragPos;\n      this._speed = delta;\n      this.addTargetPosition(delta * this.getOverflowDeceleration());\n      this.updateDragPos(e);\n    };\n    this.onMouseUp = e => {\n      this.removeDragListener();\n      this.isDragging = false;\n      this.onTick();\n    };\n    this.onTick = () => {\n      var _a;\n      if (this.isDragging) return;\n      if (this._speed === 0.0 && this.getLeaveRangeFromMask() === 0.0) return;\n      if ((_a = this.tween) === null || _a === void 0 ? void 0 : _a.isPlaying()) return;\n      //位置による減速率増加。マスクエリアから離れているなら減速率が大きくなる。\n      const overflowDeceleration = this.getOverflowDeceleration();\n      this._speed *= this.decelerationRate * overflowDeceleration;\n      this.addTargetPosition(this._speed);\n      if (Math.abs(this._speed) > 0.1) return;\n      //back ease\n      this._speed = 0.0;\n      const toObj = {\n        y: this.getClampedPos()\n      };\n      this.disposeTween();\n      this.tween = new Tween(this.scrollBarView.contents.target).to(toObj, 666).onUpdate(() => {\n        this.emit("update_target_position");\n      }).easing(Easing.Cubic.Out).start();\n    };\n    this.stopInertial = () => {\n      this._speed = 0.0;\n      this.disposeTween();\n    };\n    this.disposeTween = () => {\n      if (this.tween) {\n        this.tween.stop();\n        this.tween = null;\n      }\n    };\n    this.scrollBarView = scrollBarView;\n    scrollBarView.scrollBarEventEmitter.on("stop_inertial_tween", this.stopInertial);\n    const target = this.scrollBarView.contents.target;\n    target.interactive = true;\n    this.start();\n  }\n  start() {\n    if (this._isStart) return;\n    this._isStart = true;\n    const target = this.scrollBarView.contents.target;\n    target.on("pointerdown", this.onMouseDown);\n    Ticker.shared.add(this.onTick);\n  }\n  stop() {\n    if (!this._isStart) return;\n    this._isStart = false;\n    const target = this.scrollBarView.contents.target;\n    target.off("pointerdown", this.onMouseDown);\n    this.removeDragListener();\n    this.stopInertial();\n    Ticker.shared.remove(this.onTick);\n  }\n  addDragListener() {\n    this.switchDragListener(true);\n  }\n  removeDragListener() {\n    this.switchDragListener(false);\n  }\n  switchDragListener(isOn) {\n    const target = this.scrollBarView.contents.target;\n    const switchListener = (isOn, event, listener) => {\n      if (isOn) {\n        target.on(event, listener);\n      } else {\n        target.off(event, listener);\n      }\n    };\n    switchListener(isOn, "pointermove", this.onMouseMove);\n    switchListener(isOn, "pointerup", this.onMouseUp);\n    switchListener(isOn, "pointerupoutside", this.onMouseUp);\n  }\n  getDragPos(e) {\n    return SliderViewUtil.getPosition(e.global, this.scrollBarView.isHorizontal);\n  }\n  updateDragPos(e) {\n    this.dragPos = this.getDragPos(e);\n  }\n  addTargetPosition(delta) {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const currentPos = SliderViewUtil.getPosition(target, isHorizontal);\n    SliderViewUtil.setPosition(target, isHorizontal, currentPos + delta);\n    this.emit("update_target_position");\n  }\n  /**\n   * スクロールのオーバーフロー量から、減退率を割り出す。\n   * overflowScrollRange以上に離れている場合は0.0\n   * スクロールエリア内にコンテンツがある場合は1.0を返す。\n   */\n  getOverflowDeceleration() {\n    const difPos = this.getLeaveRangeFromMask();\n    let overflowDeceleration = (this.overflowScrollRange - difPos) / this.overflowScrollRange;\n    if (overflowDeceleration < 0.0) overflowDeceleration = 0.0;\n    return overflowDeceleration;\n  }\n  /**\n   * ターゲットコンテンツがマスク領域からどれだけ離れているか。\n   */\n  getLeaveRangeFromMask() {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const currentPos = SliderViewUtil.getPosition(target, isHorizontal);\n    const clampedPos = this.getClampedPos();\n    return Math.abs(currentPos - clampedPos);\n  }\n  getClampedPos() {\n    const target = this.scrollBarView.contents.target;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    return ScrollBarViewUtil.getClampedTargetPosition(target, this.scrollBarView.contents.mask, isHorizontal);\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/MouseWheelScrollManager.js\n\n\n\n/**\n * ScrollBarViewを受け取り、マウスホイールによる操作を行うクラス\n */\nclass MouseWheelScrollManager_MouseWheelScrollManager extends lib/* utils.EventEmitter */.P6Y.EventEmitter {\n  constructor(scrollBarView) {\n    super();\n    this.delta = 16;\n    //TODO add support deltaX / deltaY\n    this.wheelHandler = e => {\n      const shift = e.deltaY > 0 ? -this.delta : this.delta;\n      this.scroll(shift);\n    };\n    this.scrollBarView = scrollBarView;\n    const target = this.scrollBarView.contents.target;\n    target.interactive = true;\n    this.start();\n  }\n  start() {\n    if (this._isStart) return;\n    const target = this.scrollBarView.contents.target;\n    target.on("wheel", this.wheelHandler);\n    this._isStart = true;\n  }\n  stop() {\n    const target = this.scrollBarView.contents.target;\n    target.off("wheel", this.wheelHandler);\n    this._isStart = false;\n  }\n  scroll(delta) {\n    const target = this.scrollBarView.contents.target;\n    const mask = this.scrollBarView.contents.mask;\n    const isHorizontal = this.scrollBarView.isHorizontal;\n    const pos = SliderViewUtil.getPosition(target, isHorizontal) + delta;\n    ScrollBarViewUtil.clampTargetPosition(target, mask, pos, isHorizontal);\n    this.emit("update_target_position");\n    this.scrollBarView.scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarContentsEventType.js\nvar ScrollBarContentsEventType_ScrollBarContentsEventType;\n(function (ScrollBarContentsEventType) {\n  ScrollBarContentsEventType["CHANGED_CONTENTS_SIZE"] = "ScrollBarContentsEventType_CHANGED_CONTENTS_SIZE";\n})(ScrollBarContentsEventType_ScrollBarContentsEventType || (ScrollBarContentsEventType_ScrollBarContentsEventType = {}));\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarContents.js\n\n\n\n/**\n * スクロールバーで操作するコンテンツ\n */\nclass ScrollBarContents extends (/* unused pure expression or super */ null && (EventEmitter)) {\n  get target() {\n    return this._target;\n  }\n  set target(value) {\n    this._target = value;\n    this.emit(ScrollBarContentsEventType.CHANGED_CONTENTS_SIZE);\n  }\n  get mask() {\n    return this._mask;\n  }\n  set mask(value) {\n    this._mask = value;\n    this.emit(ScrollBarContentsEventType.CHANGED_CONTENTS_SIZE);\n  }\n  /**\n   * コンストラクタ\n   *\n   * @param target スクロール操作を受けるコンテンツ\n   * @param mask targetを切り抜くマスク\n   * @param container targetおよびmaskを格納する親コンテナ\n   */\n  constructor(target, mask, container) {\n    super();\n    this.container = container;\n    this._target = target;\n    this._mask = mask;\n    ScrollBarContents.init(this);\n  }\n  static init(scrollBarContents) {\n    if (scrollBarContents._target.mask !== scrollBarContents._mask) {\n      scrollBarContents._target.mask = scrollBarContents._mask;\n    }\n    const addToContainer = displayObject => {\n      var _a;\n      if (displayObject.parent === scrollBarContents.container) return;\n      (_a = displayObject.parent) === null || _a === void 0 ? void 0 : _a.removeChild(displayObject);\n      scrollBarContents.container.addChild(displayObject);\n    };\n    addToContainer(scrollBarContents._target);\n    addToContainer(scrollBarContents._mask);\n  }\n  /**\n   * 現状のスクロール位置を取得する。単位rate\n   * 0.0でコンテンツはTOP, 1.0でBOTTOMに位置している。\n   *\n   * @param isHorizontal\n   */\n  getScrollPositionAsRate(isHorizontal) {\n    const getPos = SliderViewUtil.getPosition;\n    const zeroPos = getPos(this.mask, isHorizontal);\n    const contentsPos = getPos(this.target, isHorizontal);\n    const contentsPositionDif = zeroPos - contentsPos;\n    const movableRange = this.getMovableRange(isHorizontal);\n    return contentsPositionDif / movableRange * SliderView.MAX_RATE;\n  }\n  /**\n   * スクロールの最大可動領域を取得する。単位px\n   * もし可動域がゼロpx以下の場合、極小の正の値を返す。\n   *\n   * @param isHorizontal\n   * @private\n   */\n  getMovableRange(isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const targetSize = getSize(this._target, isHorizontal);\n    const maskSize = getSize(this._mask, isHorizontal);\n    const dif = targetSize - maskSize;\n    if (dif <= 0.0) {\n      return 1e-128;\n    }\n    return dif;\n  }\n  /**\n   * コンテンツを、指定されたrateの位置までスクロールする\n   *\n   * @param rate\n   * @param isHorizontal\n   */\n  scroll(rate, isHorizontal) {\n    const getPos = SliderViewUtil.getPosition;\n    const zeroPos = getPos(this._mask, isHorizontal);\n    const movableRange = this.getMovableRange(isHorizontal);\n    const contentsPos = zeroPos - movableRange * (rate / SliderView.MAX_RATE);\n    SliderViewUtil.setPosition(this._target, isHorizontal, contentsPos);\n  }\n  /**\n   * コンテンツが表示領域にどれだけ表示されているかの比率を取得する。\n   * この比率は、スクロールバーボタンのスケールとなる。\n   *\n   * 例 : コンテンツサイズが200、表示領域が100なら0.5\n   * コンテンツがすべて表示されているなら1.0\n   *\n   * @param isHorizontal\n   * @return 0.0 ~ 1.0\n   */\n  getDisplayRate(isHorizontal) {\n    const getSize = SliderViewUtil.getSize;\n    const contentsSize = getSize(this.target, isHorizontal);\n    const maskSize = getSize(this.mask, isHorizontal);\n    return SliderViewUtil.clamp(maskSize / contentsSize, SliderView.MAX_RATE, 0.0);\n  }\n  dispose() {\n    this.removeAllListeners();\n    this.container = null;\n    this._mask = null;\n    this._target = null;\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarEvent.js\n\nclass ScrollBarEvent_ScrollBarEventEmitter extends lib/* utils.EventEmitter */.P6Y.EventEmitter {}\n;// CONCATENATED MODULE: ./esm/scrollBar/ScrollBarView.js\n\n\n\n\n\n\n/**\n * スクロールバーを表すクラスです。\n *\n * このクラスは、スライダーに以下の機能を追加したものです。\n *\n * \t\t1.コンテンツサイズに合わせた、スクロールバーの伸縮\n * \t\t2.スクロールバーの伸縮にあわせた、移動範囲の制限\n * \t\t3.スクロールバーの伸縮にあわせた、移動値の取得\n */\nclass ScrollBarView extends (/* unused pure expression or super */ null && (SliderView)) {\n  get contents() {\n    return this._contents;\n  }\n  get autoHide() {\n    return this._autoHide;\n  }\n  set autoHide(value) {\n    this._autoHide = value;\n    this.updateSliderVisible();\n  }\n  get scrollBarEventEmitter() {\n    return this._scrollBarEventEmitter;\n  }\n  constructor(option, scrollContents) {\n    super(option);\n    this._autoHide = false;\n    this._scrollBarEventEmitter = new ScrollBarEventEmitter();\n    /**\n     * スライダーイベントに応じてコンテンツをスクロールする\n     * @param {Object} e\n     */\n    this.updateContentsPosition = e => {\n      const evt = e;\n      this.updateContentsPositionWithRate(evt.rate);\n    };\n    this._contents = scrollContents;\n    this._contents.on(ScrollBarContentsEventType.CHANGED_CONTENTS_SIZE, this.updateSlider);\n    this._sliderEventEmitter.on("slider_change", this.updateContentsPosition);\n    this.changeRate(option.rate);\n    this.wheelManager = new MouseWheelScrollManager(this);\n    this.wheelManager.on("update_target_position", () => {\n      this.updateSliderPosition();\n    });\n    this.inertialManager = new InertialScrollManager(this);\n    this.inertialManager.on("update_target_position", () => {\n      this.updateSliderPosition();\n    });\n  }\n  /**\n   * スライダーボタンの位置を制限する関数\n   * @return 制限で切り落とされたスライダーボタンの座標値\n   */\n  limitSliderButtonPosition(evt) {\n    const mousePos = this.getMousePosition(this, evt);\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.clamp(mousePos, range.max, range.min);\n  }\n  /**\n   * スライダーの割合から、スライダーの位置を取得する\n   * @param\trate\n   * @return\n   */\n  convertRateToPixel(rate) {\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.convertRateToPixel(rate, range.max, range.min);\n  }\n  /**\n   * スライダーの座標から、スライダーの割合を取得する\n   * @param\tpixel\n   * @return\n   */\n  convertPixelToRate(pixel) {\n    const range = this.getRangeOfSliderButtonPosition();\n    return SliderViewUtil.convertPixelToRate(pixel, range.max, range.min);\n  }\n  /**\n   * スライダーボタンの可動範囲を取得する。単位ピクセル\n   */\n  getRangeOfSliderButtonPosition() {\n    const buttonSize = this.slideButtonSize;\n    const ratio = ScrollBarViewUtil.getRatioOfOrigin(this._slideButton, this.isHorizontal);\n    const max = this._maxPosition - (1.0 + ratio) * buttonSize;\n    const min = this._minPosition - ratio * buttonSize;\n    return {\n      max,\n      min\n    };\n  }\n  /**\n   * スライダーボタンのサイズ。\n   * @returns {number}\n   */\n  get slideButtonSize() {\n    this.updateSliderSize();\n    return SliderViewUtil.getSize(this._slideButton, this.isHorizontal);\n  }\n  /**\n   * スクロールバーのボタンサイズ及び位置を更新する。\n   * コンテンツサイズが変更された場合の更新にも利用する。\n   */\n  updateSlider() {\n    if (!this.isUpdatableSliderSize()) return;\n    this.updateSliderSize();\n    this.updateSliderPosition();\n  }\n  /**\n   * 現状のコンテンツおよびマスク位置から、スライダーの割合を算出する。\n   * その割合でスライダーの位置を更新する。\n   */\n  updateSliderPosition() {\n    const rate = this.contents.getScrollPositionAsRate(this.isHorizontal);\n    this.changeRate(rate);\n  }\n  isUpdatableSliderSize() {\n    var _a, _b;\n    return ((_a = this._contents) === null || _a === void 0 ? void 0 : _a.target) != null && ((_b = this._contents) === null || _b === void 0 ? void 0 : _b.mask) != null && this._slideButton != null;\n  }\n  /**\n   * スライダーボタンのサイズの伸縮を行う。\n   */\n  updateSliderSize() {\n    if (!this.isUpdatableSliderSize()) return;\n    const fullSize = this._maxPosition - this._minPosition;\n    const displayRate = this._contents.getDisplayRate(this.isHorizontal);\n    const sliderSize = fullSize * displayRate;\n    SliderViewUtil.setSize(this._slideButton, this.isHorizontal, sliderSize);\n    this.updateSliderVisible();\n  }\n  /**\n   * autoHideの条件に一致するかを判定し、表示を切り替える。\n   * @private\n   */\n  updateSliderVisible() {\n    this._slideButton.visible = this._slideButton.interactive = !this.isHidden;\n  }\n  /**\n   * autoHideの条件に一致するかを判定する\n   */\n  get isHidden() {\n    //autoHideが設定されていない場合は常に表示\n    if (!this.autoHide) return false;\n    return this._contents.getDisplayRate(this.isHorizontal) === 1.0;\n  }\n  /**\n   * rate値を元にコンテンツをスクロールする。\n   * @param {number} rate\n   */\n  updateContentsPositionWithRate(rate) {\n    this._contents.scroll(rate, this.isHorizontal);\n  }\n  onPressedSliderButton(e) {\n    super.onPressedSliderButton(e);\n    this._scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n  onMoveSlider(e) {\n    super.onMoveSlider(e);\n    this._scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n  onPressBase(evt) {\n    if (this.isHidden) return;\n    super.onPressBase(evt);\n    this._scrollBarEventEmitter.emit("stop_inertial_tween");\n  }\n  onDisposeFunction(e) {\n    this._contents.dispose();\n    this._contents = null;\n    super.onDisposeFunction(e);\n  }\n}\n;// CONCATENATED MODULE: ./esm/scrollBar/index.js\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo_slider.js\n\n\nconst onDomContentsLoaded = () => {\n  const app = new lib/* Application */.MxU({\n    width: 800,\n    height: 600\n  });\n  document.body.appendChild(app.view);\n  initSlider(app.stage, app.view);\n  initNonMaskSlider(app.stage, app.view);\n};\nconst SLIDER_W = 200;\nconst SLIDER_H = 64;\n/**\n * スライダーの実装サンプル\n * @param stage\n */\nconst initSlider = (stage, view) => {\n  const slider = new SliderView_SliderView({\n    base: getSliderBase(SLIDER_W, SLIDER_H, 0x0000ff),\n    bar: getSliderBase(SLIDER_W, SLIDER_H, 0x00ffff),\n    button: getSliderButton(SLIDER_W, SLIDER_H, 0xffff00),\n    mask: getSliderMask(SLIDER_W, SLIDER_H),\n    minPosition: 0,\n    maxPosition: SLIDER_W,\n    rate: 25.0,\n    canvas: view\n  });\n  slider.sliderEventEmitter.on("ch", e => {\n    console.log(e.rate);\n  });\n  stage.addChild(slider);\n  slider.x = 200;\n  slider.y = 200;\n};\nconst initNonMaskSlider = (stage, view) => {\n  const slider = new SliderView_SliderView({\n    base: getSliderBase(SLIDER_W, SLIDER_H, 0x0000ff),\n    bar: getSliderBase(SLIDER_W, SLIDER_H, 0x00ffff),\n    button: getSliderButton(SLIDER_W, SLIDER_H, 0xffff00),\n    minPosition: 0,\n    maxPosition: SLIDER_W,\n    rate: 25.0,\n    canvas: view\n  });\n  slider.on("slider_change", e => {\n    console.log(e.rate);\n  });\n  stage.addChild(slider);\n  slider.x = 200;\n  slider.y = 400;\n};\nconst getSliderBase = (w, h, color) => {\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(color);\n  g.moveTo(0, 0).lineTo(w, 0).lineTo(w, h).lineTo(0, 0).endFill();\n  g.hitArea = new lib/* Rectangle */.AeJ(0, 0, w, h);\n  return g;\n};\nconst getSliderMask = (w, h) => {\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(0xff00ff, 0.1);\n  g.drawRect(0, 0, w, h);\n  g.hitArea = new lib/* Rectangle */.AeJ(0, 0, w, h);\n  return g;\n};\nconst getSliderButton = (w, h, color) => {\n  const g = new lib/* Graphics */.TCu();\n  g.beginFill(color, 0.5);\n  g.drawRect(-8, 0, 16, h);\n  g.hitArea = new lib/* Rectangle */.AeJ(-8, 0, 16, h);\n  return g;\n};\n\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nif (document.readyState !== "loading") {\n  onDomContentsLoaded();\n} else {\n  document.addEventListener("DOMContentLoaded", onDomContentsLoaded);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUNLLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFUixDQUFDLEVBQUVDLENBQUMsQ0FBQztFQUN0QkUsQ0FBQyxDQUFDdEksT0FBTyxHQUFHLElBQUlrSCxzQkFBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUVpQixDQUFDLEVBQUVDLENBQUMsQ0FBQztFQUNyQyxPQUFPRSxDQUFDO0FBQ1YsQ0FBQztBQUVELE1BQU1OLGVBQWUsR0FBR0EsQ0FBQ0csQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEtBQUssS0FBSztFQUN2QyxNQUFNQyxDQUFDLEdBQUcsSUFBSXJCLHFCQUFRLEVBQUU7RUFDeEJxQixDQUFDLENBQUNDLFNBQVMsQ0FBQ0YsS0FBSyxFQUFFLEdBQUcsQ0FBQztFQUN2QkMsQ0FBQyxDQUFDSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRVAsQ0FBQyxDQUFDO0VBQ3hCRSxDQUFDLENBQUN0SSxPQUFPLEdBQUcsSUFBSWtILHNCQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRWtCLENBQUMsQ0FBQztFQUN2QyxPQUFPRSxDQUFDO0FBQ1YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxJQUFJakIsUUFBUSxDQUFDdUIsVUFBVSxLQUFLLFNBQVMsRUFBRTtFQUNyQ3pCLG1CQUFtQixFQUFFO0FBQ3ZCLENBQUMsTUFBTTtFQUNMRSxRQUFRLENBQUNuSixnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRWlKLG1CQUFtQixDQUFDO0FBQ3BFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL1NsaWRlckV2ZW50LmpzPzY0M2YiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL1NsaWRlclZpZXdPcHRpb24uanM/YmU4NCIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vU2xpZGVyVmlldy5qcz80ZmMyIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9zY3JvbGxCYXIvU2Nyb2xsQmFyVmlld1V0aWwuanM/ZjJjMyIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vc2Nyb2xsQmFyL0luZXJ0aWFsU2Nyb2xsTWFuYWdlci5qcz8zNmJmIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9zY3JvbGxCYXIvTW91c2VXaGVlbFNjcm9sbE1hbmFnZXIuanM/YjcwYyIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vc2Nyb2xsQmFyL1Njcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlLmpzP2Y0MjMiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL3Njcm9sbEJhci9TY3JvbGxCYXJDb250ZW50cy5qcz81YWQ1Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLWJhc2ljLXNjcm9sbGJhci8uL2VzbS9zY3JvbGxCYXIvU2Nyb2xsQmFyRXZlbnQuanM/NTYzYyIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vc2Nyb2xsQmFyL1Njcm9sbEJhclZpZXcuanM/YTBmZiIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1iYXNpYy1zY3JvbGxiYXIvLi9lc20vc2Nyb2xsQmFyL2luZGV4LmpzP2Y1MjEiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZXNtL2luZGV4LmpzP2IyMzkiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtYmFzaWMtc2Nyb2xsYmFyLy4vZGVtb1NyYy9kZW1vX3NsaWRlci5qcz82OGUxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJAcGl4aS91dGlsc1wiO1xuLyoqXG4gKiDjgrnjg6njgqTjg4Djg7zjgYznp7vli5XjgZfjgZ/pmpvjgavnmbrooYzjgZXjgozjgovjgqTjg5njg7Pjg4jjgafjgZnjgIJcbiAqIOePvueKtuOBruOCueODqeOCpOODgOODvOS9jee9ruOCkuWgseWRiuOBl+OBvuOBmeOAglxuICovXG5leHBvcnQgY2xhc3MgU2xpZGVyRXZlbnRDb250ZXh0IHtcbiAgICBjb25zdHJ1Y3RvcihyYXRlKSB7XG4gICAgICAgIHRoaXMucmF0ZSA9IHJhdGU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFNsaWRlckV2ZW50RW1pdHRlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG59XG4iLCIvKipcbiAqIOOCueODqeOCpOODgOODvOOCkuWIneacn+WMluOBmeOCi+mam+OBruOCquODl+OCt+ODp+ODs1xuICovXG5pbXBvcnQgeyBTSEFQRVMgfSBmcm9tIFwicGl4aS5qc1wiO1xuaW1wb3J0IHsgU2xpZGVyVmlldywgU2xpZGVyVmlld1V0aWwgfSBmcm9tIFwiLi9TbGlkZXJWaWV3XCI7XG5leHBvcnQgY2xhc3MgU2xpZGVyVmlld09wdGlvbiB7XG4gICAgc3RhdGljIGluaXQob3B0aW9uKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBpZiAob3B0aW9uLnJhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9uLnJhdGUgPSBNYXRoLm1heCgwLCBvcHRpb24ucmF0ZSk7XG4gICAgICAgICAgICBvcHRpb24ucmF0ZSA9IE1hdGgubWluKFNsaWRlclZpZXcuTUFYX1JBVEUsIG9wdGlvbi5yYXRlKTtcbiAgICAgICAgfVxuICAgICAgICAoX2EgPSBvcHRpb24ubWluUG9zaXRpb24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChvcHRpb24ubWluUG9zaXRpb24gPSAwLjApO1xuICAgICAgICAoX2IgPSBvcHRpb24ucmF0ZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogKG9wdGlvbi5yYXRlID0gMC4wKTtcbiAgICAgICAgKF9jID0gb3B0aW9uLmlzSG9yaXpvbnRhbCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogKG9wdGlvbi5pc0hvcml6b250YWwgPSB0cnVlKTtcbiAgICAgICAgdGhpcy5jaGVjayhvcHRpb24pO1xuICAgICAgICByZXR1cm4gb3B0aW9uO1xuICAgIH1cbiAgICBzdGF0aWMgY2hlY2sob3B0aW9uKSB7XG4gICAgICAgIHRoaXMuY2hlY2tQYXJ0cyhvcHRpb24uYmFzZSwgXCJiYXNlXCIpO1xuICAgICAgICB0aGlzLmNoZWNrUGFydHMob3B0aW9uLmJ1dHRvbiwgXCJidXR0b25cIik7XG4gICAgICAgIHRoaXMuY2hlY2tQYXJ0cyhvcHRpb24ubWFzaywgXCJtYXNrXCIpO1xuICAgICAgICB0aGlzLmNoZWNrUGFydHMob3B0aW9uLmJhciwgXCJiYXJcIik7XG4gICAgfVxuICAgIHN0YXRpYyBjaGVja1BhcnRzKG9iaiwgdGFyZ2V0TmFtZSkge1xuICAgICAgICBpZiAob2JqID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IFNsaWRlclZpZXdVdGlsLmdldENvbnRlbnRzQm91bmRzKG9iaik7XG4gICAgICAgIGlmIChib3VuZHMud2lkdGggPT09IDAgJiZcbiAgICAgICAgICAgIGJvdW5kcy5oZWlnaHQgPT09IDAgJiZcbiAgICAgICAgICAgIGJvdW5kcy50eXBlID09PSBTSEFQRVMuUkVDVCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTbGlkZXJWaWV3IDogJHt0YXJnZXROYW1lfSDliJ3mnJ/ljJbjgqrjg5fjgrfjg6fjg7PjgafmjIflrprjgZXjgozjgZ9EaXNwbGF5T2JqZWN044Gr44OQ44Km44Oz44OH44Kj44Oz44Kw44Oc44OD44Kv44K544GM5a2Y5Zyo44GX44G+44Gb44KT44CCQ29udGFpbmVy44KS5Yip55So44GZ44KL5aC05ZCI44GvaGl0QXJlYeOCkuWIqeeUqOOBl+OBpuODkOOCpuODs+ODh+OCo+ODs+OCsOODnOODg+OCr+OCueOCkuaJi+WLleOBp+ioreWumuOBl+OBpuOBj+OBoOOBleOBhOOAgmApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmoucGFyZW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYOWIneacn+WMluOCquODl+OCt+ODp+ODs+OBp+aMh+WumuOBleOCjOOBn+ODkeODvOODhOOBjOOBmeOBp+OBq+WIpeOBruimquOBq2FkZENoaWxk44GV44KM44Gm44GE44G+44GZ44CCU2xpZGVyVmlld+OBiuOCiOOBs1Njcm9sbEJhclZpZXfjga7mp4vmiJDjg5Hjg7zjg4Tjga/lkIzkuIDjga7jgrPjg7Pjg4bjg4rjgathZGRDaGlsZOOBleOCjOOCi+OBk+OBqOOCkuWJjeaPkOOBqOOBl+OBpuOBhOOBvuOBmeOAgmApO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSBcIkBwaXhpL2Rpc3BsYXlcIjtcbmltcG9ydCB7IEZlZGVyYXRlZFBvaW50ZXJFdmVudCB9IGZyb20gXCJAcGl4aS9ldmVudHNcIjtcbmltcG9ydCB7IFBvaW50IH0gZnJvbSBcIkBwaXhpL21hdGhcIjtcbmltcG9ydCB7IFNsaWRlckV2ZW50Q29udGV4dCwgU2xpZGVyRXZlbnRFbWl0dGVyIH0gZnJvbSBcIi4vU2xpZGVyRXZlbnRcIjtcbmltcG9ydCB7IFNsaWRlclZpZXdPcHRpb24gfSBmcm9tIFwiLi9TbGlkZXJWaWV3T3B0aW9uXCI7XG4vKipcbiAqIOOCueODqeOCpOODgOODvOeUqOOCr+ODqeOCueOBp+OBmVxuICpcbiAqIOS9v+eUqOS4iuOBruazqOaEjyA6XG4gKiDjgqrjg5bjgrjjgqfjgq/jg4jjga7jgrXjgqTjgrrjga7oqIjmuKzjgatnZXRMb2NhbEJvdW5kc+mWouaVsOOCkuS9v+eUqOOBl+OBpuOBhOOBvuOBmeOAglxuICogaGl0QXJlYeOBp+OCteOCpOOCuuOCkuOBguOCieOBi+OBmOOCgeS4juOBiOOBpuOBj+OBoOOBleOBhOOAglxuICovXG5leHBvcnQgY2xhc3MgU2xpZGVyVmlldyBleHRlbmRzIENvbnRhaW5lciB7XG4gICAgZ2V0IGJ1dHRvblJvb3RDb250YWluZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idXR0b25Sb290Q29udGFpbmVyO1xuICAgIH1cbiAgICBnZXQgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNIb3Jpem9udGFsO1xuICAgIH1cbiAgICBnZXQgc2xpZGVyRXZlbnRFbWl0dGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2xpZGVyRXZlbnRFbWl0dGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb3B0aW9uXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0aW9uKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2lzSG9yaXpvbnRhbCA9IHRydWU7XG4gICAgICAgIHRoaXMuZHJhZ1N0YXJ0UG9zID0gbmV3IFBvaW50KCk7XG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlOyAvLyDnj77lnKjjgrnjg6njgqTjg4nkuK3jgYvlkKbjgYtcbiAgICAgICAgdGhpcy5fc2xpZGVyRXZlbnRFbWl0dGVyID0gbmV3IFNsaWRlckV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICog44K544Op44Kk44OA44O844Gu44OJ44Op44OD44Kw44KS6ZaL5aeL44GZ44KLXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YXJ0TW92ZSA9IChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uUHJlc3NlZFNsaWRlckJ1dHRvbihlKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOOCueODqeOCpOODgOODvOOBruODieODqeODg+OCsOS4reOBruWHpueQhlxuICAgICAgICAgKiBAcGFyYW0gZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tb3ZlU2xpZGVyID0gKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25Nb3ZlU2xpZGVyKGUpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICog44K544Op44Kk44OA44O844Gu44OJ44Op44OD44Kw57WC5LqG5pmC44Gu5Yem55CGXG4gICAgICAgICAqIEBwYXJhbVx0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tb3ZlU2xpZGVyRmluaXNoID0gKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9uUm9vdENvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5tb3ZlU2xpZGVyKTtcbiAgICAgICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uLm9mZihcInBvaW50ZXJ1cFwiLCB0aGlzLm1vdmVTbGlkZXJGaW5pc2gpO1xuICAgICAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24ub2ZmKFwicG9pbnRlcnVwb3V0c2lkZVwiLCB0aGlzLm1vdmVTbGlkZXJGaW5pc2gpO1xuICAgICAgICAgICAgdGhpcy5fc2xpZGVyRXZlbnRFbWl0dGVyLmVtaXQoXCJzbGlkZXJfY2hhbmdlX2ZpbmlzaGVkXCIsIG5ldyBTbGlkZXJFdmVudENvbnRleHQodGhpcy5yYXRlKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDjgZPjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLnoLTmo4TjgZnjgovjgIJcbiAgICAgICAgICogQHBhcmFtXHRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpc3Bvc2UgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkRpc3Bvc2VGdW5jdGlvbihlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pbml0KG9wdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOWIneacn+WMluWHpueQhlxuICAgICAqIEBwYXJhbSBvcHRpb25cbiAgICAgKi9cbiAgICBpbml0KG9wdGlvbikge1xuICAgICAgICBvcHRpb24gPSBTbGlkZXJWaWV3T3B0aW9uLmluaXQob3B0aW9uKTtcbiAgICAgICAgdGhpcy5fY2FudmFzID0gb3B0aW9uLmNhbnZhcztcbiAgICAgICAgdGhpcy5iYXNlID0gb3B0aW9uLmJhc2U7XG4gICAgICAgIHRoaXMuX2JhciA9IHRoaXMuaW5pdEJhckFuZE1hc2sob3B0aW9uLmJhcik7XG4gICAgICAgIHRoaXMuX2Jhck1hc2sgPSB0aGlzLmluaXRCYXJBbmRNYXNrKG9wdGlvbi5tYXNrKTtcbiAgICAgICAgaWYgKHRoaXMuX2JhciAmJiB0aGlzLl9iYXJNYXNrKVxuICAgICAgICAgICAgdGhpcy5fYmFyLm1hc2sgPSB0aGlzLl9iYXJNYXNrO1xuICAgICAgICB0aGlzLnNsaWRlQnV0dG9uID0gb3B0aW9uLmJ1dHRvbjtcbiAgICAgICAgdGhpcy5fbWluUG9zaXRpb24gPSBvcHRpb24ubWluUG9zaXRpb247XG4gICAgICAgIHRoaXMuX21heFBvc2l0aW9uID0gb3B0aW9uLm1heFBvc2l0aW9uO1xuICAgICAgICB0aGlzLl9pc0hvcml6b250YWwgPSBvcHRpb24uaXNIb3Jpem9udGFsO1xuICAgICAgICB0aGlzLl9yYXRlID0gb3B0aW9uLnJhdGU7XG4gICAgICAgIHRoaXMuY2hhbmdlUmF0ZSh0aGlzLl9yYXRlKTtcbiAgICB9XG4gICAgYWRkQ2hpbGRQYXJ0cyhvYmopIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIW9iailcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgKF9hID0gb2JqLnBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlbW92ZUNoaWxkKG9iaik7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQob2JqKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Gu5L2N572u44KS5aSJ5pu044GZ44KLXG4gICAgICogQHBhcmFtXHRyYXRlXHTjgrnjg6njgqTjg4Djg7zjga7kvY3nva4gTUlOIDAuMCB+IE1BWCAxMDAuMFxuICAgICAqL1xuICAgIGNoYW5nZVJhdGUocmF0ZSkge1xuICAgICAgICAvL+ODieODqeODg+OCsOS4reOBr+WklumDqOOBi+OCieOBruaTjeS9nOOCkueEoeimluOBmeOCi+OAglxuICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9yYXRlID0gcmF0ZTtcbiAgICAgICAgY29uc3QgcG9zID0gdGhpcy5jb252ZXJ0UmF0ZVRvUGl4ZWwodGhpcy5fcmF0ZSk7XG4gICAgICAgIHRoaXMudXBkYXRlUGFydHMocG9zKTtcbiAgICAgICAgdGhpcy5fc2xpZGVyRXZlbnRFbWl0dGVyLmVtaXQoXCJzbGlkZXJfY2hhbmdlXCIsIG5ldyBTbGlkZXJFdmVudENvbnRleHQodGhpcy5yYXRlKSk7XG4gICAgfVxuICAgIG9uUHJlc3NlZFNsaWRlckJ1dHRvbihlKSB7XG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGUuY3VycmVudFRhcmdldDtcbiAgICAgICAgY29uc3QgbG9jYWxQb3MgPSB0aGlzLnRvTG9jYWwoZS5nbG9iYWwpO1xuICAgICAgICB0aGlzLmRyYWdTdGFydFBvcyA9IG5ldyBQb2ludChsb2NhbFBvcy54IC0gdGFyZ2V0LngsIGxvY2FsUG9zLnkgLSB0YXJnZXQueSk7XG4gICAgICAgIHRoaXMuX2J1dHRvblJvb3RDb250YWluZXIgPSBTbGlkZXJWaWV3LmdldFJvb3RDb250YWluZXIodGhpcy5fY2FudmFzLCB0aGlzLl9zbGlkZUJ1dHRvbik7XG4gICAgICAgIHRoaXMuX2J1dHRvblJvb3RDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIHRoaXMubW92ZVNsaWRlcik7XG4gICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uLm9uKFwicG9pbnRlcnVwXCIsIHRoaXMubW92ZVNsaWRlckZpbmlzaCk7XG4gICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uLm9uKFwicG9pbnRlcnVwb3V0c2lkZVwiLCB0aGlzLm1vdmVTbGlkZXJGaW5pc2gpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Um9vdENvbnRhaW5lcihjYW52YXMsIGJ1dHRvbikge1xuICAgICAgICBpZiAoY2FudmFzKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJlbnQgPSBidXR0b24ucGFyZW50O1xuICAgICAgICB3aGlsZSAocGFyZW50LnBhcmVudCkge1xuICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgIH1cbiAgICBvbk1vdmVTbGlkZXIoZSkge1xuICAgICAgICBjb25zdCBtb3VzZVBvcyA9IHRoaXMubGltaXRTbGlkZXJCdXR0b25Qb3NpdGlvbihlKTtcbiAgICAgICAgdGhpcy51cGRhdGVQYXJ0cyhtb3VzZVBvcyk7XG4gICAgICAgIHRoaXMuX3JhdGUgPSB0aGlzLmNvbnZlcnRQaXhlbFRvUmF0ZShtb3VzZVBvcyk7XG4gICAgICAgIHRoaXMuX3NsaWRlckV2ZW50RW1pdHRlci5lbWl0KFwic2xpZGVyX2NoYW5nZVwiLCBuZXcgU2xpZGVyRXZlbnRDb250ZXh0KHRoaXMucmF0ZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjg5zjgr/jg7Pjga7kvY3nva7jgpLliLbpmZDjgZnjgovplqLmlbBcbiAgICAgKiBAcmV0dXJuIOWItumZkOOBp+WIh+OCiuiQveOBqOOBleOCjOOBn+OCueODqeOCpOODgOODvOODnOOCv+ODs+OBruW6p+aomeWApCDluqfmqJnjga7ljp/ngrnjga9TbGlkZXJWaWV344Gn44GC44KK44CB44Oc44K/44Oz44KE44OQ44O844Gn44Gv44Gq44GE44CCXG4gICAgICovXG4gICAgbGltaXRTbGlkZXJCdXR0b25Qb3NpdGlvbihldnQpIHtcbiAgICAgICAgY29uc3QgbW91c2VQb3MgPSB0aGlzLmdldE1vdXNlUG9zaXRpb24odGhpcywgZXZ0KTtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmNsYW1wKG1vdXNlUG9zLCB0aGlzLl9tYXhQb3NpdGlvbiwgdGhpcy5fbWluUG9zaXRpb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDlkIRNQ+OBruS9jee9ruOAgeOCteOCpOOCuuOCkuODnuOCpuOCueODneOCpOODs+OCv+OBruS9jee9ruOBq+WQiOOCj+OBm+OBpuabtOaWsOOBmeOCi1xuICAgICAqIG1vdmVTbGlkZXLjga7lhoXpg6jlh6bnkIZcbiAgICAgKiBAcGFyYW1cdG1vdXNlUG9zIFNsaWRlclZpZXfjgpLljp/ngrnjgajjgZfjgZ/jg63jg7zjgqvjg6vjga7jg57jgqbjgrnluqfmqJnjgIFsaW1pdFNsaWRlckJ1dHRvblBvc2l0aW9u6Zai5pWw44Gn5Y+v5YuV56+E5Zuy44Gr5Yi26ZmQ5riI44G/44CCXG4gICAgICovXG4gICAgdXBkYXRlUGFydHMobW91c2VQb3MpIHtcbiAgICAgICAgY29uc3Qgc3RyZXRjaCA9ICh0YXJnZXQpID0+IHtcbiAgICAgICAgICAgIFNsaWRlclZpZXdVdGlsLnNldFNpemUodGFyZ2V0LCB0aGlzLl9pc0hvcml6b250YWwsIG1vdXNlUG9zIC0gU2xpZGVyVmlld1V0aWwuZ2V0UG9zaXRpb24odGFyZ2V0LCB0aGlzLl9pc0hvcml6b250YWwpKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy/jg5Djg7zjg57jgrnjgq/jgYzjgarjgZHjgozjgbDjgIHjg5Djg7zoh6rkvZPjgpLkvLjnuK7jgZnjgotcbiAgICAgICAgaWYgKHRoaXMuX2JhciAmJiAhdGhpcy5fYmFyTWFzaykge1xuICAgICAgICAgICAgc3RyZXRjaCh0aGlzLl9iYXIpO1xuICAgICAgICB9XG4gICAgICAgIC8v44OQ44O844Oe44K544Kv44GM44GC44KM44Gw44CB44Oe44K544Kv44KS5Ly457iu44GZ44KL44CCXG4gICAgICAgIGlmICh0aGlzLl9iYXJNYXNrKSB7XG4gICAgICAgICAgICBzdHJldGNoKHRoaXMuX2Jhck1hc2spO1xuICAgICAgICB9XG4gICAgICAgIC8v44Oc44K/44Oz44Gu5L2N572u44KS5pu05paw44GZ44KL44CCXG4gICAgICAgIFNsaWRlclZpZXdVdGlsLnNldFBvc2l0aW9uKHRoaXMuX3NsaWRlQnV0dG9uLCB0aGlzLl9pc0hvcml6b250YWwsIG1vdXNlUG9zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Gu5Zyw44KS44Kv44Oq44OD44Kv44GX44Gf6Zqb44Gu5Yem55CGXG4gICAgICog44Gd44Gu5L2N572u44G+44Gn44K544Op44Kk44OA44O844KS44K444Oj44Oz44OX44GZ44KLXG4gICAgICogQHBhcmFtIGV2dFxuICAgICAqL1xuICAgIG9uUHJlc3NCYXNlKGV2dCkge1xuICAgICAgICB0aGlzLmRyYWdTdGFydFBvcyA9IG5ldyBQb2ludCgpO1xuICAgICAgICB0aGlzLm1vdmVTbGlkZXIoZXZ0KTtcbiAgICAgICAgdGhpcy5fc2xpZGVyRXZlbnRFbWl0dGVyLmVtaXQoXCJzbGlkZXJfY2hhbmdlX2ZpbmlzaGVkXCIsIG5ldyBTbGlkZXJFdmVudENvbnRleHQodGhpcy5yYXRlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOOBruWJsuWQiOOBi+OCieOAgeOCueODqeOCpOODgOODvOOBruS9jee9ruOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbVx0cmF0ZVxuICAgICAqIEByZXR1cm5cbiAgICAgKi9cbiAgICBjb252ZXJ0UmF0ZVRvUGl4ZWwocmF0ZSkge1xuICAgICAgICByZXR1cm4gU2xpZGVyVmlld1V0aWwuY29udmVydFJhdGVUb1BpeGVsKHJhdGUsIHRoaXMuX21heFBvc2l0aW9uLCB0aGlzLl9taW5Qb3NpdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOOBruW6p+aomeOBi+OCieOAgeOCueODqeOCpOODgOODvOOBruWJsuWQiOOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbVx0cGl4ZWxcbiAgICAgKiBAcmV0dXJuXG4gICAgICovXG4gICAgY29udmVydFBpeGVsVG9SYXRlKHBpeGVsKSB7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jb252ZXJ0UGl4ZWxUb1JhdGUocGl4ZWwsIHRoaXMuX21heFBvc2l0aW9uLCB0aGlzLl9taW5Qb3NpdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODieODqeODg+OCsOS4reOBruODnuOCpuOCueW6p+aomeOCkuWPluW+l+OBmeOCi+OAglxuICAgICAqIGxpbWl0U2xpZGVyQnV0dG9uUG9zaXRpb27lhoXjga7lh6bnkIbjgIJcbiAgICAgKi9cbiAgICBnZXRNb3VzZVBvc2l0aW9uKGRpc3BsYXlPYmosIGV2dCkge1xuICAgICAgICBsZXQgbG9jYWxQb3M7XG4gICAgICAgIGlmIChldnQgaW5zdGFuY2VvZiBGZWRlcmF0ZWRQb2ludGVyRXZlbnQpIHtcbiAgICAgICAgICAgIGxvY2FsUG9zID0gZGlzcGxheU9iai50b0xvY2FsKGV2dC5nbG9iYWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9jYWxQb3MgPSBkaXNwbGF5T2JqLnRvTG9jYWwobmV3IFBvaW50KGV2dC5vZmZzZXRYLCBldnQub2Zmc2V0WSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFBvcy54IC0gdGhpcy5kcmFnU3RhcnRQb3MueDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFBvcy55IC0gdGhpcy5kcmFnU3RhcnRQb3MueTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQgYmFzZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9iYXNlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX2Jhc2UuaW50ZXJhY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9iYXNlLm9uKFwicG9pbnRlcnRhcFwiLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vblByZXNzQmFzZShlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGRQYXJ0cyh2YWx1ZSk7XG4gICAgfVxuICAgIGluaXRCYXJBbmRNYXNrKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YWx1ZS5pbnRlcmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB2YWx1ZS5pbnRlcmFjdGl2ZUNoaWxkcmVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGRQYXJ0cyh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IHNsaWRlQnV0dG9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uLm9uKFwicG9pbnRlcmRvd25cIiwgdGhpcy5zdGFydE1vdmUpO1xuICAgICAgICB0aGlzLl9zbGlkZUJ1dHRvbi5pbnRlcmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uLmludGVyYWN0aXZlQ2hpbGRyZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZFBhcnRzKHZhbHVlKTtcbiAgICB9XG4gICAgZ2V0IHJhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYXRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDlhajjgabjga5EaXNwbGF5T2JqZWN044GoRXZlbnRMaXN0ZW5lcuOCkuino+mZpOOBmeOCi+OAglxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBvbkRpc3Bvc2VGdW5jdGlvbihlKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuX2Jhc2UucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLnJlbW92ZUNoaWxkcmVuKCk7XG4gICAgfVxufVxuU2xpZGVyVmlldy5NQVhfUkFURSA9IDEuMDtcbmV4cG9ydCBjbGFzcyBTbGlkZXJWaWV3VXRpbCB7XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Gu5bqn5qiZ44GL44KJ44CB44K544Op44Kk44OA44O844Gu5Ymy5ZCI44KS5Y+W5b6X44GZ44KLXG4gICAgICovXG4gICAgc3RhdGljIGNvbnZlcnRQaXhlbFRvUmF0ZShwaXhlbCwgbWF4LCBtaW4pIHtcbiAgICAgICAgaWYgKG1heCA8PSBtaW4pIHtcbiAgICAgICAgICAgIHJldHVybiAwLjA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmF0ZSA9ICgocGl4ZWwgLSBtaW4pIC8gKG1heCAtIG1pbikpICogU2xpZGVyVmlldy5NQVhfUkFURTtcbiAgICAgICAgcmV0dXJuIFNsaWRlclZpZXdVdGlsLmNsYW1wKHJhdGUsIFNsaWRlclZpZXcuTUFYX1JBVEUsIDAuMCk7XG4gICAgfVxuICAgIHN0YXRpYyBjb252ZXJ0UmF0ZVRvUGl4ZWwocmF0ZSwgbWF4LCBtaW4pIHtcbiAgICAgICAgY29uc3QgcGl4ID0gKChtYXggLSBtaW4pICogcmF0ZSkgLyBTbGlkZXJWaWV3Lk1BWF9SQVRFICsgbWluO1xuICAgICAgICByZXR1cm4gU2xpZGVyVmlld1V0aWwuY2xhbXAocGl4LCBtYXgsIG1pbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODh+OCo+OCueODl+ODrOOCpOOCquODluOCuOOCp+OCr+ODiOOBi+OCieOCueOCr+ODreODvOODq+aWueWQkeOBruW6p+aomeWApOOCkuWPluOCiuWHuuOBmVxuICAgICAqIEByZXR1cm4gZGlzcGxheU9iauOBruW6p+aomeWApOOAguWNmOS9jeODlOOCr+OCu+ODq1xuICAgICAqL1xuICAgIHN0YXRpYyBnZXRQb3NpdGlvbihkaXNwbGF5T2JqLCBpc0hvcml6b250YWwpIHtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGRpc3BsYXlPYmoueDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlzcGxheU9iai55O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg4fjgqPjgrnjg5fjg6zjgqTjgqrjg5bjgrjjgqfjgq/jg4jjgavjgrnjgq/jg63jg7zjg6vmlrnlkJHjga7luqfmqJnlgKTjgpLoqK3lrprjgZnjgotcbiAgICAgKi9cbiAgICBzdGF0aWMgc2V0UG9zaXRpb24oZGlzcGxheU9iaiwgaXNIb3Jpem9udGFsLCBwb3NpdGlvbikge1xuICAgICAgICBpZiAoIWRpc3BsYXlPYmopXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgIGRpc3BsYXlPYmoueCA9IHBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGlzcGxheU9iai55ID0gcG9zaXRpb247XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Kv44Ot44O844Or5pa55ZCR44Gu6auY44GV44CB44KC44GX44GP44Gv5bmF44KS5Y+W5b6X44GZ44KL44CC5Y2Y5L2N44OU44Kv44K744OrXG4gICAgICovXG4gICAgc3RhdGljIGdldFNpemUoZGlzcGxheU9iaiwgaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSBTbGlkZXJWaWV3VXRpbC5nZXRDb250ZW50c0JvdW5kcyhkaXNwbGF5T2JqKTtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHNpemUud2lkdGggKiBkaXNwbGF5T2JqLnNjYWxlLng7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc2l6ZS5oZWlnaHQgKiBkaXNwbGF5T2JqLnNjYWxlLnk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Kv44Ot44O844Or5pa55ZCR44Gu6auY44GV44CB44KC44GX44GP44Gv5bmF44KS6Kit5a6a44GZ44KL44CCXG4gICAgICogQHBhcmFtIGRpc3BsYXlPYmpcbiAgICAgKiBAcGFyYW0gaXNIb3Jpem9udGFsXG4gICAgICogQHBhcmFtIGFtb3VudCB3aWR0aCBvciBoZWlnaHQsIHJhbmdlIDogMCB+IGRpc3BsYXlPYmouc2l6ZS53aWR0aCBvciBoZWlnaHQsIHVuaXQgOiBweFxuICAgICAqL1xuICAgIHN0YXRpYyBzZXRTaXplKGRpc3BsYXlPYmosIGlzSG9yaXpvbnRhbCwgYW1vdW50KSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSBTbGlkZXJWaWV3VXRpbC5nZXRDb250ZW50c0JvdW5kcyhkaXNwbGF5T2JqKTtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgZGlzcGxheU9iai5zY2FsZS54ID0gYW1vdW50IC8gc2l6ZS53aWR0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRpc3BsYXlPYmouc2NhbGUueSA9IGFtb3VudCAvIHNpemUuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBjbGFtcChudW0sIG1heCwgbWluKSB7XG4gICAgICAgIG51bSA9IE1hdGgubWF4KG51bSwgbWluKTtcbiAgICAgICAgbnVtID0gTWF0aC5taW4obnVtLCBtYXgpO1xuICAgICAgICByZXR1cm4gbnVtO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q29udGVudHNCb3VuZHMoZGlzcGxheU9iaikge1xuICAgICAgICBpZiAoZGlzcGxheU9iai5oaXRBcmVhKVxuICAgICAgICAgICAgcmV0dXJuIGRpc3BsYXlPYmouaGl0QXJlYTtcbiAgICAgICAgcmV0dXJuIGRpc3BsYXlPYmouZ2V0TG9jYWxCb3VuZHMoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTbGlkZXJWaWV3VXRpbCB9IGZyb20gXCIuLi9TbGlkZXJWaWV3XCI7XG5leHBvcnQgY2xhc3MgU2Nyb2xsQmFyVmlld1V0aWwge1xuICAgIC8qKlxuICAgICAqIOOCv+ODvOOCsuODg+ODiOOCs+ODs+ODhuODs+ODhOOBjOOAgeODnuOCueOCr+mgmOWfn+WGheOBq+WPjuOBvuOCi+W6p+aomeWApOOCkuWPluW+l+OBmeOCi+OAglxuICAgICAqIEBwYXJhbSB0YXJnZXRcbiAgICAgKiBAcGFyYW0gbWFza1xuICAgICAqIEBwYXJhbSBpc0hvcml6b250YWxcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0Q2xhbXBlZFRhcmdldFBvc2l0aW9uKHRhcmdldCwgbWFzaywgaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGNvbnN0IGdldFNpemUgPSBTbGlkZXJWaWV3VXRpbC5nZXRTaXplO1xuICAgICAgICBjb25zdCB0YXJnZXRTaXplID0gZ2V0U2l6ZSh0YXJnZXQsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IG1hc2tTaXplID0gZ2V0U2l6ZShtYXNrLCBpc0hvcml6b250YWwpO1xuICAgICAgICBjb25zdCBtaW5Qb3MgPSBNYXRoLm1pbigtdGFyZ2V0U2l6ZSArIG1hc2tTaXplLCAwLjApO1xuICAgICAgICBjb25zdCBwb3MgPSBTbGlkZXJWaWV3VXRpbC5nZXRQb3NpdGlvbih0YXJnZXQsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jbGFtcChwb3MsIDAsIG1pblBvcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCv+ODvOOCsuODg+ODiOOCs+ODs+ODhuODs+ODhOOBruS9jee9ruOCkuOAgeODnuOCueOCr+mgmOWfn+WGheOBq+S4uOOCgei+vOOCgOOAglxuICAgICAqIEBwYXJhbSB0YXJnZXRcbiAgICAgKiBAcGFyYW0gbWFza1xuICAgICAqIEBwYXJhbSBwb3NpdGlvblxuICAgICAqIEBwYXJhbSBpc0hvcml6b250YWxcbiAgICAgKi9cbiAgICBzdGF0aWMgY2xhbXBUYXJnZXRQb3NpdGlvbih0YXJnZXQsIG1hc2ssIHBvc2l0aW9uLCBpc0hvcml6b250YWwpIHtcbiAgICAgICAgU2xpZGVyVmlld1V0aWwuc2V0UG9zaXRpb24odGFyZ2V0LCBpc0hvcml6b250YWwsIHBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgY2xhbXBlZFBvcyA9IHRoaXMuZ2V0Q2xhbXBlZFRhcmdldFBvc2l0aW9uKHRhcmdldCwgbWFzaywgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgU2xpZGVyVmlld1V0aWwuc2V0UG9zaXRpb24odGFyZ2V0LCBpc0hvcml6b250YWwsIGNsYW1wZWRQb3MpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0UmF0aW9PZk9yaWdpbihkaXNwbGF5T2JqLCBpc0hvcml6b250YWwpIHtcbiAgICAgICAgY29uc3QgYm91bmRzID0gU2xpZGVyVmlld1V0aWwuZ2V0Q29udGVudHNCb3VuZHMoZGlzcGxheU9iaik7XG4gICAgICAgIGNvbnN0IHNpemUgPSBpc0hvcml6b250YWwgPyBib3VuZHMud2lkdGggOiBib3VuZHMuaGVpZ2h0O1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGlzSG9yaXpvbnRhbCA/IGJvdW5kcy54IDogYm91bmRzLnk7XG4gICAgICAgIGNvbnN0IHJhdGlvID0gcG9zaXRpb24gLyBzaXplO1xuICAgICAgICBpZiAocmF0aW8gPiAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7ZGlzcGxheU9iai5uYW1lfSA6IOODnOOCv+ODs+OCteOCpOOCuuOBjOS4jemBqeWIh+OBp+OBmeOAguODnOOCv+ODs+OBruefqeW9ouWGheOBq+WOn+eCueOBjOWPjuOBvuOBo+OBpuOBhOOBvuOBm+OCk+OAguOCueOCr+ODreODvOODq+ODkOODvOODnOOCv+ODs+OBr+WOn+eCueOCkuWbsuOCgOefqeW9ouOBqOOBl+OBpuOBj+OBoOOBleOBhOOAgmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByYXRpbztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBFYXNpbmcsIFR3ZWVuIH0gZnJvbSBcIkB0d2VlbmpzL3R3ZWVuLmpzXCI7XG5pbXBvcnQgeyBUaWNrZXIsIHV0aWxzLCB9IGZyb20gXCJwaXhpLmpzXCI7XG5pbXBvcnQgeyBTbGlkZXJWaWV3VXRpbCB9IGZyb20gXCIuLi9TbGlkZXJWaWV3XCI7XG5pbXBvcnQgeyBTY3JvbGxCYXJWaWV3VXRpbCB9IGZyb20gXCIuL1Njcm9sbEJhclZpZXdVdGlsXCI7XG4vKipcbiAqIOOCueOCr+ODreODvOODq+ODkOODvOOCqOODquOCouOBruaFo+aAp+OCueOCr+ODreODvOODq+OCkuWHpueQhuOBmeOCi+OCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgSW5lcnRpYWxTY3JvbGxNYW5hZ2VyIGV4dGVuZHMgdXRpbHMuRXZlbnRFbWl0dGVyIHtcbiAgICBnZXQgc3BlZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zcGVlZDtcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc2Nyb2xsQmFyVmlldykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmRlY2VsZXJhdGlvblJhdGUgPSAwLjk3NTtcbiAgICAgICAgdGhpcy5vdmVyZmxvd1Njcm9sbFJhbmdlID0gMTgwO1xuICAgICAgICB0aGlzLl9zcGVlZCA9IDAuMDtcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25Nb3VzZURvd24gPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVEcmFnUG9zKGUpO1xuICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3NwZWVkID0gMC4wO1xuICAgICAgICAgICAgaWYgKHRoaXMudHdlZW4pXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwb3NlVHdlZW4oKTtcbiAgICAgICAgICAgIHRoaXMuYWRkRHJhZ0xpc3RlbmVyKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25Nb3VzZU1vdmUgPSAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSB0aGlzLmdldERyYWdQb3MoZSkgLSB0aGlzLmRyYWdQb3M7XG4gICAgICAgICAgICB0aGlzLl9zcGVlZCA9IGRlbHRhO1xuICAgICAgICAgICAgdGhpcy5hZGRUYXJnZXRQb3NpdGlvbihkZWx0YSAqIHRoaXMuZ2V0T3ZlcmZsb3dEZWNlbGVyYXRpb24oKSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURyYWdQb3MoZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25Nb3VzZVVwID0gKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRHJhZ0xpc3RlbmVyKCk7XG4gICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMub25UaWNrKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25UaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNEcmFnZ2luZylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAodGhpcy5fc3BlZWQgPT09IDAuMCAmJiB0aGlzLmdldExlYXZlUmFuZ2VGcm9tTWFzaygpID09PSAwLjApXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKChfYSA9IHRoaXMudHdlZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pc1BsYXlpbmcoKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvL+S9jee9ruOBq+OCiOOCi+a4m+mAn+eOh+Wil+WKoOOAguODnuOCueOCr+OCqOODquOCouOBi+OCiembouOCjOOBpuOBhOOCi+OBquOCiea4m+mAn+eOh+OBjOWkp+OBjeOBj+OBquOCi+OAglxuICAgICAgICAgICAgY29uc3Qgb3ZlcmZsb3dEZWNlbGVyYXRpb24gPSB0aGlzLmdldE92ZXJmbG93RGVjZWxlcmF0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLl9zcGVlZCAqPSB0aGlzLmRlY2VsZXJhdGlvblJhdGUgKiBvdmVyZmxvd0RlY2VsZXJhdGlvbjtcbiAgICAgICAgICAgIHRoaXMuYWRkVGFyZ2V0UG9zaXRpb24odGhpcy5fc3BlZWQpO1xuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuX3NwZWVkKSA+IDAuMSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvL2JhY2sgZWFzZVxuICAgICAgICAgICAgdGhpcy5fc3BlZWQgPSAwLjA7XG4gICAgICAgICAgICBjb25zdCB0b09iaiA9IHsgeTogdGhpcy5nZXRDbGFtcGVkUG9zKCkgfTtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZVR3ZWVuKCk7XG4gICAgICAgICAgICB0aGlzLnR3ZWVuID0gbmV3IFR3ZWVuKHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQpXG4gICAgICAgICAgICAgICAgLnRvKHRvT2JqLCA2NjYpXG4gICAgICAgICAgICAgICAgLm9uVXBkYXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJ1cGRhdGVfdGFyZ2V0X3Bvc2l0aW9uXCIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZWFzaW5nKEVhc2luZy5DdWJpYy5PdXQpXG4gICAgICAgICAgICAgICAgLnN0YXJ0KCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3RvcEluZXJ0aWFsID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc3BlZWQgPSAwLjA7XG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2VUd2VlbigpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRpc3Bvc2VUd2VlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnR3ZWVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50d2Vlbi5zdG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy50d2VlbiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2Nyb2xsQmFyVmlldyA9IHNjcm9sbEJhclZpZXc7XG4gICAgICAgIHNjcm9sbEJhclZpZXcuc2Nyb2xsQmFyRXZlbnRFbWl0dGVyLm9uKFwic3RvcF9pbmVydGlhbF90d2VlblwiLCB0aGlzLnN0b3BJbmVydGlhbCk7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQ7XG4gICAgICAgIHRhcmdldC5pbnRlcmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1N0YXJ0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9pc1N0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgdGFyZ2V0Lm9uKFwicG9pbnRlcmRvd25cIiwgdGhpcy5vbk1vdXNlRG93bik7XG4gICAgICAgIFRpY2tlci5zaGFyZWQuYWRkKHRoaXMub25UaWNrKTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1N0YXJ0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9pc1N0YXJ0ID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQ7XG4gICAgICAgIHRhcmdldC5vZmYoXCJwb2ludGVyZG93blwiLCB0aGlzLm9uTW91c2VEb3duKTtcbiAgICAgICAgdGhpcy5yZW1vdmVEcmFnTGlzdGVuZXIoKTtcbiAgICAgICAgdGhpcy5zdG9wSW5lcnRpYWwoKTtcbiAgICAgICAgVGlja2VyLnNoYXJlZC5yZW1vdmUodGhpcy5vblRpY2spO1xuICAgIH1cbiAgICBhZGREcmFnTGlzdGVuZXIoKSB7XG4gICAgICAgIHRoaXMuc3dpdGNoRHJhZ0xpc3RlbmVyKHRydWUpO1xuICAgIH1cbiAgICByZW1vdmVEcmFnTGlzdGVuZXIoKSB7XG4gICAgICAgIHRoaXMuc3dpdGNoRHJhZ0xpc3RlbmVyKGZhbHNlKTtcbiAgICB9XG4gICAgc3dpdGNoRHJhZ0xpc3RlbmVyKGlzT24pIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgY29uc3Qgc3dpdGNoTGlzdGVuZXIgPSAoaXNPbiwgZXZlbnQsIGxpc3RlbmVyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNPbikge1xuICAgICAgICAgICAgICAgIHRhcmdldC5vbihldmVudCwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Lm9mZihldmVudCwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzd2l0Y2hMaXN0ZW5lcihpc09uLCBcInBvaW50ZXJtb3ZlXCIsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgICAgICBzd2l0Y2hMaXN0ZW5lcihpc09uLCBcInBvaW50ZXJ1cFwiLCB0aGlzLm9uTW91c2VVcCk7XG4gICAgICAgIHN3aXRjaExpc3RlbmVyKGlzT24sIFwicG9pbnRlcnVwb3V0c2lkZVwiLCB0aGlzLm9uTW91c2VVcCk7XG4gICAgfVxuICAgIGdldERyYWdQb3MoZSkge1xuICAgICAgICByZXR1cm4gU2xpZGVyVmlld1V0aWwuZ2V0UG9zaXRpb24oZS5nbG9iYWwsIHRoaXMuc2Nyb2xsQmFyVmlldy5pc0hvcml6b250YWwpO1xuICAgIH1cbiAgICB1cGRhdGVEcmFnUG9zKGUpIHtcbiAgICAgICAgdGhpcy5kcmFnUG9zID0gdGhpcy5nZXREcmFnUG9zKGUpO1xuICAgIH1cbiAgICBhZGRUYXJnZXRQb3NpdGlvbihkZWx0YSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnNjcm9sbEJhclZpZXcuY29udGVudHMudGFyZ2V0O1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLnNjcm9sbEJhclZpZXcuaXNIb3Jpem9udGFsO1xuICAgICAgICBjb25zdCBjdXJyZW50UG9zID0gU2xpZGVyVmlld1V0aWwuZ2V0UG9zaXRpb24odGFyZ2V0LCBpc0hvcml6b250YWwpO1xuICAgICAgICBTbGlkZXJWaWV3VXRpbC5zZXRQb3NpdGlvbih0YXJnZXQsIGlzSG9yaXpvbnRhbCwgY3VycmVudFBvcyArIGRlbHRhKTtcbiAgICAgICAgdGhpcy5lbWl0KFwidXBkYXRlX3RhcmdldF9wb3NpdGlvblwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Kv44Ot44O844Or44Gu44Kq44O844OQ44O844OV44Ot44O86YeP44GL44KJ44CB5rib6YCA546H44KS5Ymy44KK5Ye644GZ44CCXG4gICAgICogb3ZlcmZsb3dTY3JvbGxSYW5nZeS7peS4iuOBq+mbouOCjOOBpuOBhOOCi+WgtOWQiOOBrzAuMFxuICAgICAqIOOCueOCr+ODreODvOODq+OCqOODquOCouWGheOBq+OCs+ODs+ODhuODs+ODhOOBjOOBguOCi+WgtOWQiOOBrzEuMOOCkui/lOOBmeOAglxuICAgICAqL1xuICAgIGdldE92ZXJmbG93RGVjZWxlcmF0aW9uKCkge1xuICAgICAgICBjb25zdCBkaWZQb3MgPSB0aGlzLmdldExlYXZlUmFuZ2VGcm9tTWFzaygpO1xuICAgICAgICBsZXQgb3ZlcmZsb3dEZWNlbGVyYXRpb24gPSAodGhpcy5vdmVyZmxvd1Njcm9sbFJhbmdlIC0gZGlmUG9zKSAvIHRoaXMub3ZlcmZsb3dTY3JvbGxSYW5nZTtcbiAgICAgICAgaWYgKG92ZXJmbG93RGVjZWxlcmF0aW9uIDwgMC4wKVxuICAgICAgICAgICAgb3ZlcmZsb3dEZWNlbGVyYXRpb24gPSAwLjA7XG4gICAgICAgIHJldHVybiBvdmVyZmxvd0RlY2VsZXJhdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K/44O844Ky44OD44OI44Kz44Oz44OG44Oz44OE44GM44Oe44K544Kv6aCY5Z+f44GL44KJ44Gp44KM44Gg44GR6Zui44KM44Gm44GE44KL44GL44CCXG4gICAgICovXG4gICAgZ2V0TGVhdmVSYW5nZUZyb21NYXNrKCkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnNjcm9sbEJhclZpZXcuY29udGVudHMudGFyZ2V0O1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLnNjcm9sbEJhclZpZXcuaXNIb3Jpem9udGFsO1xuICAgICAgICBjb25zdCBjdXJyZW50UG9zID0gU2xpZGVyVmlld1V0aWwuZ2V0UG9zaXRpb24odGFyZ2V0LCBpc0hvcml6b250YWwpO1xuICAgICAgICBjb25zdCBjbGFtcGVkUG9zID0gdGhpcy5nZXRDbGFtcGVkUG9zKCk7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhjdXJyZW50UG9zIC0gY2xhbXBlZFBvcyk7XG4gICAgfVxuICAgIGdldENsYW1wZWRQb3MoKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQ7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5pc0hvcml6b250YWw7XG4gICAgICAgIHJldHVybiBTY3JvbGxCYXJWaWV3VXRpbC5nZXRDbGFtcGVkVGFyZ2V0UG9zaXRpb24odGFyZ2V0LCB0aGlzLnNjcm9sbEJhclZpZXcuY29udGVudHMubWFzaywgaXNIb3Jpem9udGFsKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyB1dGlscyB9IGZyb20gXCJwaXhpLmpzXCI7XG5pbXBvcnQgeyBTbGlkZXJWaWV3VXRpbCB9IGZyb20gXCIuLi9TbGlkZXJWaWV3XCI7XG5pbXBvcnQgeyBTY3JvbGxCYXJWaWV3VXRpbCB9IGZyb20gXCIuL1Njcm9sbEJhclZpZXdVdGlsXCI7XG4vKipcbiAqIFNjcm9sbEJhclZpZXfjgpLlj5fjgZHlj5bjgorjgIHjg57jgqbjgrnjg5vjgqTjg7zjg6vjgavjgojjgovmk43kvZzjgpLooYzjgYbjgq/jg6njgrlcbiAqL1xuZXhwb3J0IGNsYXNzIE1vdXNlV2hlZWxTY3JvbGxNYW5hZ2VyIGV4dGVuZHMgdXRpbHMuRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzY3JvbGxCYXJWaWV3KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZGVsdGEgPSAxNjtcbiAgICAgICAgLy9UT0RPIGFkZCBzdXBwb3J0IGRlbHRhWCAvIGRlbHRhWVxuICAgICAgICB0aGlzLndoZWVsSGFuZGxlciA9IChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzaGlmdCA9IGUuZGVsdGFZID4gMCA/IC10aGlzLmRlbHRhIDogdGhpcy5kZWx0YTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsKHNoaWZ0KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zY3JvbGxCYXJWaWV3ID0gc2Nyb2xsQmFyVmlldztcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5zY3JvbGxCYXJWaWV3LmNvbnRlbnRzLnRhcmdldDtcbiAgICAgICAgdGFyZ2V0LmludGVyYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzU3RhcnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQ7XG4gICAgICAgIHRhcmdldC5vbihcIndoZWVsXCIsIHRoaXMud2hlZWxIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5faXNTdGFydCA9IHRydWU7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQ7XG4gICAgICAgIHRhcmdldC5vZmYoXCJ3aGVlbFwiLCB0aGlzLndoZWVsSGFuZGxlcik7XG4gICAgICAgIHRoaXMuX2lzU3RhcnQgPSBmYWxzZTtcbiAgICB9XG4gICAgc2Nyb2xsKGRlbHRhKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2Nyb2xsQmFyVmlldy5jb250ZW50cy50YXJnZXQ7XG4gICAgICAgIGNvbnN0IG1hc2sgPSB0aGlzLnNjcm9sbEJhclZpZXcuY29udGVudHMubWFzaztcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5zY3JvbGxCYXJWaWV3LmlzSG9yaXpvbnRhbDtcbiAgICAgICAgY29uc3QgcG9zID0gU2xpZGVyVmlld1V0aWwuZ2V0UG9zaXRpb24odGFyZ2V0LCBpc0hvcml6b250YWwpICsgZGVsdGE7XG4gICAgICAgIFNjcm9sbEJhclZpZXdVdGlsLmNsYW1wVGFyZ2V0UG9zaXRpb24odGFyZ2V0LCBtYXNrLCBwb3MsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIHRoaXMuZW1pdChcInVwZGF0ZV90YXJnZXRfcG9zaXRpb25cIik7XG4gICAgICAgIHRoaXMuc2Nyb2xsQmFyVmlldy5zY3JvbGxCYXJFdmVudEVtaXR0ZXIuZW1pdChcInN0b3BfaW5lcnRpYWxfdHdlZW5cIik7XG4gICAgfVxufVxuIiwiZXhwb3J0IHZhciBTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZTtcbihmdW5jdGlvbiAoU2Nyb2xsQmFyQ29udGVudHNFdmVudFR5cGUpIHtcbiAgICBTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZVtcIkNIQU5HRURfQ09OVEVOVFNfU0laRVwiXSA9IFwiU2Nyb2xsQmFyQ29udGVudHNFdmVudFR5cGVfQ0hBTkdFRF9DT05URU5UU19TSVpFXCI7XG59KShTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZSB8fCAoU2Nyb2xsQmFyQ29udGVudHNFdmVudFR5cGUgPSB7fSkpO1xuIiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBwaXhpL3V0aWxzXCI7XG5pbXBvcnQgeyBTbGlkZXJWaWV3LCBTbGlkZXJWaWV3VXRpbCB9IGZyb20gXCIuLi9TbGlkZXJWaWV3XCI7XG5pbXBvcnQgeyBTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZSB9IGZyb20gXCIuL1Njcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlXCI7XG4vKipcbiAqIOOCueOCr+ODreODvOODq+ODkOODvOOBp+aTjeS9nOOBmeOCi+OCs+ODs+ODhuODs+ODhFxuICovXG5leHBvcnQgY2xhc3MgU2Nyb2xsQmFyQ29udGVudHMgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGdldCB0YXJnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90YXJnZXQ7XG4gICAgfVxuICAgIHNldCB0YXJnZXQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZW1pdChTY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZS5DSEFOR0VEX0NPTlRFTlRTX1NJWkUpO1xuICAgIH1cbiAgICBnZXQgbWFzaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hc2s7XG4gICAgfVxuICAgIHNldCBtYXNrKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX21hc2sgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lbWl0KFNjcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlLkNIQU5HRURfQ09OVEVOVFNfU0laRSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCDjgrnjgq/jg63jg7zjg6vmk43kvZzjgpLlj5fjgZHjgovjgrPjg7Pjg4bjg7Pjg4RcbiAgICAgKiBAcGFyYW0gbWFzayB0YXJnZXTjgpLliIfjgormipzjgY/jg57jgrnjgq9cbiAgICAgKiBAcGFyYW0gY29udGFpbmVyIHRhcmdldOOBiuOCiOOBs21hc2vjgpLmoLzntI3jgZnjgovopqrjgrPjg7Pjg4bjg4pcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQsIG1hc2ssIGNvbnRhaW5lcikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLl9tYXNrID0gbWFzaztcbiAgICAgICAgU2Nyb2xsQmFyQ29udGVudHMuaW5pdCh0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGluaXQoc2Nyb2xsQmFyQ29udGVudHMpIHtcbiAgICAgICAgaWYgKHNjcm9sbEJhckNvbnRlbnRzLl90YXJnZXQubWFzayAhPT0gc2Nyb2xsQmFyQ29udGVudHMuX21hc2spIHtcbiAgICAgICAgICAgIHNjcm9sbEJhckNvbnRlbnRzLl90YXJnZXQubWFzayA9IHNjcm9sbEJhckNvbnRlbnRzLl9tYXNrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFkZFRvQ29udGFpbmVyID0gKGRpc3BsYXlPYmplY3QpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmIChkaXNwbGF5T2JqZWN0LnBhcmVudCA9PT0gc2Nyb2xsQmFyQ29udGVudHMuY29udGFpbmVyKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIChfYSA9IGRpc3BsYXlPYmplY3QucGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlQ2hpbGQoZGlzcGxheU9iamVjdCk7XG4gICAgICAgICAgICBzY3JvbGxCYXJDb250ZW50cy5jb250YWluZXIuYWRkQ2hpbGQoZGlzcGxheU9iamVjdCk7XG4gICAgICAgIH07XG4gICAgICAgIGFkZFRvQ29udGFpbmVyKHNjcm9sbEJhckNvbnRlbnRzLl90YXJnZXQpO1xuICAgICAgICBhZGRUb0NvbnRhaW5lcihzY3JvbGxCYXJDb250ZW50cy5fbWFzayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOePvueKtuOBruOCueOCr+ODreODvOODq+S9jee9ruOCkuWPluW+l+OBmeOCi+OAguWNmOS9jXJhdGVcbiAgICAgKiAwLjDjgafjgrPjg7Pjg4bjg7Pjg4Tjga9UT1AsIDEuMOOBp0JPVFRPTeOBq+S9jee9ruOBl+OBpuOBhOOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIGlzSG9yaXpvbnRhbFxuICAgICAqL1xuICAgIGdldFNjcm9sbFBvc2l0aW9uQXNSYXRlKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBjb25zdCBnZXRQb3MgPSBTbGlkZXJWaWV3VXRpbC5nZXRQb3NpdGlvbjtcbiAgICAgICAgY29uc3QgemVyb1BvcyA9IGdldFBvcyh0aGlzLm1hc2ssIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRzUG9zID0gZ2V0UG9zKHRoaXMudGFyZ2V0LCBpc0hvcml6b250YWwpO1xuICAgICAgICBjb25zdCBjb250ZW50c1Bvc2l0aW9uRGlmID0gemVyb1BvcyAtIGNvbnRlbnRzUG9zO1xuICAgICAgICBjb25zdCBtb3ZhYmxlUmFuZ2UgPSB0aGlzLmdldE1vdmFibGVSYW5nZShpc0hvcml6b250YWwpO1xuICAgICAgICByZXR1cm4gKGNvbnRlbnRzUG9zaXRpb25EaWYgLyBtb3ZhYmxlUmFuZ2UpICogU2xpZGVyVmlldy5NQVhfUkFURTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Kv44Ot44O844Or44Gu5pyA5aSn5Y+v5YuV6aCY5Z+f44KS5Y+W5b6X44GZ44KL44CC5Y2Y5L2NcHhcbiAgICAgKiDjgoLjgZflj6/li5Xln5/jgYzjgrzjg61weOS7peS4i+OBruWgtOWQiOOAgealteWwj+OBruato+OBruWApOOCkui/lOOBmeOAglxuICAgICAqXG4gICAgICogQHBhcmFtIGlzSG9yaXpvbnRhbFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0TW92YWJsZVJhbmdlKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBjb25zdCBnZXRTaXplID0gU2xpZGVyVmlld1V0aWwuZ2V0U2l6ZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0U2l6ZSA9IGdldFNpemUodGhpcy5fdGFyZ2V0LCBpc0hvcml6b250YWwpO1xuICAgICAgICBjb25zdCBtYXNrU2l6ZSA9IGdldFNpemUodGhpcy5fbWFzaywgaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgZGlmID0gdGFyZ2V0U2l6ZSAtIG1hc2tTaXplO1xuICAgICAgICBpZiAoZGlmIDw9IDAuMCkge1xuICAgICAgICAgICAgcmV0dXJuIDFlLTEyODtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlmO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjg4bjg7Pjg4TjgpLjgIHmjIflrprjgZXjgozjgZ9yYXRl44Gu5L2N572u44G+44Gn44K544Kv44Ot44O844Or44GZ44KLXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmF0ZVxuICAgICAqIEBwYXJhbSBpc0hvcml6b250YWxcbiAgICAgKi9cbiAgICBzY3JvbGwocmF0ZSwgaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGNvbnN0IGdldFBvcyA9IFNsaWRlclZpZXdVdGlsLmdldFBvc2l0aW9uO1xuICAgICAgICBjb25zdCB6ZXJvUG9zID0gZ2V0UG9zKHRoaXMuX21hc2ssIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IG1vdmFibGVSYW5nZSA9IHRoaXMuZ2V0TW92YWJsZVJhbmdlKGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRzUG9zID0gemVyb1BvcyAtIG1vdmFibGVSYW5nZSAqIChyYXRlIC8gU2xpZGVyVmlldy5NQVhfUkFURSk7XG4gICAgICAgIFNsaWRlclZpZXdVdGlsLnNldFBvc2l0aW9uKHRoaXMuX3RhcmdldCwgaXNIb3Jpem9udGFsLCBjb250ZW50c1Bvcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCs+ODs+ODhuODs+ODhOOBjOihqOekuumgmOWfn+OBq+OBqeOCjOOBoOOBkeihqOekuuOBleOCjOOBpuOBhOOCi+OBi+OBruavlOeOh+OCkuWPluW+l+OBmeOCi+OAglxuICAgICAqIOOBk+OBruavlOeOh+OBr+OAgeOCueOCr+ODreODvOODq+ODkOODvOODnOOCv+ODs+OBruOCueOCseODvOODq+OBqOOBquOCi+OAglxuICAgICAqXG4gICAgICog5L6LIDog44Kz44Oz44OG44Oz44OE44K144Kk44K644GMMjAw44CB6KGo56S66aCY5Z+f44GMMTAw44Gq44KJMC41XG4gICAgICog44Kz44Oz44OG44Oz44OE44GM44GZ44G544Gm6KGo56S644GV44KM44Gm44GE44KL44Gq44KJMS4wXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaXNIb3Jpem9udGFsXG4gICAgICogQHJldHVybiAwLjAgfiAxLjBcbiAgICAgKi9cbiAgICBnZXREaXNwbGF5UmF0ZShpc0hvcml6b250YWwpIHtcbiAgICAgICAgY29uc3QgZ2V0U2l6ZSA9IFNsaWRlclZpZXdVdGlsLmdldFNpemU7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRzU2l6ZSA9IGdldFNpemUodGhpcy50YXJnZXQsIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IG1hc2tTaXplID0gZ2V0U2l6ZSh0aGlzLm1hc2ssIGlzSG9yaXpvbnRhbCk7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jbGFtcChtYXNrU2l6ZSAvIGNvbnRlbnRzU2l6ZSwgU2xpZGVyVmlldy5NQVhfUkFURSwgMC4wKTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9tYXNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gbnVsbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyB1dGlscyB9IGZyb20gXCJwaXhpLmpzXCI7XG5leHBvcnQgY2xhc3MgU2Nyb2xsQmFyRXZlbnRFbWl0dGVyIGV4dGVuZHMgdXRpbHMuRXZlbnRFbWl0dGVyIHtcbn1cbiIsImltcG9ydCB7IFNsaWRlclZpZXcsIFNsaWRlclZpZXdVdGlsIH0gZnJvbSBcIi4uL1NsaWRlclZpZXdcIjtcbmltcG9ydCB7IEluZXJ0aWFsU2Nyb2xsTWFuYWdlciB9IGZyb20gXCIuL0luZXJ0aWFsU2Nyb2xsTWFuYWdlclwiO1xuaW1wb3J0IHsgTW91c2VXaGVlbFNjcm9sbE1hbmFnZXIgfSBmcm9tIFwiLi9Nb3VzZVdoZWVsU2Nyb2xsTWFuYWdlclwiO1xuaW1wb3J0IHsgU2Nyb2xsQmFyQ29udGVudHNFdmVudFR5cGUgfSBmcm9tIFwiLi9TY3JvbGxCYXJDb250ZW50c0V2ZW50VHlwZVwiO1xuaW1wb3J0IHsgU2Nyb2xsQmFyRXZlbnRFbWl0dGVyIH0gZnJvbSBcIi4vU2Nyb2xsQmFyRXZlbnRcIjtcbmltcG9ydCB7IFNjcm9sbEJhclZpZXdVdGlsIH0gZnJvbSBcIi4vU2Nyb2xsQmFyVmlld1V0aWxcIjtcbi8qKlxuICog44K544Kv44Ot44O844Or44OQ44O844KS6KGo44GZ44Kv44Op44K544Gn44GZ44CCXG4gKlxuICog44GT44Gu44Kv44Op44K544Gv44CB44K544Op44Kk44OA44O844Gr5Lul5LiL44Gu5qmf6IO944KS6L+95Yqg44GX44Gf44KC44Gu44Gn44GZ44CCXG4gKlxuICogXHRcdDEu44Kz44Oz44OG44Oz44OE44K144Kk44K644Gr5ZCI44KP44Gb44Gf44CB44K544Kv44Ot44O844Or44OQ44O844Gu5Ly457iuXG4gKiBcdFx0Mi7jgrnjgq/jg63jg7zjg6vjg5Djg7zjga7kvLjnuK7jgavjgYLjgo/jgZvjgZ/jgIHnp7vli5Xnr4Tlm7Ljga7liLbpmZBcbiAqIFx0XHQzLuOCueOCr+ODreODvOODq+ODkOODvOOBruS8uOe4ruOBq+OBguOCj+OBm+OBn+OAgeenu+WLleWApOOBruWPluW+l1xuICovXG5leHBvcnQgY2xhc3MgU2Nyb2xsQmFyVmlldyBleHRlbmRzIFNsaWRlclZpZXcge1xuICAgIGdldCBjb250ZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRzO1xuICAgIH1cbiAgICBnZXQgYXV0b0hpZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hdXRvSGlkZTtcbiAgICB9XG4gICAgc2V0IGF1dG9IaWRlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2F1dG9IaWRlID0gdmFsdWU7XG4gICAgICAgIHRoaXMudXBkYXRlU2xpZGVyVmlzaWJsZSgpO1xuICAgIH1cbiAgICBnZXQgc2Nyb2xsQmFyRXZlbnRFbWl0dGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsQmFyRXZlbnRFbWl0dGVyO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihvcHRpb24sIHNjcm9sbENvbnRlbnRzKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbik7XG4gICAgICAgIHRoaXMuX2F1dG9IaWRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3Njcm9sbEJhckV2ZW50RW1pdHRlciA9IG5ldyBTY3JvbGxCYXJFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOOCueODqeOCpOODgOODvOOCpOODmeODs+ODiOOBq+W/nOOBmOOBpuOCs+ODs+ODhuODs+ODhOOCkuOCueOCr+ODreODvOODq+OBmeOCi1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51cGRhdGVDb250ZW50c1Bvc2l0aW9uID0gKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV2dCA9IGU7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnRzUG9zaXRpb25XaXRoUmF0ZShldnQucmF0ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2NvbnRlbnRzID0gc2Nyb2xsQ29udGVudHM7XG4gICAgICAgIHRoaXMuX2NvbnRlbnRzLm9uKFNjcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlLkNIQU5HRURfQ09OVEVOVFNfU0laRSwgdGhpcy51cGRhdGVTbGlkZXIpO1xuICAgICAgICB0aGlzLl9zbGlkZXJFdmVudEVtaXR0ZXIub24oXCJzbGlkZXJfY2hhbmdlXCIsIHRoaXMudXBkYXRlQ29udGVudHNQb3NpdGlvbik7XG4gICAgICAgIHRoaXMuY2hhbmdlUmF0ZShvcHRpb24ucmF0ZSk7XG4gICAgICAgIHRoaXMud2hlZWxNYW5hZ2VyID0gbmV3IE1vdXNlV2hlZWxTY3JvbGxNYW5hZ2VyKHRoaXMpO1xuICAgICAgICB0aGlzLndoZWVsTWFuYWdlci5vbihcInVwZGF0ZV90YXJnZXRfcG9zaXRpb25cIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJQb3NpdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbmVydGlhbE1hbmFnZXIgPSBuZXcgSW5lcnRpYWxTY3JvbGxNYW5hZ2VyKHRoaXMpO1xuICAgICAgICB0aGlzLmluZXJ0aWFsTWFuYWdlci5vbihcInVwZGF0ZV90YXJnZXRfcG9zaXRpb25cIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJQb3NpdGlvbigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Oc44K/44Oz44Gu5L2N572u44KS5Yi26ZmQ44GZ44KL6Zai5pWwXG4gICAgICogQHJldHVybiDliLbpmZDjgafliIfjgorokL3jgajjgZXjgozjgZ/jgrnjg6njgqTjg4Djg7zjg5zjgr/jg7Pjga7luqfmqJnlgKRcbiAgICAgKi9cbiAgICBsaW1pdFNsaWRlckJ1dHRvblBvc2l0aW9uKGV2dCkge1xuICAgICAgICBjb25zdCBtb3VzZVBvcyA9IHRoaXMuZ2V0TW91c2VQb3NpdGlvbih0aGlzLCBldnQpO1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2VPZlNsaWRlckJ1dHRvblBvc2l0aW9uKCk7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5jbGFtcChtb3VzZVBvcywgcmFuZ2UubWF4LCByYW5nZS5taW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjga7libLlkIjjgYvjgonjgIHjgrnjg6njgqTjg4Djg7zjga7kvY3nva7jgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW1cdHJhdGVcbiAgICAgKiBAcmV0dXJuXG4gICAgICovXG4gICAgY29udmVydFJhdGVUb1BpeGVsKHJhdGUpIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFJhbmdlT2ZTbGlkZXJCdXR0b25Qb3NpdGlvbigpO1xuICAgICAgICByZXR1cm4gU2xpZGVyVmlld1V0aWwuY29udmVydFJhdGVUb1BpeGVsKHJhdGUsIHJhbmdlLm1heCwgcmFuZ2UubWluKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44K544Op44Kk44OA44O844Gu5bqn5qiZ44GL44KJ44CB44K544Op44Kk44OA44O844Gu5Ymy5ZCI44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtXHRwaXhlbFxuICAgICAqIEByZXR1cm5cbiAgICAgKi9cbiAgICBjb252ZXJ0UGl4ZWxUb1JhdGUocGl4ZWwpIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldFJhbmdlT2ZTbGlkZXJCdXR0b25Qb3NpdGlvbigpO1xuICAgICAgICByZXR1cm4gU2xpZGVyVmlld1V0aWwuY29udmVydFBpeGVsVG9SYXRlKHBpeGVsLCByYW5nZS5tYXgsIHJhbmdlLm1pbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOODnOOCv+ODs+OBruWPr+WLleevhOWbsuOCkuWPluW+l+OBmeOCi+OAguWNmOS9jeODlOOCr+OCu+ODq1xuICAgICAqL1xuICAgIGdldFJhbmdlT2ZTbGlkZXJCdXR0b25Qb3NpdGlvbigpIHtcbiAgICAgICAgY29uc3QgYnV0dG9uU2l6ZSA9IHRoaXMuc2xpZGVCdXR0b25TaXplO1xuICAgICAgICBjb25zdCByYXRpbyA9IFNjcm9sbEJhclZpZXdVdGlsLmdldFJhdGlvT2ZPcmlnaW4odGhpcy5fc2xpZGVCdXR0b24sIHRoaXMuaXNIb3Jpem9udGFsKTtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5fbWF4UG9zaXRpb24gLSAoMS4wICsgcmF0aW8pICogYnV0dG9uU2l6ZTtcbiAgICAgICAgY29uc3QgbWluID0gdGhpcy5fbWluUG9zaXRpb24gLSByYXRpbyAqIGJ1dHRvblNpemU7XG4gICAgICAgIHJldHVybiB7IG1heCwgbWluIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueODqeOCpOODgOODvOODnOOCv+ODs+OBruOCteOCpOOCuuOAglxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IHNsaWRlQnV0dG9uU2l6ZSgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJTaXplKCk7XG4gICAgICAgIHJldHVybiBTbGlkZXJWaWV3VXRpbC5nZXRTaXplKHRoaXMuX3NsaWRlQnV0dG9uLCB0aGlzLmlzSG9yaXpvbnRhbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCueOCr+ODreODvOODq+ODkOODvOOBruODnOOCv+ODs+OCteOCpOOCuuWPiuOBs+S9jee9ruOCkuabtOaWsOOBmeOCi+OAglxuICAgICAqIOOCs+ODs+ODhuODs+ODhOOCteOCpOOCuuOBjOWkieabtOOBleOCjOOBn+WgtOWQiOOBruabtOaWsOOBq+OCguWIqeeUqOOBmeOCi+OAglxuICAgICAqL1xuICAgIHVwZGF0ZVNsaWRlcigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVXBkYXRhYmxlU2xpZGVyU2l6ZSgpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclNpemUoKTtcbiAgICAgICAgdGhpcy51cGRhdGVTbGlkZXJQb3NpdGlvbigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDnj77nirbjga7jgrPjg7Pjg4bjg7Pjg4TjgYrjgojjgbPjg57jgrnjgq/kvY3nva7jgYvjgonjgIHjgrnjg6njgqTjg4Djg7zjga7libLlkIjjgpLnrpflh7rjgZnjgovjgIJcbiAgICAgKiDjgZ3jga7libLlkIjjgafjgrnjg6njgqTjg4Djg7zjga7kvY3nva7jgpLmm7TmlrDjgZnjgovjgIJcbiAgICAgKi9cbiAgICB1cGRhdGVTbGlkZXJQb3NpdGlvbigpIHtcbiAgICAgICAgY29uc3QgcmF0ZSA9IHRoaXMuY29udGVudHMuZ2V0U2Nyb2xsUG9zaXRpb25Bc1JhdGUodGhpcy5pc0hvcml6b250YWwpO1xuICAgICAgICB0aGlzLmNoYW5nZVJhdGUocmF0ZSk7XG4gICAgfVxuICAgIGlzVXBkYXRhYmxlU2xpZGVyU2l6ZSgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuICgoKF9hID0gdGhpcy5fY29udGVudHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50YXJnZXQpICE9IG51bGwgJiZcbiAgICAgICAgICAgICgoX2IgPSB0aGlzLl9jb250ZW50cykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm1hc2spICE9IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMuX3NsaWRlQnV0dG9uICE9IG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrnjg6njgqTjg4Djg7zjg5zjgr/jg7Pjga7jgrXjgqTjgrrjga7kvLjnuK7jgpLooYzjgYbjgIJcbiAgICAgKi9cbiAgICB1cGRhdGVTbGlkZXJTaXplKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNVcGRhdGFibGVTbGlkZXJTaXplKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGZ1bGxTaXplID0gdGhpcy5fbWF4UG9zaXRpb24gLSB0aGlzLl9taW5Qb3NpdGlvbjtcbiAgICAgICAgY29uc3QgZGlzcGxheVJhdGUgPSB0aGlzLl9jb250ZW50cy5nZXREaXNwbGF5UmF0ZSh0aGlzLmlzSG9yaXpvbnRhbCk7XG4gICAgICAgIGNvbnN0IHNsaWRlclNpemUgPSBmdWxsU2l6ZSAqIGRpc3BsYXlSYXRlO1xuICAgICAgICBTbGlkZXJWaWV3VXRpbC5zZXRTaXplKHRoaXMuX3NsaWRlQnV0dG9uLCB0aGlzLmlzSG9yaXpvbnRhbCwgc2xpZGVyU2l6ZSk7XG4gICAgICAgIHRoaXMudXBkYXRlU2xpZGVyVmlzaWJsZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBhdXRvSGlkZeOBruadoeS7tuOBq+S4gOiHtOOBmeOCi+OBi+OCkuWIpOWumuOBl+OAgeihqOekuuOCkuWIh+OCiuabv+OBiOOCi+OAglxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdXBkYXRlU2xpZGVyVmlzaWJsZSgpIHtcbiAgICAgICAgdGhpcy5fc2xpZGVCdXR0b24udmlzaWJsZSA9IHRoaXMuX3NsaWRlQnV0dG9uLmludGVyYWN0aXZlID0gIXRoaXMuaXNIaWRkZW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGF1dG9IaWRl44Gu5p2h5Lu244Gr5LiA6Ie044GZ44KL44GL44KS5Yik5a6a44GZ44KLXG4gICAgICovXG4gICAgZ2V0IGlzSGlkZGVuKCkge1xuICAgICAgICAvL2F1dG9IaWRl44GM6Kit5a6a44GV44KM44Gm44GE44Gq44GE5aC05ZCI44Gv5bi444Gr6KGo56S6XG4gICAgICAgIGlmICghdGhpcy5hdXRvSGlkZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRzLmdldERpc3BsYXlSYXRlKHRoaXMuaXNIb3Jpem9udGFsKSA9PT0gMS4wO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiByYXRl5YCk44KS5YWD44Gr44Kz44Oz44OG44Oz44OE44KS44K544Kv44Ot44O844Or44GZ44KL44CCXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJhdGVcbiAgICAgKi9cbiAgICB1cGRhdGVDb250ZW50c1Bvc2l0aW9uV2l0aFJhdGUocmF0ZSkge1xuICAgICAgICB0aGlzLl9jb250ZW50cy5zY3JvbGwocmF0ZSwgdGhpcy5pc0hvcml6b250YWwpO1xuICAgIH1cbiAgICBvblByZXNzZWRTbGlkZXJCdXR0b24oZSkge1xuICAgICAgICBzdXBlci5vblByZXNzZWRTbGlkZXJCdXR0b24oZSk7XG4gICAgICAgIHRoaXMuX3Njcm9sbEJhckV2ZW50RW1pdHRlci5lbWl0KFwic3RvcF9pbmVydGlhbF90d2VlblwiKTtcbiAgICB9XG4gICAgb25Nb3ZlU2xpZGVyKGUpIHtcbiAgICAgICAgc3VwZXIub25Nb3ZlU2xpZGVyKGUpO1xuICAgICAgICB0aGlzLl9zY3JvbGxCYXJFdmVudEVtaXR0ZXIuZW1pdChcInN0b3BfaW5lcnRpYWxfdHdlZW5cIik7XG4gICAgfVxuICAgIG9uUHJlc3NCYXNlKGV2dCkge1xuICAgICAgICBpZiAodGhpcy5pc0hpZGRlbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgc3VwZXIub25QcmVzc0Jhc2UoZXZ0KTtcbiAgICAgICAgdGhpcy5fc2Nyb2xsQmFyRXZlbnRFbWl0dGVyLmVtaXQoXCJzdG9wX2luZXJ0aWFsX3R3ZWVuXCIpO1xuICAgIH1cbiAgICBvbkRpc3Bvc2VGdW5jdGlvbihlKSB7XG4gICAgICAgIHRoaXMuX2NvbnRlbnRzLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fY29udGVudHMgPSBudWxsO1xuICAgICAgICBzdXBlci5vbkRpc3Bvc2VGdW5jdGlvbihlKTtcbiAgICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9JbmVydGlhbFNjcm9sbE1hbmFnZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL01vdXNlV2hlZWxTY3JvbGxNYW5hZ2VyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TY3JvbGxCYXJDb250ZW50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2Nyb2xsQmFyQ29udGVudHNFdmVudFR5cGVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1Njcm9sbEJhckV2ZW50XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TY3JvbGxCYXJWaWV3XCI7XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9TbGlkZXJFdmVudFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2xpZGVyVmlld1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2xpZGVyVmlld09wdGlvblwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2Nyb2xsQmFyXCI7XG4iLCJpbXBvcnQgeyBBcHBsaWNhdGlvbiwgR3JhcGhpY3MsIFJlY3RhbmdsZSB9IGZyb20gXCJwaXhpLmpzXCI7XG5pbXBvcnQgeyBTbGlkZXJWaWV3IH0gZnJvbSBcIi4uXCI7XG5cbmNvbnN0IG9uRG9tQ29udGVudHNMb2FkZWQgPSAoKSA9PiB7XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHBsaWNhdGlvbih7IHdpZHRoOiA4MDAsIGhlaWdodDogNjAwIH0pO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGFwcC52aWV3KTtcblxuICBpbml0U2xpZGVyKGFwcC5zdGFnZSwgYXBwLnZpZXcpO1xuICBpbml0Tm9uTWFza1NsaWRlcihhcHAuc3RhZ2UsIGFwcC52aWV3KTtcbn07XG5jb25zdCBTTElERVJfVyA9IDIwMDtcbmNvbnN0IFNMSURFUl9IID0gNjQ7XG4vKipcbiAqIOOCueODqeOCpOODgOODvOOBruWun+ijheOCteODs+ODl+ODq1xuICogQHBhcmFtIHN0YWdlXG4gKi9cbmNvbnN0IGluaXRTbGlkZXIgPSAoc3RhZ2UsIHZpZXcpID0+IHtcbiAgY29uc3Qgc2xpZGVyID0gbmV3IFNsaWRlclZpZXcoe1xuICAgIGJhc2U6IGdldFNsaWRlckJhc2UoU0xJREVSX1csIFNMSURFUl9ILCAweDAwMDBmZiksXG4gICAgYmFyOiBnZXRTbGlkZXJCYXNlKFNMSURFUl9XLCBTTElERVJfSCwgMHgwMGZmZmYpLFxuICAgIGJ1dHRvbjogZ2V0U2xpZGVyQnV0dG9uKFNMSURFUl9XLCBTTElERVJfSCwgMHhmZmZmMDApLFxuICAgIG1hc2s6IGdldFNsaWRlck1hc2soU0xJREVSX1csIFNMSURFUl9IKSxcbiAgICBtaW5Qb3NpdGlvbjogMCxcbiAgICBtYXhQb3NpdGlvbjogU0xJREVSX1csXG4gICAgcmF0ZTogMjUuMCxcbiAgICBjYW52YXM6IHZpZXcsXG4gIH0pO1xuXG4gIHNsaWRlci5zbGlkZXJFdmVudEVtaXR0ZXIub24oXCJjaFwiLCAoZSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGUucmF0ZSk7XG4gIH0pO1xuICBzdGFnZS5hZGRDaGlsZChzbGlkZXIpO1xuICBzbGlkZXIueCA9IDIwMDtcbiAgc2xpZGVyLnkgPSAyMDA7XG59O1xuXG5jb25zdCBpbml0Tm9uTWFza1NsaWRlciA9IChzdGFnZSwgdmlldykgPT4ge1xuICBjb25zdCBzbGlkZXIgPSBuZXcgU2xpZGVyVmlldyh7XG4gICAgYmFzZTogZ2V0U2xpZGVyQmFzZShTTElERVJfVywgU0xJREVSX0gsIDB4MDAwMGZmKSxcbiAgICBiYXI6IGdldFNsaWRlckJhc2UoU0xJREVSX1csIFNMSURFUl9ILCAweDAwZmZmZiksXG4gICAgYnV0dG9uOiBnZXRTbGlkZXJCdXR0b24oU0xJREVSX1csIFNMSURFUl9ILCAweGZmZmYwMCksXG4gICAgbWluUG9zaXRpb246IDAsXG4gICAgbWF4UG9zaXRpb246IFNMSURFUl9XLFxuICAgIHJhdGU6IDI1LjAsXG4gICAgY2FudmFzOiB2aWV3LFxuICB9KTtcblxuICBzbGlkZXIub24oXCJzbGlkZXJfY2hhbmdlXCIsIChlKSA9PiB7XG4gICAgY29uc29sZS5sb2coZS5yYXRlKTtcbiAgfSk7XG4gIHN0YWdlLmFkZENoaWxkKHNsaWRlcik7XG4gIHNsaWRlci54ID0gMjAwO1xuICBzbGlkZXIueSA9IDQwMDtcbn07XG5cbmNvbnN0IGdldFNsaWRlckJhc2UgPSAodywgaCwgY29sb3IpID0+IHtcbiAgY29uc3QgZyA9IG5ldyBHcmFwaGljcygpO1xuICBnLmJlZ2luRmlsbChjb2xvcik7XG4gIGcubW92ZVRvKDAsIDApLmxpbmVUbyh3LCAwKS5saW5lVG8odywgaCkubGluZVRvKDAsIDApLmVuZEZpbGwoKTtcblxuICBnLmhpdEFyZWEgPSBuZXcgUmVjdGFuZ2xlKDAsIDAsIHcsIGgpO1xuICByZXR1cm4gZztcbn07XG5cbmNvbnN0IGdldFNsaWRlck1hc2sgPSAodywgaCkgPT4ge1xuICBjb25zdCBnID0gbmV3IEdyYXBoaWNzKCk7XG4gIGcuYmVnaW5GaWxsKDB4ZmYwMGZmLCAwLjEpO1xuICBnLmRyYXdSZWN0KDAsIDAsIHcsIGgpO1xuICBnLmhpdEFyZWEgPSBuZXcgUmVjdGFuZ2xlKDAsIDAsIHcsIGgpO1xuICByZXR1cm4gZztcbn07XG5cbmNvbnN0IGdldFNsaWRlckJ1dHRvbiA9ICh3LCBoLCBjb2xvcikgPT4ge1xuICBjb25zdCBnID0gbmV3IEdyYXBoaWNzKCk7XG4gIGcuYmVnaW5GaWxsKGNvbG9yLCAwLjUpO1xuICBnLmRyYXdSZWN0KC04LCAwLCAxNiwgaCk7XG4gIGcuaGl0QXJlYSA9IG5ldyBSZWN0YW5nbGUoLTgsIDAsIDE2LCBoKTtcbiAgcmV0dXJuIGc7XG59O1xuXG4vKipcbiAqIERPTUNvbnRlbnRMb2FkZWTku6XpmY3jgavliJ3mnJ/ljJblh6bnkIbjgpLlrp/ooYzjgZnjgotcbiAqL1xuaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiKSB7XG4gIG9uRG9tQ29udGVudHNMb2FkZWQoKTtcbn0gZWxzZSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIG9uRG9tQ29udGVudHNMb2FkZWQpO1xufVxuIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsIlNsaWRlckV2ZW50Q29udGV4dCIsImNvbnN0cnVjdG9yIiwicmF0ZSIsIlNsaWRlckV2ZW50RW1pdHRlciIsIlNIQVBFUyIsIlNsaWRlclZpZXciLCJTbGlkZXJWaWV3VXRpbCIsIlNsaWRlclZpZXdPcHRpb24iLCJpbml0Iiwib3B0aW9uIiwiX2EiLCJfYiIsIl9jIiwiTWF0aCIsIm1heCIsIm1pbiIsIk1BWF9SQVRFIiwibWluUG9zaXRpb24iLCJpc0hvcml6b250YWwiLCJjaGVjayIsImNoZWNrUGFydHMiLCJiYXNlIiwiYnV0dG9uIiwibWFzayIsImJhciIsIm9iaiIsInRhcmdldE5hbWUiLCJib3VuZHMiLCJnZXRDb250ZW50c0JvdW5kcyIsIndpZHRoIiwiaGVpZ2h0IiwidHlwZSIsIlJFQ1QiLCJFcnJvciIsInBhcmVudCIsImNvbnNvbGUiLCJ3YXJuIiwiQ29udGFpbmVyIiwiRmVkZXJhdGVkUG9pbnRlckV2ZW50IiwiUG9pbnQiLCJidXR0b25Sb290Q29udGFpbmVyIiwiX2J1dHRvblJvb3RDb250YWluZXIiLCJfaXNIb3Jpem9udGFsIiwic2xpZGVyRXZlbnRFbWl0dGVyIiwiX3NsaWRlckV2ZW50RW1pdHRlciIsImRyYWdTdGFydFBvcyIsImlzRHJhZ2dpbmciLCJzdGFydE1vdmUiLCJlIiwib25QcmVzc2VkU2xpZGVyQnV0dG9uIiwibW92ZVNsaWRlciIsIm9uTW92ZVNsaWRlciIsIm1vdmVTbGlkZXJGaW5pc2giLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX3NsaWRlQnV0dG9uIiwib2ZmIiwiZW1pdCIsImRpc3Bvc2UiLCJvbkRpc3Bvc2VGdW5jdGlvbiIsIl9jYW52YXMiLCJjYW52YXMiLCJfYmFyIiwiaW5pdEJhckFuZE1hc2siLCJfYmFyTWFzayIsInNsaWRlQnV0dG9uIiwiX21pblBvc2l0aW9uIiwiX21heFBvc2l0aW9uIiwibWF4UG9zaXRpb24iLCJfcmF0ZSIsImNoYW5nZVJhdGUiLCJhZGRDaGlsZFBhcnRzIiwicmVtb3ZlQ2hpbGQiLCJhZGRDaGlsZCIsInBvcyIsImNvbnZlcnRSYXRlVG9QaXhlbCIsInVwZGF0ZVBhcnRzIiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsImxvY2FsUG9zIiwidG9Mb2NhbCIsImdsb2JhbCIsIngiLCJ5IiwiZ2V0Um9vdENvbnRhaW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbiIsIm1vdXNlUG9zIiwibGltaXRTbGlkZXJCdXR0b25Qb3NpdGlvbiIsImNvbnZlcnRQaXhlbFRvUmF0ZSIsImV2dCIsImdldE1vdXNlUG9zaXRpb24iLCJjbGFtcCIsInN0cmV0Y2giLCJzZXRTaXplIiwiZ2V0UG9zaXRpb24iLCJzZXRQb3NpdGlvbiIsIm9uUHJlc3NCYXNlIiwicGl4ZWwiLCJkaXNwbGF5T2JqIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJ2YWx1ZSIsIl9iYXNlIiwiaW50ZXJhY3RpdmUiLCJpbnRlcmFjdGl2ZUNoaWxkcmVuIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmVtb3ZlQ2hpbGRyZW4iLCJwaXgiLCJwb3NpdGlvbiIsImdldFNpemUiLCJzaXplIiwic2NhbGUiLCJhbW91bnQiLCJudW0iLCJoaXRBcmVhIiwiZ2V0TG9jYWxCb3VuZHMiLCJTY3JvbGxCYXJWaWV3VXRpbCIsImdldENsYW1wZWRUYXJnZXRQb3NpdGlvbiIsInRhcmdldFNpemUiLCJtYXNrU2l6ZSIsIm1pblBvcyIsImNsYW1wVGFyZ2V0UG9zaXRpb24iLCJjbGFtcGVkUG9zIiwiZ2V0UmF0aW9PZk9yaWdpbiIsInJhdGlvIiwibmFtZSIsIkVhc2luZyIsIlR3ZWVuIiwiVGlja2VyIiwidXRpbHMiLCJJbmVydGlhbFNjcm9sbE1hbmFnZXIiLCJzcGVlZCIsIl9zcGVlZCIsInNjcm9sbEJhclZpZXciLCJkZWNlbGVyYXRpb25SYXRlIiwib3ZlcmZsb3dTY3JvbGxSYW5nZSIsIm9uTW91c2VEb3duIiwidXBkYXRlRHJhZ1BvcyIsInR3ZWVuIiwiZGlzcG9zZVR3ZWVuIiwiYWRkRHJhZ0xpc3RlbmVyIiwib25Nb3VzZU1vdmUiLCJkZWx0YSIsImdldERyYWdQb3MiLCJkcmFnUG9zIiwiYWRkVGFyZ2V0UG9zaXRpb24iLCJnZXRPdmVyZmxvd0RlY2VsZXJhdGlvbiIsIm9uTW91c2VVcCIsInJlbW92ZURyYWdMaXN0ZW5lciIsIm9uVGljayIsImdldExlYXZlUmFuZ2VGcm9tTWFzayIsImlzUGxheWluZyIsIm92ZXJmbG93RGVjZWxlcmF0aW9uIiwiYWJzIiwidG9PYmoiLCJnZXRDbGFtcGVkUG9zIiwiY29udGVudHMiLCJ0byIsIm9uVXBkYXRlIiwiZWFzaW5nIiwiQ3ViaWMiLCJPdXQiLCJzdGFydCIsInN0b3BJbmVydGlhbCIsInN0b3AiLCJzY3JvbGxCYXJFdmVudEVtaXR0ZXIiLCJfaXNTdGFydCIsInNoYXJlZCIsImFkZCIsInJlbW92ZSIsInN3aXRjaERyYWdMaXN0ZW5lciIsImlzT24iLCJzd2l0Y2hMaXN0ZW5lciIsImV2ZW50IiwibGlzdGVuZXIiLCJjdXJyZW50UG9zIiwiZGlmUG9zIiwiTW91c2VXaGVlbFNjcm9sbE1hbmFnZXIiLCJ3aGVlbEhhbmRsZXIiLCJzaGlmdCIsImRlbHRhWSIsInNjcm9sbCIsIlNjcm9sbEJhckNvbnRlbnRzRXZlbnRUeXBlIiwiU2Nyb2xsQmFyQ29udGVudHMiLCJfdGFyZ2V0IiwiQ0hBTkdFRF9DT05URU5UU19TSVpFIiwiX21hc2siLCJjb250YWluZXIiLCJzY3JvbGxCYXJDb250ZW50cyIsImFkZFRvQ29udGFpbmVyIiwiZGlzcGxheU9iamVjdCIsImdldFNjcm9sbFBvc2l0aW9uQXNSYXRlIiwiZ2V0UG9zIiwiemVyb1BvcyIsImNvbnRlbnRzUG9zIiwiY29udGVudHNQb3NpdGlvbkRpZiIsIm1vdmFibGVSYW5nZSIsImdldE1vdmFibGVSYW5nZSIsImRpZiIsImdldERpc3BsYXlSYXRlIiwiY29udGVudHNTaXplIiwiU2Nyb2xsQmFyRXZlbnRFbWl0dGVyIiwiU2Nyb2xsQmFyVmlldyIsIl9jb250ZW50cyIsImF1dG9IaWRlIiwiX2F1dG9IaWRlIiwidXBkYXRlU2xpZGVyVmlzaWJsZSIsIl9zY3JvbGxCYXJFdmVudEVtaXR0ZXIiLCJzY3JvbGxDb250ZW50cyIsInVwZGF0ZUNvbnRlbnRzUG9zaXRpb24iLCJ1cGRhdGVDb250ZW50c1Bvc2l0aW9uV2l0aFJhdGUiLCJ1cGRhdGVTbGlkZXIiLCJ3aGVlbE1hbmFnZXIiLCJ1cGRhdGVTbGlkZXJQb3NpdGlvbiIsImluZXJ0aWFsTWFuYWdlciIsInJhbmdlIiwiZ2V0UmFuZ2VPZlNsaWRlckJ1dHRvblBvc2l0aW9uIiwiYnV0dG9uU2l6ZSIsInNsaWRlQnV0dG9uU2l6ZSIsInVwZGF0ZVNsaWRlclNpemUiLCJpc1VwZGF0YWJsZVNsaWRlclNpemUiLCJmdWxsU2l6ZSIsImRpc3BsYXlSYXRlIiwic2xpZGVyU2l6ZSIsInZpc2libGUiLCJpc0hpZGRlbiIsIkFwcGxpY2F0aW9uIiwiR3JhcGhpY3MiLCJSZWN0YW5nbGUiLCJvbkRvbUNvbnRlbnRzTG9hZGVkIiwiYXBwIiwiZG9jdW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJ2aWV3IiwiaW5pdFNsaWRlciIsInN0YWdlIiwiaW5pdE5vbk1hc2tTbGlkZXIiLCJTTElERVJfVyIsIlNMSURFUl9IIiwic2xpZGVyIiwiZ2V0U2xpZGVyQmFzZSIsImdldFNsaWRlckJ1dHRvbiIsImdldFNsaWRlck1hc2siLCJsb2ciLCJ3IiwiaCIsImNvbG9yIiwiZyIsImJlZ2luRmlsbCIsIm1vdmVUbyIsImxpbmVUbyIsImVuZEZpbGwiLCJkcmF3UmVjdCIsInJlYWR5U3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///739\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var s=1/0;for(i=0;i<deferred.length;i++){for(var[U,F,B]=deferred[i],I=!0,g=0;g<U.length;g++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[g])))?U.splice(g--,1):(I=!1,B<s&&(s=B));if(I){deferred.splice(i--,1);var C=F();void 0!==C&&(Q=C)}}return Q}B=B||0;for(var i=deferred.length;i>0&&deferred[i-1][2]>B;i--)deferred[i]=deferred[i-1];deferred[i]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),__webpack_require__.j=414,(()=>{var Q={414:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,s,[I,g,C]=F,i=0;if(I.some((U=>0!==Q[U]))){for(B in g)__webpack_require__.o(g,B)&&(__webpack_require__.m[B]=g[B]);if(C)var l=C(__webpack_require__)}for(U&&U(F);i<I.length;i++)s=I[i],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(l)},F=self.webpackChunk_masatomakino_pixijs_basic_scrollbar=self.webpackChunk_masatomakino_pixijs_basic_scrollbar||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(739)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();